/////////////////////////////////////////////////////////////////////////////
// Build VML as part of TZLODOPR
//
//  OPERATION: GenerateJSPJ
//
// Lower Case Tag and Attribute Names
// Since XHTML is case sensitive, and since XHTML only accepts lower case
// HTML tags and attribute names, a general search and replace function was
// executed to replace all upper case tags with lowercase tags. The same was
// done for attribute names. We have always tried to use lower case names in
// our Web, so the replace function did not produce many real substitutions.
//
// All Attributes were Quoted
// Since the W3C XHTML 1.0 Recommendation states that all attribute values
// must be quoted, every page in the web was checked to see that attributes
// values were properly quoted. This was a time-consuming job, and we will
// surely never again forget to put quotes around our attribute values.
//
// Empty Tags: <hr> , <br> and <img>
// Empty tags are not allowed in XHTML. The <hr> and <br> tags should be
// replaced with <hr /> and <br />.
// This produced a problem with Netscape that misinterpreted the <br/> tags.
// We don't know why, but changing it to <br /> worked fine. After that
// discovery, a general search and replace function was executed to swap the
// tags.  A few other tags (like the <img> tag) were suffering from the same
// problem as above. We decided not to close the <img> tags with </img>, but
// with  /> at the end of the tag. This was done manually.
//


/*************************************************************************************************
**
**    OPERATION: GenJSPJ_FindTAB
**
**
*************************************************************************************************/
LOCAL OPERATION
GenJSPJ_FindTAB( VIEW vWindow BASED ON LOD TZWDLGSO )

   SHORT nRC

   // Determine if a Control with a TAB exists for a Control on the Window.
   // If so, return a 1.
   IF vWindow.Control.SyncKey < 9999
      RETURN 1
   END
   FOR EACH vWindow.CtrlCtrl
      SetViewToSubobject( vWindow, "CtrlCtrl" )
      nRC = GenJSPJ_FindTAB( vWindow )
      ResetViewFromSubobject( vWindow )
      IF nRC > 0
         RETURN nRC
      END
   END
   RETURN 0

END


/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: FlagUsedViewsGetFocusJ
//
/////////////////////////////////////////////////////////////////////////////
LOCAL OPERATION
FlagUsedViewsGetFocusJ( VIEW vDialog     BASED ON LOD TZWDLGSO,
                        VIEW vDialogRoot BASED ON LOD TZWDLGSO,
                        STRING ( 32 )    szFocusCtrlTag,
                        INTEGER          lTabIndex,
                        STRING ( 32 )    szWysiwygEditor )

   STRING ( 50 ) szControlType
   STRING ( 1 )  szProcessControlFlag
   INTEGER       lTempIndex
   INTEGER       lSubtype
   INTEGER       lSubtypeX
   INTEGER       lSort
   INTEGER       nRC

   lSort = 0

   // This operation performs the following functions:
   // 1. It is used to identify any Named Views that have mapping on this window (sets flag wWindowUseFlag).
   // 2. It identifies if a Grid exists that uses sorting. (That is needed to pull in the proper .js files.)
   // 3. It identifies the Control that should be given focus by setting the szFocusCtrlTag value.
   // 4. It identifies each ComboBox on the Page. This is used to generate on OnChange event capture by the calling routine.
   // 5. It identifies if there is an MLE request for the wysiwygEditor files.

   FOR EACH vDialog.Control

      szControlType = vDialog.ControlDef.Tag

      szProcessControlFlag = ""
      IF szControlType = "GridEditCtl"
         SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Edit"
         IF RESULT >= zCURSOR_SET
            // For a GridEditCtl control, we have input mapping only if "Edit" property is requested.
            szProcessControlFlag = "Y"
         END
      END
      IF szControlType = "EditBox" OR
         szControlType = "ComboBox" OR
         szControlType = "Text" OR
         szControlType = "CheckBox" OR
         szControlType = "ListBox" OR
         szControlType = "MLEdit" OR
         szControlType = "Outliner" OR
         szControlType = "RadioGrp" OR
         szControlType = "GridCheckCtl" OR
         szControlType = "Grid" OR
         szControlType = "Calendar" OR
         szProcessControlFlag = "Y"

         // 1.(above) Identify any Named Views that have mapping on this window.
         SET CURSOR FIRST vDialog.CtrlMapView WITHIN vDialog.Control
         IF RESULT >= zCURSOR_SET
            SET CURSOR FIRST vDialogRoot.ViewObjRef
                       WHERE vDialogRoot.ViewObjRef.ZKey = vDialog.CtrlMapView.ZKey
            IF RESULT >= zCURSOR_SET
               vDialogRoot.ViewObjRef.wWindowUseFlag = "Y"
            END

            IF szControlType = "ComboBox"
               SET CURSOR NEXT vDialog.CtrlMap
               IF vDialog.CtrlMapView EXISTS
                  SET CURSOR FIRST vDialogRoot.ViewObjRef
                             WHERE vDialogRoot.ViewObjRef.ZKey = vDialog.CtrlMapView.ZKey
                  IF RESULT >= zCURSOR_SET
                     vDialogRoot.ViewObjRef.wWindowUseFlag = "Y"
                  END
               END
            END
         END

         // 2.(above) For Grid, identify is Sort is requested.
         IF lSort = 0 AND szControlType = "Grid"

            lSubtypeX = vDialog.Control.ExtendedStyle

            // #define zSS_SORTEDHEADERS 0x00040000 = 262144
            // #define zSS_REMEMBERSORT  0x00020000 = 131072

            lSort = IsFlagSequenceSet( lSubtypeX, 262144 )
            IF lSort = 0
               lSort = IsFlagSequenceSet( lSubtypeX, 131072 )
            END

         END

         // 3.(above) Except for Grid, ListBox and Text, process for setting Focus.
         IF szControlType != "Grid" AND
            szControlType != "Text" AND
            szControlType != "ListBox"

            lTempIndex = vDialog.Control.SyncKey
            IF lTempIndex != 0 AND lTempIndex < lTabIndex

               szFocusCtrlTag = vDialog.Control.Tag
               lTabIndex = lTempIndex

            END
         END

         // 4.(above) Create entry for ComboBox.
         IF szControlType = "ComboBox"
            lSubtype = vDialog.Control.Subtype
            nRC = AreBitsSetInFlag( lSubtype, 61440 ) // 0x0000F000
            IF nRC = 0   // IF vDialog.Control.Subtype < 12000  ==> Domain Combobox
               CREATE ENTITY vDialogRoot.ComboBoxEntry
               vDialogRoot.ComboBoxEntry.Name = vDialog.Control.Tag
            END
         END

         // 5.(above) Check for wysiwygEditor.
         IF szControlType = "MLEdit" AND vDialog.Control.WebCtrlType = "wysiwygEditor"
            szWysiwygEditor = vDialog.Control.Tag
         END

      ELSE
         // Continue processing subobjects.
         IF vDialog.CtrlCtrl EXISTS
            SetViewToSubobject( vDialog, "CtrlCtrl" )
            lTempIndex = FlagUsedViewsGetFocusJ( vDialog, vDialogRoot, szFocusCtrlTag, lTabIndex, szWysiwygEditor )
            IF lTempIndex != 0
               lSort = 1
            END

            ResetViewFromSubobject( vDialog )

         END
      END
   END

   RETURN lSort
END

/////////////////////////////////////////////////////////////////////////////
//
//    OPERATION: GenJSPJ_ProcessFileIn
//
/////////////////////////////////////////////////////////////////////////////
TRANSFORMATION OPERATION
GenJSPJ_ProcessFileIn( VIEW             vDialog BASED ON LOD TZWDLGSO,
                      INTEGER          lFileJSP,
                      STRING ( 10000 ) szWriteBuffer )

   // Build the JSP function code to process a file being transferred from the Client to the Server.

   szWriteBuffer = "   ServletInputStream in = request.getInputStream();"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "   byte[] line = new byte[256];"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   byte[] crlf = {(byte) 0x0D, (byte) 0x0A}; // \r\n"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String sLine = null;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String enctype = null;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String boundary = null;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String status = null;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String sName = null;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String sSourceFile = null;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String sTargetFile = null;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String sExtension = null;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String sSourceFileNameOnly = null;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String sTargetDirectory = null;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String zAction = null;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String zTargetFileName = null;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   FileOutputStream file = null;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   int i = in.readLine(line, 0, 256);"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   boolean holdNewLine = false;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "   if (i != -1 && strActionToProcess == null)"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "   while (i != -1) "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      boolean hasNewLine = i>=2 && line[i-1]==crlf[1] "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         && line[i-2]== crlf[0];"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "      if (hasNewLine) i = i-2;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "      sLine = new String(line, 0, i);"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "      if (enctype==null) "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         // try to determine the encryption type"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         if (i>3 && sLine.startsWith(^--^)) "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            enctype = ^form-data^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            boundary = sLine;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            status = ^boundary^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         } "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         else "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            enctype = ^x-www-form-urlencoded^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      } "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      else if (enctype.equals(^x-www-form-urlencoded^)) "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         //out.println(^****************^+sLine);"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      } "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      else if (enctype.equals(^form-data^)) "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         // Calculating the status of the current line"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         if (status.equals(^boundary^)) "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            // Expecting the ^Content-Disposition:^ line"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            status = ^disposition^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         } "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         else if (status.equals(^disposition^)) "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            // Expecting the ^Content-Type:^ line or a blank line"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            if (sLine.startsWith(^Content-Type:^)) "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               status = ^type^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            } "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            else "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               status = ^blank^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         } "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         else if (status.equals(^type^)) "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            // Expecting a blank line"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            status = ^blank^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         } "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         else if (status.equals(^blank^) |||| status.equals(^data^)) "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            // Expecting the data or boundary"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            if (sLine.startsWith(boundary)) "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               status = ^boundary^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            } "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            else "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               status = ^data^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         // Now ^status^ is updated. Let's do the saving and echoing"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         if (status.equals(^disposition^)) "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            // Getting the file name and open a file for saving"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            int l = sLine.indexOf(^filename=^);"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            int x;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "            if (l>=0) "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            { "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               sTargetFile = sTargetFile.replaceAll(^\^^,^^); "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "               //We need to save the file extension and use"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               //this as the output file extension no matter what "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               //extension the output file has."
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               sSourceFile = sLine.substring(l+9);"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               sSourceFile = sSourceFile.replaceAll(^\^^,^^); "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               l = sSourceFile.lastIndexOf(^.^);"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

   szWriteBuffer = "               x = sSourceFile.lastIndexOf(^\\^);"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "               //If x > l then the filename has no extension and"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               //there must be a period in the directory name."
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               if (x > l)"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                  sExtension = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               else"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                  sExtension = sSourceFile.substring(l+1);"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               sSourceFileNameOnly = sSourceFile.substring(x + 1);"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               strInputFileName = sSourceFileNameOnly;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               sTargetFile = sTargetFile.replaceAll(^\^^,^^);"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               l = sTargetFile.lastIndexOf(^.^);"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               x = sTargetFile.lastIndexOf(^\\^);"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )


   szWriteBuffer = "               //If the target files is just a directory (no file name is specified)"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               //then use the name of the input file."
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               if (x+1 == sTargetFile.length())"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                  sTargetDirectory = sTargetFile;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                  sTargetFile = sTargetFile + sSourceFileNameOnly;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               else"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                  sTargetDirectory = sTargetFile.substring(0, x + 1);"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                  //Target file name has no extension, so use the extension on the"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                  //source file.  Otherwise, keep the name of target source entirely."
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                  if (x > l)"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                  {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                     //No extension"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                     if (sExtension.equals(^^))"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                        sTargetFile = sTargetFile + sExtension;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                     else"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                        sTargetFile = sTargetFile + ^.^ + sExtension;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                  }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               if (sTargetFile.length()>0)"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               { "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                   //If the directory doesn't exist, Create one. "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                  File f = new File(sTargetDirectory);"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                  boolean ok = f.mkdirs();"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                  file = new FileOutputStream(sTargetFile);"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            } "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            else"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               l = sLine.indexOf(^ name=^);"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               if (l>=0) "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               { "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                  sName = sLine.substring(l+6);"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                  sName = sName.replaceAll(^\^^,^^);"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                  l = sName.lastIndexOf(^\\^);"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                  if (l>=0) sName = sName.substring(l+1);"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                  if (sName.length()>0) "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                  {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                     if (sName.equals(^zAction^))"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                        zAction = ^Action^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                     else"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                        zAction = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                     if (sName.equals(^zTargetFileName^))"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                        zTargetFileName = ^TargetFileName^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                     else"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                        zTargetFileName = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                  }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         } "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         else if (status.equals(^boundary^)) "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            if (file!=null) "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               file.close();"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               file = null;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         if (status.equals(^data^)) "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            //We are writing out to the filename"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            if (file!=null) "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               if (holdNewLine) file.write(crlf);"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               file.write(line,0,i);"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               holdNewLine = hasNewLine;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            } "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            else "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               //Check if we have come across zAction or zTargetFileName"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               //If so, then get the data and save them to a global filename."
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               if (zAction.equals(^Action^))"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                  strActionToProcess = sLine;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                  zAction = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               if (zTargetFileName.equals(^TargetFileName^))"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                  sTargetFile = sLine;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                  zTargetFileName = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               holdNewLine = false;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         else "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            holdNewLine = false;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      i = in.readLine(line, 0, 256);"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

END

/////////////////////////////////////////////////////////////////////////////
//
// Note: Globally change //UNDEF to /*DEF*/ and vice versa to enable/disable
//       generation of some debugging code.
//
/////////////////////////////////////////////////////////////////////////////

TRANSFORMATION OPERATION
GenerateJSPJava( VIEW vDialog BASED ON LOD TZWDLGSO,
                 VIEW vSubtask )

   VIEW vLPLR        BASED ON LOD TZCMLPLO
   VIEW vDialogRoot  BASED ON LOD TZWDLGSO
   VIEW vDialogTemp  BASED ON LOD TZWDLGSO
   VIEW vDialogTemp2 BASED ON LOD TZWDLGSO
   VIEW vGroupParent BASED ON LOD TZWDLGSO
   VIEW vDfltMenu    BASED ON LOD TZWDLGSO
   STRING ( 1000 )  szJSP_FileName
   STRING ( 1000 )  szJAVA_FileName
   STRING ( 1000 )  szDirectoryName
   STRING ( 10000 ) szWriteBuffer
   STRING ( 10000 ) szJavaScript
   STRING ( 100 )   szIndent
   STRING ( 100 )   szIndentNext
   STRING ( 200 )   szMsg
   STRING ( 32 )    szViewName
   STRING ( 32 )    szEntityName
   STRING ( 32 )    szCtrlTag
   STRING ( 32 )    szListCtrlTag
   STRING ( 32 )    szFocusCtrlTag
   STRING ( 34 )    szActionName
   STRING ( 32 )    szDialogName
   STRING ( 32 )    szWindowName
   STRING ( 32 )    szAttributeName
   STRING ( 256 )   szClass
   STRING ( 64 )    szFormName
   STRING ( 34 )    szAction
   STRING ( 1 )     InitializationCode
   STRING ( 1 )     InsertBlankFlag
   STRING ( 1 )     WorkFlag
   STRING ( 100 )   szSizeF
   STRING ( 1024 )  szStyle
   STRING ( 1024 )  szFileName
   STRING ( 1 )     szBorder
   STRING ( 50 )    szCSS_Class
   STRING ( 50 )    szDivContentClass
   STRING ( 50 )    szControlType
   STRING ( 256 )   szBannerName
   STRING ( 10 )    szHeight
   STRING ( 10 )    szWidth
   STRING ( 32 )    szSystemIniApplName
   STRING ( 1 )     szTransferFileFlag
   STRING ( 1 )     szListButtonFlag
   STRING ( 1 )     szTrace
   STRING ( 50 )    szreCAPTCHAImport
   STRING ( 100 )   szJavaPackage
   STRING ( 100 )   szAppImport
   STRING ( 15 )    szIOImport
   STRING ( 50 )    szTempStr
   STRING ( 1 )     szUploadFile
   STRING ( 1 )     szSideMenuExists
   STRING ( 1 )     szShowSideMenu
   STRING ( 1 )     szShowTopMenu
   STRING ( 1 )     szShowBanner
   STRING ( 1 )     szNoPositioning
   STRING ( 1 )     szWindowIsPopup
   STRING ( 1 )     szWindowIsForDashboard
   STRING ( 10 )    szTimeout
// INTEGER          lHeight
// INTEGER          lWidth
   INTEGER          lFileJSP
   INTEGER          lControl
   INTEGER          lHeaderFile
   INTEGER          lLastPosY
   INTEGER          lSize
   INTEGER          X_Size
   INTEGER          Y_Size
   INTEGER          lTableRowCnt
   INTEGER          lTabIndex
   INTEGER          lSort
   INTEGER          lTrace
// INTEGER          lFloat
   STRING ( 32 )    szWysiwygEditor
   INTEGER          ReusableDialogZKey
   INTEGER          ReusableWindowZKey
   DECIMAL          DLUnits
   INTEGER          lLth
   SHORT            nRC

   // Generate a JSP file for formatting the Window that has current position.


   NAME VIEW vDialog "GenJSP_Dialog"
   szDialogName = vDialog.Dialog.Tag
   szWindowName = vDialog.Window.Tag
   szFormName = szDialogName + szWindowName

   // Initialize Output JSP File.
   GetViewByName( vLPLR, "TaskLPLR", vSubtask, zLEVEL_TASK )
   szDirectoryName = ""
   szSystemIniApplName = "[App." + vLPLR.LPLR.Name + "]"
   SysReadZeidonIni( -1, szSystemIniApplName, "WebDirectory", szDirectoryName )
   IF szDirectoryName = ""
      szWriteBuffer = "Zeidon.ini file does not have WebDirectory entry in Application: " + szSystemIniApplName
      MessageSend( vSubtask, "", "JSP Generation",
                   szWriteBuffer,
                   zMSGQ_OBJECT_CONSTRAINT_WARNING, 0 )
      RETURN -1
   END
   
   szJavaPackage = vLPLR.LPLR.JavaPackageName
   zSearchAndReplace( szJavaPackage,100, "\", "." )
   szAppImport = "," + szJavaPackage + ".*"
   //szAppImport = "," + vLPLR.LPLR.JavaPackageName + ".*"

   SysReadZeidonIni( -1, szSystemIniApplName, "JSPTraceLevel", szTrace )
   TraceLineS("** TraceLevel ** ", szTrace)
   IF  szTrace = "1"
      lTrace = 1
   ELSE
      lTrace = 0
   END

   szJSP_FileName = szDirectoryName + szFormName + ".jsp"
   TraceLineS( "GenerateJSP writing to file: ", szJSP_FileName )
   lFileJSP = SysOpenFile( vDialog, szJSP_FileName, COREFILE_WRITE )
   IF lFileJSP < 0
      MessageSend( vSubtask, "", "JSP Generation",
                   "Invalid JSP directory structure.",
                   zMSGQ_OBJECT_CONSTRAINT_WARNING, 0 )
      RETURN -1
   END

   CreateViewFromViewForTask( vDialogRoot, vDialog, 0 )
   NAME VIEW vDialogRoot "DialogRoot"
   
   
   // KJS 07/23/08 - Check if this dialog window will be built with all relative positioning or with absolute positioning
   IF  vDialog.Dialog.WEB_RelativePositionFlag = "Y" OR vDialog.Window.WEB_RelativePositionFlag = "Y" 
      szNoPositioning = "Y"
   ELSE
      szNoPositioning = ""
   END
   
   // KJS 02/19/09 - Added WEB_AbsolutePositionFlag because I would like to use absolute positioning on my popup pages but the rest
   // I want to use relative positioning.  Since I think from now on we will probably only want to use relative positioning for most
   // pages, I think it will be easier to have this flag.
   IF  vDialog.Window.WEB_AbsolutePositionFlag = "Y" 
      szNoPositioning = ""
   END
   


   // Check to see if Window has any tab stops set and indicate so in the Window entity.
   nRC = 0
   FOR EACH vDialog.Control
      IF nRC = 0
         nRC = GenJSPJ_FindTAB( vDialog )
      END
   END
   IF nRC = 0
      vDialogRoot.Window.wWindowHasTabsFlag = "N"
   ELSE
      vDialogRoot.Window.wWindowHasTabsFlag = "Y"
   END

   // JSP HEADER

   // KJS 05/29/08 - We need to add a DOCTYPE to the jsp page.  Not exactly sure
   // which one to add and how often this might need to change (wondering if this should
   // be kept in the .ini file or something but for now I'll put it here.
   // Here is a website with a little info http://www.alistapart.com/stories/doctype/
   // Also this one http://htmlhelp.com/tools/validator/doctype.html
   szWriteBuffer = "<!DOCTYPE HTML PUBLIC ^-//W3C//DTD HTML 4.01 Transitional//EN^"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
   szWriteBuffer = "^http://www.w3.org/TR/html4/loose.dtd^>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "<%-- " + szFormName + " --%>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szIOImport = ""
   szreCAPTCHAImport = ""
   
   CreateViewFromView( vDialogTemp, vDialog )
   lControl = zQUAL_STRING + zPOS_FIRST + zRECURS
   szCtrlTag = "File Transfer to Server"
   nRC = SetEntityCursor( vDialogTemp, "WebControlProperty", "Name", lControl,
                          szCtrlTag, "", "", 0, "Window", "" )   
   // If we are uploading a file, we need to include "java.oi.*" in the import statement.
   IF nRC >= zCURSOR_SET
      szIOImport = ",java.io.*"
   END

   FOR EACH vDialogTemp.Action
      // If there is an action to download a file, we need to include "java.oi.*" in the import statement.
      IF vDialogTemp.Action.Type = zWAB_ProcessDownloadFile
         szIOImport = ",java.io.*"
      END
      // If there is an action for the reCAPTCHA control, then we need 
      // net.tanesha.recaptcha.* in the import statement
      IF vDialogTemp.Action.Type = 35 OR vDialogTemp.Action.Type = 55 
         szreCAPTCHAImport = ",net.tanesha.recaptcha.*"
      END
   END

   // If there is an groupbox for the reCAPTCHA control, then we need 
   // net.tanesha.recaptcha.* in the import statement
   lControl = zQUAL_STRING + zPOS_FIRST + zRECURS
   szCtrlTag = "reCAPTCHA"
   nRC = SetEntityCursor( vDialogTemp, "WebControlProperty", "Name", lControl,
                          szCtrlTag, "", "", 0, "Window", "" )
   // If we are uploading a file, we need to include "java.oi.*" in the import statement.
   szIOImport = ""
   IF nRC >= zCURSOR_SET
      szreCAPTCHAImport = ",net.tanesha.recaptcha.*"
   END

   szWriteBuffer = "<%@ page import=^java.util.*,javax.servlet.*,javax.servlet.http.*,com.quinsoft.zeidon.*,com.quinsoft.zeidon.standardoe.*," +
                   "com.quinsoft.zeidon.utils.*,com.quinsoft.zeidon.vml.*" + szAppImport +
                   szIOImport + szreCAPTCHAImport + "^ %>"

   DropView( vDialogTemp )
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "<%! "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "ObjectEngine objectEngine = JavaObjectEngine.getInstance();"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )


   // INPUT MAPPING

   // First loop through controls and null out each Named View that is used.
   FOR EACH vDialog.ViewObjRef
      vDialog.ViewObjRef.wWindowUseFlag = ""
   END

   // Execute FlagUsedViesGetFocusR for multiple functions, such as determining which views are used in mapping.
   FOR EACH vDialogRoot.ComboBoxEntry
      DELETE ENTITY vDialogRoot.ComboBoxEntry NONE
   END

   szWysiwygEditor = ""  // do not include widgEditor.js file
   szFocusCtrlTag = ""
   lTabIndex = 9999
   lSort = FlagUsedViewsGetFocusJ( vDialog, vDialogRoot, szFocusCtrlTag, lTabIndex, szWysiwygEditor )
   TraceLineS( "Focus on Control: ", szFocusCtrlTag )

   /******************************  DoInputMapping  ******************************/

   // Create prototype and any definitions for views that are to be used.
   szWriteBuffer = "public int DoInputMapping( HttpServletRequest request,"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                           HttpSession session,"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                           ServletContext application )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "{"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String taskId = (String)  session.getAttribute( ^ZeidonTaskId^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   Task task = objectEngine.getTaskById( taskId );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )


   FOR EACH vDialog.ViewObjRef WHERE vDialog.ViewObjRef.wWindowUseFlag = "Y"
      szWriteBuffer = "   View " + vDialog.ViewObjRef.Name + " = null;"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   END

   szWriteBuffer = "   View vGridTmp; // temp view to grid view"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
   szWriteBuffer = "   View vMsgQ; // message queue"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "   String strError = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String strDateFormat = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String strValue = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   int    iView = 0;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   long    lEntityKey = 0;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String strEntityKey = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String strTag = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String strTemp = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   int    iTableRowCnt = 0;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String strSuffix = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   int    nRelPos = 0;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   int    nRC = 0;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   int    nMapError = 0;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   //KJS Trace
   IF (lTrace = 1)
      szWriteBuffer = "   vAS.TraceLine( ^DoInputMapping for jsp =======>> ^, ^" + szFormName + "^ );"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   vAS.TraceLine( ^DoInputMapping Session ID: ^ + strSID );"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
   END

   // Generate mapping statements for each view and control.
   FOR EACH vDialog.ViewObjRef WHERE vDialog.ViewObjRef.wWindowUseFlag = "Y"

      szViewName = vDialog.ViewObjRef.Name
      szWriteBuffer = "   " + szViewName + " = task.getViewByName( ^" + szViewName + "^ );"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

      szWriteBuffer = "   if ( " + szViewName + " != null )"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   {"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      OrderEntityForView( vDialog, "Control", "PSDLG_Y A PSDLG_X A" )
      GenJSPJ_InputMapRecurs( vDialog, szViewName, lFileJSP, szWriteBuffer, lTableRowCnt )
      szWriteBuffer = "   }"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   END
   
   // KJS 03/11/10 - We are going to be doing this differently.
   /*
   szWriteBuffer = "   if ( nMapError < 0 )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      iView = vAS.GetIntegerFromView( strSID );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      vAS.TraceLine( ^DoInputMapping ERROR =======>> ^, strError );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      vMsgQ = task.getViewByName( ^__MSGQ^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      if ( vMsgQ != null )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         v = vMsgQ.newView();"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         vAS.TraceLine( ^DoInputMapping found __MSGQ^, ^^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         v.displayObjectInstance( strSID );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         vAS.TraceLine( ^DoInputMapping __MSGQ View: ^, iView );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         nRC = v.cursor( ^Task^ ).setFirst( ^Id^, iView, ^^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         vAS.TraceLine( ^DoInputMapping SetCursorFirst RC: ^, nRC );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         if ( nRC == 0 )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            nRC = v.cursor( ^QMsg^ ).setFirst();"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            if ( nRC == 0 )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               vAS.TraceLine( ^DoInputMapping found QMsg Entity^, ^^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               v.cursor( ^QMsg^ ).setAttribute(^Title^, strError);"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
   
   szWriteBuffer = "            while ( nRC == 0 )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               v.DisplayEntityInstance( ^QMsg^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               nRC = v.cursor( ^QMsg^ ).setNextContinue();"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               task.log().debug( ^DoInputMapping SetCursorNext RC: ^, nRC );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
   szWriteBuffer = "            task.log().debug( ^DoInputMapping after __MSGQ^, ^^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            nRC = 0;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
   szWriteBuffer = "         v.DisplayObjectInstance( strSID );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         v.drop();"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         nRC = -1;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
   szWriteBuffer = "      return( nRC );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
   */

   szWriteBuffer = "   return( 1 );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "}"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   /******************************  End of DoInputMapping  ******************************/

   // End of JSP functions.
   szWriteBuffer = "%>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )


   /************************* MAIN SECTION INITIALIZATION  This is where action jsp code will be created. ***********************/

   szWriteBuffer = "<%"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "session = request.getSession( );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "Task task = null;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "View vMsgQ = null; // view to Message Queue"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "View ViewToWindow = null;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "View vKZXMLPGO = null;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   //szWriteBuffer = "com.quinsoft.zeidon.system.Object_KZXMLPGO = null;"
   //WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "String strLastPage = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "short  nRepos = 0;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "int bDone = 0;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "int nPos = 0;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "int nOptRC = 0;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "int nRC = 0;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
   szWriteBuffer = "int nRCk = 0;  // temp fix for SetCursorEntityKey"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
   szWriteBuffer = "int lEKey = 0; // temp fix for SetCursorEntityKey"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
   szWriteBuffer = "String strKey = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "String strActionToProcess = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "String strURL = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "String strError = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "String strErrorFlag = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "String strErrorTitle = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "String strErrorMsg = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "String strFocusCtrl = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "String strBannerName = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "String strOpenFile = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "String strOpenPopupWindow = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "String strPopupWindowSZX = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "String strPopupWindowSZY = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "String strDateFormat = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "String strDialogName = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "String strWindowName = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "String strFunctionCall = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "String strNextJSP_Name = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "String strInputFileName = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   // get task
   szWriteBuffer = "// Check to see if the Zeidon subtask view already exists.  If not, create"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "// it and copy it into the application object."
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "String taskId = (String) session.getAttribute( ^ZeidonTaskId^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "if ( taskId == null )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "{"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

   // KJS 09/25/09 - Previously we were looking for the word "Login" in a window name to determine
   // if this window should have the RegisterZeidonApplication in it.  I will keep this code for now
   // but I really think this should be a property for the window.  I have added a checkbox to WND_UPD
   // for this.
   nRC = zSearchSubString( szFormName, "Login", "f", 0 )
   IF nRC >= 0  OR vDialog.Window.WEB_RegisterZeidonWindow = "Y" // "wStartUpLogin"

      szWriteBuffer = "   task = objectEngine.registerZeidonApplication( ^" + vLPLR.LPLR.Name + "^, true );"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   session.setAttribute( ^ZeidonTaskId^, task.getTaskId() );"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

      //szWriteBuffer = "   vAppSubtask = new zeidon.zView( strSessionId );"
      //WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      //szWriteBuffer = "   vAppSubtask.RegisterZeidonApplication(^//" + vLPLR.LPLR.Name + "^ );"
      //WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      //szWriteBuffer = "   session.setAttribute( ^ZeidonSubtask^, vAppSubtask );"
      //WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

   ELSE
      szWriteBuffer = "   strURL = response.encodeRedirectURL( ^logout.html^ );"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   response.sendRedirect( strURL );"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   return;"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

   END

            
   szWriteBuffer = "}"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "else"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "{"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   task = objectEngine.getTaskById( taskId );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "}"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "if ( task == null )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "{"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   return; // something really bad has happened!!!"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   

   szWriteBuffer = "}"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   //szWriteBuffer = "else"
   //WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   //szWriteBuffer = "{"
   //WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

   // KJS 02/29/2008 - We would like to delete report files when they are generated.  Here is code
   // that sort of does the trick but the problem is that I need to know the exact file where the
   // jsp code is kept.  How should we do this.  I can try and get the current directory and then
   // figure it from there (I believe when I tried, current directory was
   // c:\program file...\webapps\" but then I need to know whether we are \zencas or \noa etc and
   // would this work in all cases.  Can't do theory like timout.inc cause this is jsp.  Do I hard
   // code the directory in the .ini file and assume all noa users would have the same tomcat directory
   // structure.  Need to talk to Aadit and Jeff.
   // Also, do I only want to create this code if this page contains a report or should I just do it all the
   // time?  Action.Type = 41 seems to be the action for start Browser HTML...
   /*
   CreateViewFromView( vDialogTemp, vDialog )
   lControl = zQUAL_STRING + zPOS_FIRST + zRECURS
   nRC = SetEntityCursor( vDialogTemp, "Action", "Type", lControl,
                          "41", "", "", 0, "Window", "" )
   IF nRC >= zCURSOR_SET
      strOpenFile = request.getParameter( "zOpenFile" );
      if ( strOpenFile != null && strOpenFile != "" )
      {
         strOpenFile = "C:\\Program Files\\Apache Group\\Tomcat 5.5\\webapps\\ROOT\\zencas\\" + strOpenFile;
         File f = new File(strOpenFile);
         //USE szSystemIniApplName????!!!!
         //strOpenFile = "/zencas/kellytext.txt";
         //File f = new File(request.getRealPath(strOpenFile));
         f.delete();
      }
   END
   DropView( vDialogTemp )
   */

   szWriteBuffer = "   strActionToProcess = (String) request.getParameter( ^zAction^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   //KJS Trace
   IF (lTrace = 1)
      szWriteBuffer = "   task.log().debug( ^Page Name ========>>> ^ + ^" + szFormName + "^, task );"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
      szWriteBuffer = "   task.log().debug( ^zAction ========>>> ^ + strActionToProcess, task );"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   END

   // Generate Transfer File to Server logic if there is a GroupBox of type "File Transfer to Server".
   CreateViewFromView( vDialogTemp, vDialog )
   lControl = zQUAL_STRING + zPOS_FIRST + zRECURS
   szCtrlTag = "File Transfer to Server"
   nRC = SetEntityCursor( vDialogTemp, "WebControlProperty", "Name", lControl,
                          szCtrlTag, "", "", 0, "Window", "" )
   IF nRC >= zCURSOR_SET
      GenJSPJ_ProcessFileIn( vDialog, lFileJSP, szWriteBuffer )
   END
   DropView( vDialogTemp )

   // vKZXMLPGO

   //szWriteBuffer = "   vKZXMLPGO = task.getViewByName( ^KZXMLPGO^ );"
   //WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   //szWriteBuffer = "   if ( vKZXMLPGO != null)"
   //WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   //szWriteBuffer = "   {"
   //WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   //szWriteBuffer = "      vKZXMLPGO = JspWebUtils.createWebSession( task, userId );"
   szWriteBuffer = "      vKZXMLPGO = JspWebUtils.createWebSession( task, ^testUserId^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   //szWriteBuffer = "      vKZXMLPGO.setName(^KZXMLPGO^ );"
   //WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   //szWriteBuffer = "   }"
   //WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "   vMsgQ = task.getViewByName( ^__MSGQ^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

/* DKS_TRACE_START
   // Temporary traces to understand how Error Object is used.
   szWriteBuffer = "   if ( nRC > 0 )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      task.log().debug( ^***Message Object Check: FOUND __MSGQ^, ^^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   else"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      task.log().debug( ^***Message Object Check: NOT found __MSGQ^, ^^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
DKS_TRACE_END */

   //szWriteBuffer = "   vAppSubtask.SetDefaultViewForActiveTask(2 );"
   //WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   // MAIN SECTION ACTION PROCESSING

   szWriteBuffer = "   strURL = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   bDone = 0;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   nRC = 0;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   //szWriteBuffer = "}"
   //WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "if ( strActionToProcess != null )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "{"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

   szWriteBuffer = "   if ( task != null )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

   //KJS Trace
   IF (lTrace = 1)
      szWriteBuffer = "      task.log().debug( ^Process Action: ^, strActionToProcess );"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   END
   // Process Error Object.
   szWriteBuffer = "      // Delete the message object if error on last interation."
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      vMsgQ = task.getViewByName( ^__MSGQ^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      if ( vMsgQ != null )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         vMsgQ.drop();"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   // Create Action code for each Action, except for Window Actions.
   FOR EACH vDialog.Action
      szActionName = vDialog.Action.Tag  // moved here just to assist debugging
      IF vDialog.ActWndEvent DOES NOT EXIST
      // OR vDialog.ActEvent EXISTS // DKS likes this line ... Don does not
      // OR vDialog.ActOpt EXISTS   // DKS likes this line ... Don does not

         nRC = zstrcmpi( szActionName, "alt-f4" )
         IF nRC = 0
            szActionName = "AltF4"
         END

         IF vDialog.Action.Type != zWAB_ExitDialogTask
            // We don't format the Action on exit dialog, as the function in the java script calls OnUnload.
            GenJSPJ_Action( vDialog, vDialogRoot, lFileJSP, szWriteBuffer, szFormName, szActionName, lTrace )
         END
      ELSE
      IF vDialog.ActEvent EXISTS OR vDialog.ActOpt EXISTS
         TraceLineS( "Action has WndEvent that PREVENTS generation: ", szActionName )
      END
      END
   END

   //If there are comboboxes on this page that are "auto include" or "set foreign key" but
   //doesn't haae another action, then we need a generic action that gets called.  We need
   //to submit the page and have the DoInputMapping called (this is where the
   //autoinclude etc code gets called). 
   
   szWriteBuffer = "   while ( bDone == 0 && strActionToProcess.equals( ^ZEIDON_ComboBoxSubmit^ ) )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      bDone = 1;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "      // Input Mapping"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      nRC = DoInputMapping( request, session, application );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      if ( nRC < 0 )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         break;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "      // No redirection, we are staying on this page."
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      nRC = 0;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      break;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   // If the Window has a reusable side menu, add the actions from that menu.
   IF vDialog.ReusableSideWindow EXISTS
      IF vDialog.ReusableSideDialog.ZKey = vDialog.Dialog.ZKey
         CreateViewFromView( vDialogTemp, vDialog )
         SET CURSOR FIRST vDialogTemp.Window WHERE vDialogTemp.Window.ZKey = vDialog.ReusableSideWindow.ZKey
         IF RESULT >= zCURSOR_SET
            FOR EACH vDialogTemp.Option
               IF vDialogTemp.OptAct EXISTS
                  SET CURSOR FIRST vDialogTemp.Action WHERE vDialogTemp.Action.ZKey = vDialogTemp.OptAct.ZKey
                  IF RESULT >= zCURSOR_SET
                     IF vDialogTemp.Action.Type != zWAB_ExitDialogTask
                        //Because the menu actions can be created on separate windows from the control
                        //actions, we need to make sure these actions are unique.  We will prefix a
                        //"m" to the main menu actions and prefix a "sm" to the side menu actions.
                        szAction = "sm" + vDialogTemp.Action.Tag
                        lLth = zstrlen( szAction )
                        //IF lLth > 32
                        //   MessageSend( vDialog, "", "Reusable Menu Action Name Length > 32",
                        //                szAction,
                        //                zMSGQ_OBJECT_CONSTRAINT_WARNING, 0 )
                        //END

                        GenJSPJ_Action( vDialogTemp, vDialogRoot, lFileJSP, szWriteBuffer, szFormName, szAction, lTrace )
                     END
                  END
               END
            END
         END
         DropView( vDialogTemp )
      ELSE
         ActivateMetaOI_ByName( vSubtask, vDialogTemp, 0, zREFER_DIALOG_META, zSINGLE, vDialog.ReusableSideDialog.Tag, 0 )
         SET CURSOR FIRST vDialogTemp.Window WHERE vDialogTemp.Window.ZKey = vDialog.ReusableSideWindow.ZKey
         IF RESULT >= zCURSOR_SET
            FOR EACH vDialogTemp.Option
               IF vDialogTemp.OptAct EXISTS
                  SET CURSOR FIRST vDialogTemp.Action WHERE vDialogTemp.Action.ZKey = vDialogTemp.OptAct.ZKey
                  IF RESULT >= zCURSOR_SET
                     IF vDialogTemp.Action.Type != zWAB_ExitDialogTask
                        //Because the menu actions can be created on separate windows from the control
                        //actions, we need to make sure these actions are unique.  We will prefix a
                        //"m" to the main menu actions and prefix a "sm" to the side menu actions.
                        szAction = "sm" + vDialogTemp.Action.Tag
                        lLth = zstrlen( szAction )
                        //IF lLth > 32
                        //   MessageSend( vDialog, "", "Reusable Menu Action Name Length > 32",
                        //                szAction,
                        //                zMSGQ_OBJECT_CONSTRAINT_WARNING, 0 )
                        //END

                        GenJSPJ_Action( vDialogTemp, vDialogRoot, lFileJSP, szWriteBuffer, szFormName, szAction, lTrace )
                     END
                  END
               END
            END
         END
         DropObjectInstance( vDialogTemp )
      END
   END

   // If the Window or Dialog has a reusable main menu, add the actions from that menu.
   ReusableDialogZKey = 0
   IF vDialog.ReusableMainWindow EXISTS
      ReusableDialogZKey = vDialog.ReusableMainDialog.ZKey
      ReusableWindowZKey = vDialog.ReusableMainWindow.ZKey
   ELSE
      IF vDialog.DefaultReusableMainWindow EXISTS
         ReusableDialogZKey = vDialog.DefaultReusableMainDialog.ZKey
         ReusableWindowZKey = vDialog.DefaultReusableMainWindow.ZKey
      END
   END
   IF ReusableDialogZKey != 0  // dks
      IF ReusableDialogZKey = vDialog.Dialog.ZKey
         CreateViewFromView( vDialogTemp, vDialog )
         SET CURSOR FIRST vDialogTemp.Window WHERE vDialogTemp.Window.ZKey = ReusableWindowZKey
         IF RESULT >= zCURSOR_SET
            FOR EACH vDialogTemp.Option
               IF vDialogTemp.OptAct EXISTS
                  SET CURSOR FIRST vDialogTemp.Action WHERE vDialogTemp.Action.ZKey = vDialogTemp.OptAct.ZKey
                  IF RESULT >= zCURSOR_SET
                     IF vDialogTemp.Action.Type != zWAB_ExitDialogTask
                        //Because the menu actions can be created on separate windows from the control
                        //actions, we need to make sure these actions are unique.  We will prefix a
                        //"m" to the main menu actions and prefix a "sm" to the side menu actions.
                        szAction = "m" + vDialogTemp.Action.Tag
                        lLth = zstrlen( szAction )
                        IF lLth > 32
                           MessageSend( vDialog, "", "Reusable Menu Action Name Length > 32",
                                        szAction,
                                        zMSGQ_OBJECT_CONSTRAINT_WARNING, 0 )
                        END

                        GenJSPJ_Action( vDialogTemp, vDialogRoot, lFileJSP, szWriteBuffer, szFormName, szAction, lTrace )
                     END
                  END
               END
            END
         END
         DropView( vDialogTemp )
      ELSE
         ActivateMetaOI_ByZKey( vSubtask, vDialogTemp, 0, zREFER_DIALOG_META, zSINGLE, ReusableDialogZKey, 0 )
         SET CURSOR FIRST vDialogTemp.Window WHERE vDialogTemp.Window.ZKey = ReusableWindowZKey
         IF RESULT >= zCURSOR_SET
            FOR EACH vDialogTemp.Option
               IF vDialogTemp.OptAct EXISTS
                  SET CURSOR FIRST vDialogTemp.Action WHERE vDialogTemp.Action.ZKey = vDialogTemp.OptAct.ZKey
                  IF RESULT >= zCURSOR_SET
                     IF vDialogTemp.Action.Type != zWAB_ExitDialogTask
                        //Because the menu actions can be created on separate windows from the control
                        //actions, we need to make sure these actions are unique.  We will prefix a
                        //"m" to the main menu actions and prefix a "sm" to the side menu actions.
                        szAction = "m" + vDialogTemp.Action.Tag
                        lLth = zstrlen( szAction )
                        IF lLth > 32
                           MessageSend( vDialog, "", "Reusable Menu Action Name Length > 32",
                                        szAction,
                                        zMSGQ_OBJECT_CONSTRAINT_WARNING, 0 )
                        END

                        GenJSPJ_Action( vDialogTemp, vDialogRoot, lFileJSP, szWriteBuffer, szFormName, szAction, lTrace )
                     END
                  END
               END
            END
         END
         DropObjectInstance( vDialogTemp )
      END
   END


   // If the Window or Dialog has a reusable main menu for actions only, add the actions from that menu.
   ReusableDialogZKey = 0
   IF vDialog.ReusableActionWindow EXISTS
      ReusableDialogZKey = vDialog.ReusableActionDialog.ZKey
      ReusableWindowZKey = vDialog.ReusableActionWindow.ZKey
   ELSE
      IF vDialog.DefaultReusableActionWindow EXISTS
         ReusableDialogZKey = vDialog.DefaultReusableActionDialog.ZKey
         ReusableWindowZKey = vDialog.DefaultReusableActionWindow.ZKey
      END
   END
   IF ReusableDialogZKey != 0  // dks
      IF ReusableDialogZKey = vDialog.Dialog.ZKey
         CreateViewFromView( vDialogTemp, vDialog )
         SET CURSOR FIRST vDialogTemp.Window WHERE vDialogTemp.Window.ZKey = ReusableWindowZKey
         IF RESULT >= zCURSOR_SET
            FOR EACH vDialogTemp.Option
               IF vDialogTemp.OptAct EXISTS
                  SET CURSOR FIRST vDialogTemp.Action WHERE vDialogTemp.Action.ZKey = vDialogTemp.OptAct.ZKey
                  IF RESULT >= zCURSOR_SET
                     IF vDialogTemp.Action.Type != zWAB_ExitDialogTask
                        //Because the menu actions can be created on separate windows from the control
                        //actions, we need to make sure these actions are unique.  We will prefix a
                        //"m" to the main menu actions and prefix a "sm" to the side menu actions.
                        szAction = "ma" + vDialogTemp.Action.Tag
                        lLth = zstrlen( szAction )
                        IF lLth > 32
                           MessageSend( vDialog, "", "Reusable Menu Action Name Length > 32",
                                        szAction,
                                        zMSGQ_OBJECT_CONSTRAINT_WARNING, 0 )
                        END

                        GenJSPJ_Action( vDialogTemp, vDialogRoot, lFileJSP, szWriteBuffer, szFormName, szAction, lTrace )
                     END
                  END
               END
            END
         END
         DropView( vDialogTemp )
      ELSE
         ActivateMetaOI_ByZKey( vSubtask, vDialogTemp, 0, zREFER_DIALOG_META, zSINGLE, ReusableDialogZKey, 0 )
         SET CURSOR FIRST vDialogTemp.Window WHERE vDialogTemp.Window.ZKey = ReusableWindowZKey
         IF RESULT >= zCURSOR_SET
            FOR EACH vDialogTemp.Option
               IF vDialogTemp.OptAct EXISTS
                  SET CURSOR FIRST vDialogTemp.Action WHERE vDialogTemp.Action.ZKey = vDialogTemp.OptAct.ZKey
                  IF RESULT >= zCURSOR_SET
                     IF vDialogTemp.Action.Type != zWAB_ExitDialogTask
                        //Because the menu actions can be created on separate windows from the control
                        //actions, we need to make sure these actions are unique.  We will prefix a
                        //"m" to the main menu actions and prefix a "sm" to the side menu actions.
                        szAction = "ma" + vDialogTemp.Action.Tag
                        lLth = zstrlen( szAction )
                        IF lLth > 32
                           MessageSend( vDialog, "", "Reusable Menu Action Name Length > 32",
                                        szAction,
                                        zMSGQ_OBJECT_CONSTRAINT_WARNING, 0 )
                        END

                        GenJSPJ_Action( vDialogTemp, vDialogRoot, lFileJSP, szWriteBuffer, szFormName, szAction, lTrace )
                     END
                  END
               END
            END
         END
         DropObjectInstance( vDialogTemp )
      END
   END


   // OnUnload
   szWriteBuffer = "   while ( bDone == 0 && strActionToProcess.equals( ^_OnUnload^ ) )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      bDone = 1;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      if ( task != null )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         task.log().debug( ^OnUnload UnregisterZeidonApplication: ----------------------------------->>> ^, ^" + szFormName + "^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         task.dropTask();"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         task = null;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         session.setAttribute( ^ZeidonSubtask^, task );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
   szWriteBuffer = "      // Next Window is HTML termination"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      strURL = response.encodeRedirectURL( ^logout.html^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      response.sendRedirect( strURL );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      return;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   // OnTimeout
   szWriteBuffer = "   while ( bDone == 0 && strActionToProcess.equals( ^_OnTimeout^ ) )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      bDone = 1;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      if ( task != null )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         task.log().debug( ^OnUnload UnregisterZeidonApplication: ----------------------------------->>> ^, ^" + szFormName + "^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         task.dropTask();"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         task = null;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         session.setAttribute( ^ZeidonSubtask^, task );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
   szWriteBuffer = "      // Next Window is HTML termination"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      strURL = response.encodeRedirectURL( ^TimeOut.html^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      response.sendRedirect( strURL );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      return;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   // OnResubmitPage
   szWriteBuffer = "   while ( bDone == 0 && strActionToProcess.equals( ^_OnResubmitPage^ ) )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      bDone = 1;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      // Input Mapping"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      nRC = DoInputMapping( request, session, application );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      if ( nRC < 0 )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         break;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      strURL = response.encodeRedirectURL( ^" + szFormName + ".jsp^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      nRC = 1;  //do the redirection"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      break;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "   if ( nRC != 0 )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      if ( nRC > 0 )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         if ( nRC > 1 )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            strURL = response.encodeRedirectURL( ^" + szFormName + ".jsp^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            task.log().debug( ^Action Error Redirect to: ^, strURL );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "         strActionToProcess = " + zQUOTES + zQUOTES + ";"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         response.sendRedirect( strURL );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      else"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         if ( nRC > -128 )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            strActionToProcess = " + zQUOTES + zQUOTES + ";"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            strURL = response.encodeRedirectURL( ^" + szFormName + ".jsp^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            response.sendRedirect( strURL );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            task.log().debug( ^Mapping Error Redirect to: ^, strURL );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         else"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            task.log().debug( ^InputMapping Reentry Prevented^, ^^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "   if ( strActionToProcess.length( ) == 0 )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   // task.GarbageCollectViews( strSessionId );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      return;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "}"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "if ( strErrorFlag != ^Y^ )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "{"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

   // Actions Section Trailer, including prebuild and postbuild code.
   InsertBlankFlag = "N"
   FOR EACH vDialog.Action
      FOR EACH vDialog.ActWndEvent
         IF vDialog.ActWndEvent.Type = 1 OR
            vDialog.ActWndEvent.Type = 2

            IF InsertBlankFlag = "Y"
               szWriteBuffer = ""
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
            END
            
            
            
            IF vDialog.ActOper EXISTS
   
               szWriteBuffer = "      " +  vDialog.Dialog.Tag + "_Dialog " + vDialog.Dialog.Tag + " = new " + 
                               vDialog.Dialog.Tag + "_Dialog( task );"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      nRC =" + vDialog.Dialog.Tag + "." + vDialog.ActOper.Name + "( new zVIEW ( vKZXMLPGO ) );"

               //szWriteBuffer = "   nOptRC = task.CallDialogOperation(^" +
               //                vDialog.Dialog.Tag + "^, ^" +
               //                vDialog.ActOper.Name + "^, 1 );"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   if ( nOptRC <= -128 )"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   {"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      task.log().debug( ^Operation Reentry Prevented^, ^^ );"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      return;"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   }"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
   
               szWriteBuffer = "   if ( nOptRC == 2 )"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   {"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      View vView;"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      String strMessage;"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      String strURLParameters;"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
   
               szWriteBuffer = "      vView = task.getViewByName( ^wXferO^ );"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      strMessage = vView.cursor(^Root^).getStringFromAttribute(^WebReturnMessage^ );"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      strURLParameters = ^?CallingPage=" + szFormName + ".jsp^ +"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
               szWriteBuffer = "                         ^&Message=^ + strMessage +"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
               szWriteBuffer = "                         ^&DialogName=^ + ^" + vDialog.Dialog.Tag + "^ +"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
               szWriteBuffer = "                         ^&OperationName=^ + ^" + vDialog.ActOper.Name + "^;"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      strURL = response.encodeRedirectURL( ^MessageDisplay.jsp^ + strURLParameters );"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
               szWriteBuffer = "            response.sendRedirect( strURL );"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      task.log().debug( ^Pre/Post Redirect to: ^, strURL );"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      return;"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   }"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
            END
            InsertBlankFlag = "Y"
         END
      END
   END

   IF InsertBlankFlag = "Y"
      szWriteBuffer = ""
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   END

   // If there is a dynamic banner name specified in the vKZXMLPGO object for this Dialog, use it. Otherwise, try to use the one in the Dialog definition.
   szWriteBuffer = "   nRC = vKZXMLPGO.cursor(^DynamicBannerName^ ).setFirst( ^DialogName^, ^" + szDialogName + "^, ^^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   if ( nRC >= 0 )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      strBannerName = vKZXMLPGO.cursor(^DynamicBannerName^).getStringFromAttribute(^BannerName^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "   if ( strBannerName == null |||| strBannerName == ^^ )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szBannerName = vDialog.Dialog.WEB_TopBannerName
   // If a banner include file has been entered by the user, then use this, otherwise
   // hardcode "./include/banner.inc" as the banner name.
   IF szBannerName != ""
      szWriteBuffer = "      strBannerName = ^" + szBannerName + "^;"
   ELSE
      szWriteBuffer = "      strBannerName = ^./include/banner.inc^;"
   END
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
/*
   szBannerName = vDialog.Dialog.WEB_TopBannerName
   IF szBannerName = ""
      szWriteBuffer = "   strBannerName = task.GetBannerName(^" + szDialogName + "^ );"
   ELSE
      szWriteBuffer = "   strBannerName = ^" + szBannerName + "^;"
   END
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
*/
   szWriteBuffer = "}"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "%>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   /************************* End of MAIN SECTION INITIALIZATION (JSP CODE)   ***********************/

   // Start HTML

   // HTML SECTION *****************************************************************

   // JSP HEADER

   szWriteBuffer = "<html>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "<head>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
   
   IF vDialog.Window.Caption != ""
      szWriteBuffer = "<title>" + vDialog.Window.Caption + "</title>"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
   END

   IF szNoPositioning = "Y"
      IF vDialog.Window.WEB_PageHeadInclude != ""
         szWriteBuffer = "<%@ include file=^" + vDialog.Window.WEB_PageHeadInclude + "^ %>"
         WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      ELSE
         IF vDialog.Dialog.WEB_PageHeadInclude != ""
            szWriteBuffer = "<%@ include file=^" + vDialog.Dialog.WEB_PageHeadInclude  + "^ %>"
            WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
         ELSE 
            szWriteBuffer = "<%@ include file=^./include/head.inc^ %>"
            WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
         END
      END
   ELSE
      szWriteBuffer = "<%@ include file=^./include/myheader.inc^ %>"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   END 
   
   // KJS 2/19/08 - Trying to help Jeff with timeout.  Place a
   // timeout value in timeout.inc for when to timeout.
   szWriteBuffer = "<!-- Timeout.inc has a value for nTimeout which is used to determine when to -->"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "<!-- log a user out.  Timeout.inc is not used if the dialog or window has a timeout value set. -->"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "<%@ include file=^./include/timeout.inc^ %>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

   // KJS 08/06/08 - Instead of using the class="noprint" to not display
   // a div or control when print/previewing a page, I think we will use the
   // class print.css.  Cleaner and easier to change items that we want hidden/not hidden.
   szWriteBuffer = "<link rel=^stylesheet^ type=^text/css^ href=^./css/print.css^ media=^print^ />"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )


   /*****************************  JavaScript Functions Section *****************************************************/

   // common.js is used by both the Grid and Calendar controls. Since it's small, we'll always send it.
   szWriteBuffer = "<script language=^JavaScript^ type=^text/javascript^ src=^./js/common.js^></script>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   IF lSort != 0
      // css.js and sts.js are used only by the Grid control when sorting is requested. Thus, we'll only send
      // it down to the browser when sorting is requested.
      szWriteBuffer = "<script language=^JavaScript^ type=^text/javascript^ src=^./js/css.js^></script>"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "<script language=^JavaScript^ type=^text/javascript^ src=^./js/sts.js^></script>"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   END

   szWriteBuffer = "<script language=^JavaScript^ type=^text/javascript^ src=^./js/validations.js^></script>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "<script language=^JavaScript^ type=^text/javascript^ src=^./js/scw.js^></script>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

   IF szWysiwygEditor != ""

      szWriteBuffer = ""
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "<!-- widgEditor -->"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

      // Comment out TinyMCE ... use widgEditor rather than TinyMCE.
   // szWriteBuffer = "<script language=^JavaScript^ type=^text/javascript^ src=^../tinymce/jscripts/tiny_mce/tiny_mce.js^></script>"
   // WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   // szWriteBuffer = "<script language=^JavaScript^ type=^text/javascript^ src=^TinyMCE.js^></script>"
   // WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

      // Use widgEditor rather than TinyMCE.
      szWriteBuffer = "<style type=^text/css^ media=^all^>"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   @import ^../widgEditor/css/info.css^;"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   @import ^../widgEditor/css/main.css^;"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   @import ^../widgEditor/css/widgEditor.css^;"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "</style>"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

      szWriteBuffer = "var theWidgEditor" + szWysiwygEditor + " = null"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

      szWriteBuffer = "<script type=^text/javascript^ src=^../widgEditor/scripts/widgEditor.js^></script>"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "<!-- /widgEditor -->"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   END

   // KJS 01/16/07 - If we have tab controls on the screen, Jeff wants to have the declarations up
   // here in this section.
   CreateViewFromView( vDialogTemp, vDialogRoot )
   lControl = zQUAL_STRING + zPOS_FIRST + zRECURS
   szEntityName = "Tab"

   // Look for a control with ControlDef of "Tab"
   // vDialog.ControlDef.Tag
   nRC = SetEntityCursor( vDialogTemp, "ControlDef", "Tag", lControl,
                          szEntityName, "", "", 0, "Window", "" )
   IF nRC >= zCURSOR_SET
      szWriteBuffer = "<script language=^JavaScript^ type=^text/javascript^ src=^./js/tabpane.js^></script>"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   END

   //szWriteBuffer = "<script language=^JavaScript^ type=^text/javascript^ src=^tabpane.js^></script>"
   //WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "<script language=^JavaScript^ type=^text/javascript^>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "var isWindowClosing = true;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "var timerID = null;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "onerror = handleErr;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "window.history.forward( 1 );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

   // Look for additional Tab controls.
   LOOP WHILE nRC >= zCURSOR_SET

      szWriteBuffer = "var " + vDialogTemp.Control.Tag + ";"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

      lControl = zQUAL_STRING + zPOS_NEXT + zRECURS

      // Look for a control with controldef of "Tab"
      // vDialog.ControlDef.Tag
      nRC = SetEntityCursor( vDialogTemp, "ControlDef", "Tag", lControl,
                             szEntityName, "", "", 0, "Window", "" )
   END

   DropView( vDialogTemp )

   // Place a blank line here for reading purposes.
   szWriteBuffer = ""
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

   szWriteBuffer = "function handleErr( msg, url, l )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "{"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   //szWriteBuffer = "// Uncomment the following (invalid) line and put it in some function below to help find the error."
   //WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   //szWriteBuffer = "// document.replace(^http://www.enc.edu/^);"
   //WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "   var txt = ^There was an error on this page.\n\n^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   txt += ^Error: ^ + msg + ^\n^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   txt += ^URL: ^ + url + ^\n^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   txt += ^Line: ^ + l + ^\n\n^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   txt += ^Click OK to continue.\n\n^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   alert( txt );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   return true;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "}"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "// This function returns Internet Explorer's major version number,"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "// or 0 for others. It works by finding the ^MSIE ^ string and"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "// extracting the version number following the space, up to the decimal"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "// point, ignoring the minor version number"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "function msieversion( )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "{"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   var ua = window.navigator.userAgent;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   var msie = ua.indexOf( ^MSIE ^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "   if ( msie > 0 )      // if Internet Explorer, return version number"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      return parseInt( ua.substring( msie + 5, ua.indexOf( ^.^, msie ) ) );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   else                 // if another browser, return 0"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      return 0;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "}"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   //Function _OnAlmostTimeout
   szWriteBuffer = "function _OnAlmostTimeout()"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "{"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   if ( _IsDocDisabled( ) == false )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      var tStart   = new Date();"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = ""
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      alert(^Your session will timeout in one minute.  Please click 'OK' within that time to continue and save your work if necessary.^)"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
   szWriteBuffer = "      var tEnd   = new Date();"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      var tDiff = tEnd.getTime() - tStart.getTime();"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
   szWriteBuffer = "      //If the time is less than one minute,resubmit the page.  Otherwise, "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      //go to the timeout window."
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      if (tDiff < 60000)"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         document." + szFormName + ".zAction.value = ^_OnResubmitPage^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         document." + szFormName + ".submit( );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      else"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         _OnTimeout( );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "}"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   //function _OnTimeout
   szWriteBuffer = "function _OnTimeout( )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "{"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   if ( _IsDocDisabled( ) == false )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      _DisableFormElements( true );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
   szWriteBuffer = "      document." + szFormName + ".zAction.value = ^_OnTimeout^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      document." + szFormName + ".submit( );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "}"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   //function _BeforePageUnload
   szWriteBuffer = "function _BeforePageUnload( )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "{"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   if ( _IsDocDisabled( ) == false )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      // If the user clicked on the window close box, then"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      // isWindowClosing will be true.  Otherwise if the user"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      // clicked on something else in the page, isWindowClosing will be false."
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      // If the user clicked the window close box, unregister zeidon."
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      if (isWindowClosing)"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         //document." + szFormName + ".zAction.value = ^_OnUnload^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         //document." + szFormName + ".submit( );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   //szWriteBuffer = "      // No action needs to be taken here. This is just a place holder for traces."
   //WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   //szWriteBuffer = "      // alert( document.wFacultDAdviseeList.zAction.value );"
   //WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "}"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   //function _IsDocDisabled
   szWriteBuffer = "function _IsDocDisabled( )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "{"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   var theForm;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   var j;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   var k;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "   for ( j = 0; j < document.forms.length; j++ )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      theForm = document.forms[ j ];"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      for ( k = 0; k < theForm.length; k++ )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         if ( theForm.elements[ k ].name == ^zDisable^ )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            return theForm.elements[ k ].disabled;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "   return false;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "}"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   //function _DisableFormElements
   szWriteBuffer = "function _DisableFormElements( bDisabled )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "{"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   var theForm;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   var type;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   var lis;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   var thisLi;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   var j;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   var k;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   var bRC = false;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "   if ( bDisabled && timerID != null )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      clearTimeout( timerID );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      timerID = null;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
   
   // Controls on the window may have been set as disabled through javascript but
   // when we try to get the values for these controls in jsp (response.getParameter)
   // they will always be null.  Set any disabled fields to enabled for
   // this reason.
   szWriteBuffer = "   // Controls on the window may have been set as disabled through javascript but"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   // when we try to get the values for these controls in jsp (response.getParameter)"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   // they will always be null.  Set any disabled fields to enabled for"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   // this reason."
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   for ( j = 0; j < document.forms.length; j++ )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      theForm = document.forms[ j ];"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      for ( k = 0; k < theForm.length; k++ )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         if (theForm.elements[ k ].disabled == true)"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "             theForm.elements[ k ].disabled = false;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
   

   // We want to set some fields as disabled (like buttons and comboboxes) so that
   // while the jsp code is processing, users can not select these controls.
   // We do not have the above problem with response.getParameter with comboboxes because
   // we have a hidden field for every combobox (h + controltag) and we use that for the
   // response.getParameter in DoInputMapping.
   szWriteBuffer = "   // We want to set some fields as disabled (like buttons and comboboxes) so that"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   // while the jsp code is processing, users can not select these controls."
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   for ( j = 0; j < document.forms.length; j++ )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      theForm = document.forms[ j ];"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

   szWriteBuffer = "      for ( k = 0; k < theForm.length; k++ )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         type = theForm.elements[ k ].type;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

// szWriteBuffer = "         if ( type == ^button^ |||| type == ^checkbox^ |||| type == ^radio^ |||| type == ^select^ )"
// szWriteBuffer = "         if ( type == ^button^ |||| type == ^select-one^ )"
// szWriteBuffer = "         if ( type == ^button^ |||| (type != null && type.indexOf( ^select^ ) == 0) )"
   szWriteBuffer = "         if ( type == ^button^ |||| type == ^submit^ |||| (type != null && type.indexOf( ^select^ ) == 0) )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            theForm.elements[ k ].disabled = bDisabled;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         else"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         if ( theForm.elements[ k ].name == ^zDisable^ )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            theForm.elements[ k ].disabled = bDisabled;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            bRC = true;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

   szWriteBuffer = "      }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )


   szWriteBuffer = "   lis = document.getElementsByTagName( ^li^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   for ( k = 0; k < lis.length; k++ )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      thisLi = lis[ k ];"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      thisLi.disabled = bDisabled;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "   return bRC;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "}"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   // Default button function.
   IF vDialog.Window.DfltButton != ""
      CreateViewFromView( vDialogTemp, vDialog )
      lControl = zQUAL_STRING + zPOS_FIRST + zRECURS
      nRC = SetEntityCursor( vDialogTemp, "Control", "Tag", lControl,
                             vDialog.Window.DfltButton, "", "", 0, "Window", "" )
      IF nRC >= zCURSOR_SET
         IF vDialogTemp.EventAct EXISTS
            szWriteBuffer = "function _OnEnter( e )"
            WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
            szWriteBuffer = "{"
            WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   var keycode;"
            WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   if ( window.event )"
            WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      keycode = window.event.keyCode;"
            WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   else"
            WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   {"
            WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      if ( e )"
            WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         keycode = e.which;"
            WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      else"
            WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         return true;"
            WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   }"
            WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

            szWriteBuffer = "   if ( keycode == 13 )"
            WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   {"
            WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      " + vDialogTemp.EventAct.Tag + "( );"
            WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      return false;"
            WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   }"
            WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   else"
            WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      return true;"
            WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   }"
            WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
         END
      END
      DropView( vDialogTemp )
   END

   //function _AfterPageLoaded
   szWriteBuffer = "function _AfterPageLoaded( )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "{"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

   szWriteBuffer = "// _DisableFormElements( false );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "   var szFocusCtrl = document." + szFormName + ".zFocusCtrl.value;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   if ( szFocusCtrl != ^^ )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      eval('document." + szFormName + ".' + szFocusCtrl + '.focus()');"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

   // Need to know "first" tab index by the time we get here!
   IF szFocusCtrlTag != ""
      szWriteBuffer = "   else"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      document." + szFormName + "." + szFocusCtrlTag + ".focus( );"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   END
   szWriteBuffer = ""
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 ) // add a blank line

   szWriteBuffer = "   var szMsg = document." + szFormName + ".zError.value;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   if ( szMsg != ^^ )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      alert( szMsg ); // ^Houston ... We have a problem^"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "   szMsg = document." + szFormName + ".zOpenFile.value;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   if ( szMsg != ^^ )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      var NewWin = window.open( szMsg );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      if (NewWin)"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         NewWin.focus( )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      else"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   //szWriteBuffer = "         alert(^Pop-up windows are being blocked.  You need to set your browser to allow pop-ups from 'my.enc.edu' for this action.^);"
   szWriteBuffer = "         alert(^Pop-up windows are being blocked.  You need to set your browser to allow pop-ups from this site for this action to work.^);"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   // If this Window/Page has a "Start Web Popup" Action with mapping, then we need the following code
   // to actually start up the Popup, since the script code for the Action had to do the submit to
   // do input mapping.
   CreateViewFromView( vDialogTemp, vDialog )
   SET CURSOR FIRST vDialogTemp.Action
              //WHERE ( vDialogTemp.Action.Type = zWAB_StartModalWebPopup OR vDialogTemp.Action.Type = zWAB_StartModelessWebPopup )
              WHERE ( vDialogTemp.Action.Type = 78 OR vDialogTemp.Action.Type = 79 )
                AND vDialogTemp.Action.NoMap = ""
   IF RESULT >= zCURSOR_SET
      szWidth = ""
      szHeight = ""
      szWriteBuffer = "   szMsg = document." + szFormName + ".zOpenPopupWindow.value;"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   if ( szMsg != ^^ )"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   {"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

      //KELLY22
      /*  We don't need this now, we look for these errors and window sizes elsewhere
      // The Popup size (both X and Y values) will be WebSize / 34,000 to convert Window Size to Web Page Size.
      CreateViewFromView( vDialogTemp2, vDialogRoot )
      IF vDialogRoot.Dialog.Tag != vDialogTemp.Action.DialogName
         szMsg = "Error in Window, " + vDialogRoot.Window.Tag + ": A 'Set Subwindow' for a Popup exists to another Dialog, which is invalid."
         MessageSend( vSubtask, "", "JSP Generation", szMsg, zMSGQ_OBJECT_CONSTRAINT_WARNING, 0 )
      ELSE
         SET CURSOR FIRST vDialogTemp2.Window WHERE vDialogTemp2.Window.Tag = vDialogTemp.Action.WindowName
         IF RESULT < zCURSOR_SET
            szMsg = "Error in Window, " + vDialogRoot.Window.Tag + ": A 'Set Subwindow' for a Popup exists to a window that doesn't exist."
            MessageSend( vSubtask, "", "JSP Generation", szMsg, zMSGQ_OBJECT_CONSTRAINT_WARNING, 0 )
         ELSE
            zIntegerToString( szWidth, 10, vDialogTemp2.Window.SZDLG_X / 34000 )
            zIntegerToString( szHeight, 10, vDialogTemp2.Window.SZDLG_Y / 34000 )
         END
      END
      */

      // KJS 01/25/08 - The popup window was getting the size of the calling window (aboe code).  Instead, we want the popup window to be
      // the size of the painted popup window.  Added some hidden variables to hold this value (gets set in the OnClick function).
      szWriteBuffer = "   var strWidth = document." + szFormName + ".zPopupWindowSZX.value;"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   var strHeight = document." + szFormName + ".zPopupWindowSZY.value;"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      // KJS 11/19/09 - Aadit doesn't want to have a height or width in wRunRpts because it doesn't allow the print to work correctly (cuts
      // the page off if it's long).  The only problem is that even though you can control the page width through css, the popup window
      // itself is the size of the browser (not what we always want).  I am keeping this for now because the only other place I use this
      // is in wGradeBk but we might want to have a checkbox to say whether the window should be the size of the dialog window or no
      // height width given.
      // Also adding scrollbars=yes.
      szWriteBuffer = "   var strWindowOptions = ^menubar=0,toolbar=0,resizable=1,modal=1,scrollbars=yes^"
      //szWriteBuffer = "   var strWindowOptions = ^menubar=0,toolbar=0,resizable=1,width=^ + strWidth + ^,height=^ + strHeight + ^,modal=1^"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      //szWriteBuffer = "      var NewWin = window.open( szMsg, ^^,^menubar=0,toolbar=0,resizable=1,width=" + szWidth + ",height=" + szHeight + ",modal=1^ );"
      szWriteBuffer = "      var NewWin = window.open( szMsg, ^^,strWindowOptions );"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      if (NewWin)"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         NewWin.focus( )"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      else"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      {"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      //szWriteBuffer = "         alert(^Pop-up windows are being blocked.  You need to set your browser to allow pop-ups from 'my.enc.edu' for this action.^);"
      szWriteBuffer = "         alert(^Pop-up windows are being blocked.  You need to set your browser to allow pop-ups from this site for this action to work.^);"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      }"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   }"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
   END
   DropView( vDialogTemp )

   szWriteBuffer = "   document." + szFormName + ".zError.value = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   document." + szFormName + ".zOpenFile.value = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   // If this Window/Page has a "Start Web Popup" Action, initialize the zOpenPopupWindow value.
   CreateViewFromView( vDialogTemp, vDialog )
   SET CURSOR FIRST vDialogTemp.Action
              //WHERE ( vDialogTemp.Action.Type = zWAB_StartModalWebPopup OR vDialogTemp.Action.Type = zWAB_StartModelessWebPopup )
              WHERE ( vDialogTemp.Action.Type = 78 OR vDialogTemp.Action.Type = 79 )
                AND vDialogTemp.Action.NoMap = ""
   IF RESULT >= zCURSOR_SET
      szWriteBuffer = "   document." + szFormName + ".zOpenPopupWindow.value = ^^;"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
   END
   DropView( vDialogTemp )

   szWriteBuffer = "   if ( timerID != null )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      clearTimeout( timerID );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      timerID = null;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   // Generate a document entry for each ComboBox on the Page.
   IF vDialogRoot.ComboBoxEntry EXISTS
      FOR EACH vDialogRoot.ComboBoxEntry
         szWriteBuffer = "   document." + szFormName + ".h" + vDialogRoot.ComboBoxEntry.Name + ".value = " +
                         "document." + szFormName + "." + vDialogRoot.ComboBoxEntry.Name + ".value"
         WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      END
      szWriteBuffer = ""
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   END

   //KJS 12/17/07 - It was decided to change the time-out feature to 60 minutes instead of 15 because many
   //faculty complained about it being too short.  We would really like to control this
   //using userid so that different users can have different timeout times.
   //KJS 2/14/08 - Now we have added LogoutTime to the zeidon.ini file as a quick fix.
   //If the timeout is zero or null then do not have a timeout option for the generated
   //jsp pages.  If there is a value, then create the timeout according to the value.
   /*
   SysReadZeidonIni( -1, szSystemIniApplName, "LogoutTime", szTimeout )
   IF  szTimeout = "" OR szTimeout = "0"
      szWriteBuffer = "   // No timeout value specified."
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   timerID = null;"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   ELSE
      szWriteBuffer = "   var delay = 60000 * " + szTimeout + ";  // Timeout in " + szTimeout + " minutes"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   timerID = setTimeout( ^_OnAlmostTimeout( )^, delay );"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   END
   */

   // KJS 2/19/08 - Now trying with a variable in the file timeout.inc.
// szWriteBuffer = "   var delay = 60000 * 15;  // 15 minutes"
   szWriteBuffer = "   var nTimeout = document." + szFormName + ".zTimeout.value;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   if (nTimeout > 0)"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      var delay = 60000 * nTimeout;  // Timeout value in timeout.inc"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      timerID = setTimeout( ^_OnAlmostTimeout( )^, delay );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   else"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      timerID = null; // No timeout specified"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
   

   // KJS 09/21/2009   
   // If there are postbuild actions for this window, and those actions have javascript code on them, we
   // need to call the java functions that has the javascript code in them (previously only an operation
   // tied to this action was called up in the jsp code).  We are going to put a call to these functions
   // in the _AfterPageLoaded function.
   // Loop through the actions looking for one that has javascript code and place the calls here.
   CreateViewFromView( vDialogTemp, vDialog )
   FOR EACH vDialogTemp.Action
   
      FOR EACH vDialogTemp.ActWndEvent
      
         // Only worry about PostBuild window actions.
         IF vDialogTemp.ActWndEvent.Type = 2
            
            IF vDialogTemp.Action.WebJavaScript != ""
            
               szWriteBuffer = "   // Postbuild actions that have javascript code."
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
               szActionName = vDialogTemp.Action.Tag
               szWriteBuffer = "   " + szActionName + "( );"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
                  
            END

         END
      END
   END
   DropView( vDialogTemp )
   
   // Because there is some postbuild code that could be called where isWindowClosing could be set to false, re-initialize it
   // again after the page has been loaded.
   szWriteBuffer = "isWindowClosing = true;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
   
   
   szWriteBuffer = "}"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
   
   // ******************************   End of _AfterPageLoaded ***********************

   //KJS 10/19/07 - This is a generic function for any grids that have a
   //checkbox on it.  If there is no "text" for this checkbox (so the header would be blank)
   //we are going to create a checkbox in the grid header that calls this function.
   //This will select all or unselect all the checkboxes in the grid.
   szWriteBuffer = "function CheckAllInGrid(id, CheckBoxName)"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "{"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   var wcontrols = id.form.elements;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   var check = id.checked;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   var wcontrol, i = 0;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
   szWriteBuffer = "   while ( wcontrol = wcontrols[ i++ ] )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      //Check to see if the checkbox belongs to this table then check it."
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      if ( wcontrol.name.indexOf( CheckBoxName ) != -1 && wcontrol.type == 'checkbox' )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         wcontrol.checked = check;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "}"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   // ****** Generate JavaScript Function routine for each Action.
   FOR EACH vDialog.Action
   
      szActionName = vDialog.Action.Tag
      nRC = zstrcmpi( szActionName, "alt-f4" )
      IF nRC = 0
         szActionName = "AltF4"
      END

      szListButtonFlag = ""
      IF vDialog.ActEvent EXISTS AND vDialog.ActCtrl EXISTS

         // Determine if Action for the ActCtrl is for a PushBtn within a Grid or HyperText (not hyperlink)
         // or an image (Bitmap or BitmapBtn) within a Grid..
         szCtrlTag = vDialog.ActCtrl.Tag
         CreateViewFromViewForTask( vDialogTemp, vDialogRoot, 0 )
         lControl = zQUAL_STRING + zPOS_FIRST + zRECURS
         //KJS 10/24/07 - Right now if there is an action that is called more than once on a window and
         //one of the places the action is called is not from a PushBtn or GridEditCtl then
         //this doesn't always work.  I just had a case where there was an action on RowSelect
         //on the grid and the action was called from a hottext.  zListButtonFlag did not get set.
         nRC = SetEntityCursor( vDialogTemp, "Control", "Tag", lControl, szCtrlTag, "", "", 0, "Window", "" )
         IF nRC >= zCURSOR_SET
            szTempStr = vDialogTemp.ControlDef.Tag
            IF szTempStr = "PushBtn" OR szTempStr = "GridEditCtl" OR szTempStr = "Bitmap" OR szTempStr = "BitmapBtn"

               // The Control for the Action was a Pushbutton or HyperText.
               // Identify if this Control is inside a Grid.
               nRC = 0
               LOOP WHILE nRC = 0 AND szListButtonFlag = ""
                  nRC = ResetViewFromSubobject( vDialogTemp )
                  IF nRC = 0 AND vDialogTemp.ControlDef EXISTS
                     IF vDialogTemp.ControlDef.Tag = "Grid"  // vDialogTemp.ControlDef.Key = 2010
                        // The parent of the this control is a Grid, so indicate for later.
                        szListButtonFlag = "Y"
                     END
                  END
               END
            END

         END
         DropView( vDialogTemp )

      END

      // Event is start email.
      IF vDialog.Action.Type = zWAB_StartEmailClient OR
         vDialog.Action.Type = zWAB_StartEmailClientBCC OR
         vDialog.Action.Type = zWAB_StartEmailClientCC

         szWriteBuffer = "function " + szActionName + "( )"
         WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
         szWriteBuffer = "{"
         WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
         
         szWriteBuffer = "   // This is for indicating whether the user hit the window close box."
         WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
         szWriteBuffer = "   isWindowClosing = false;"
         WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

         //KJS 11/16/2007 - We want to insert any javascript code that the
         //user has entered for this action.  This will be put before the action
         //generated code for submitting.  If the user wants to skip the
         //generated code, the inserted code should end with a return.
         szJavaScript = vDialog.Action.WebJavaScript
         IF  szJavaScript != ""
            szWriteBuffer = "      //Javascript code entered by user."
            WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
            szWriteBuffer = szJavaScript
            WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
            szWriteBuffer = "      //END of Javascript code entered by user."
            WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
         END

         // Go to generate special code for setting up email entries and starting email client.
         GenJSP_EmailEntries( vDialog, vDialogRoot, lFileJSP, szWriteBuffer, szFormName )

         szWriteBuffer = "}"
         WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
      ELSE
         IF szListButtonFlag = "Y"
            szWriteBuffer = "function " + szActionName + "( strEntityKey )"         // of these
         ELSE
            szWriteBuffer = "function " + szActionName + "( )"                      // of these
         END
         WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
         szWriteBuffer = "{"
         WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
         
         szWriteBuffer = "   // This is for indicating whether the user hit the window close box."
         WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
         szWriteBuffer = "   isWindowClosing = false;"
         WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

         // This Action is Startup Web Popup WITHOUT mapping, so generate unique statements for that case.
         IF ( vDialog.Action.Type = zWAB_StartModalWebPopup OR vDialog.Action.Type = zWAB_StartModelessWebPopup ) AND vDialog.Action.NoMap = "Y"

            //KJS 11/16/2007 - We want to insert any javascript code that the
            //user has entered for this action.  This will be put before the action
            //generated code for submitting.
            szJavaScript = vDialog.Action.WebJavaScript
            IF  szJavaScript != ""
               szWriteBuffer = "      //Javascript code entered by user."
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
               szWriteBuffer = szJavaScript
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
               szWriteBuffer = "      //END of Javascript code entered by user."
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
            END
         
            //szWriteBuffer = "   isWindowClosing = false;"
            //WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

            szDialogName = vDialog.Action.DialogName
            szWindowName = vDialog.Action.WindowName

            // We are opening a popup window within this dialog
            IF szDialogName = vDialogRoot.Dialog.Tag
               // KJS 01/25/08 - The popup window was getting the size of the calling window (aboe code).  Instead, we want the popup window to be
               // the size of the painted popup window.  Added some hidden variables to hold this value.
               CreateViewFromView( vDialogTemp2, vDialogRoot )
               SET CURSOR FIRST vDialogTemp2.Window WHERE vDialogTemp2.Window.Tag = szWindowName
               IF RESULT < zCURSOR_SET
                  szMsg = "Error in Window, " + vDialog.Window.Tag + ": A 'Set Subwindow' for a Popup exists to a window that doesn't exist: " + szWindowName
                  MessageSend( vSubtask, "", "JSP Generation", szMsg, zMSGQ_OBJECT_CONSTRAINT_WARNING, 0 )
               ELSE
                  // KJS 01/30/08 - Want the popup window to be opened with the correct size of the painted popup window
                  // not just a generic number (had been 600,300).
                  zIntegerToString( szWidth, 10, vDialogTemp2.Window.SZDLG_X / 34000 )
                  zIntegerToString( szHeight, 10, vDialogTemp2.Window.SZDLG_Y / 34000 )
               END
               DropView( vDialogTemp2 )
            ELSE
               // We are opening a popup window in a different dialog.  We want the size of the
               // popup window.  Need to open the other dialog.
               ActivateMetaOI_ByName( vSubtask, vDialogTemp2, 0, zREFER_DIALOG_META, zSINGLE, szDialogName, 0 )
               SET CURSOR FIRST vDialogTemp2.Window WHERE vDialogTemp2.Window.Tag = szWindowName
               IF RESULT >= zCURSOR_SET
                  zIntegerToString( szWidth, 10, vDialogTemp2.Window.SZDLG_X / 34000 )
                  zIntegerToString( szHeight, 10, vDialogTemp2.Window.SZDLG_Y / 34000 )
               ELSE

                  szMsg = "Error in Window, " + vDialogRoot.Window.Tag + ": A 'Set Subwindow' for a Popup exists to a dialog.window that doesn't exist: " +
                          szDialogName + "." + szWindowName
                  MessageSend( vSubtask, "", "JSP Generation", szMsg, zMSGQ_OBJECT_CONSTRAINT_WARNING, 0 )

               END
               DropObjectInstance( vDialogTemp2 )

            END

            szWriteBuffer = "   var NewWin = window.open( ^" + szDialogName + szWindowName + ".jsp^, ^^,^menubar=0,toolbar=0,resizable=1,width=" + szWidth +
                            ",height=" + szHeight + ",modal=1^ );"
            WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

            szWriteBuffer = "   if (NewWin)"
            WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      NewWin.focus( )"
            WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   else"
            WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   {"
            WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
            //szWriteBuffer = "      alert(^Pop-up windows are being blocked.  You need to set your browser to allow pop-ups from 'my.enc.edu' for this action.^);"
            szWriteBuffer = "      alert(^Pop-up windows are being blocked.  You need to set your browser to allow pop-ups from this site for this action to work.^);"
            WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   }"
            WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
         ELSE
         // Print Window
         IF vDialog.Action.Type = 60
            szWriteBuffer = "   window.print();"
            WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
         ELSE
         IF vDialog.Action.Type = zWAB_StayOnWindow AND vDialog.Action.WebJavaScript != ""

            // KJS 08/14/2009 - If the window type is zWAB_StayOnWindow (no refresh) and we have Javascript code on this action
            // then we don't want to do the .submit (which we really don't want to do if the action is zWAB_StayOnWindow but I'm
            // afraid there might be places where we kept the action zWAB_StayOnWindow because we knew it would always put
            // the submit in).
            szWriteBuffer = "   if ( _IsDocDisabled( ) == false )"
            WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   {"
            WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
            
            szJavaScript = vDialog.Action.WebJavaScript
            IF  szJavaScript != ""
               szWriteBuffer = "      //Javascript code entered by user."
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
               szWriteBuffer = szJavaScript
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
               szWriteBuffer = "      //END of Javascript code entered by user."
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
            END
            szWriteBuffer = "   }"
            WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
         
           
         ELSE

            // Normal Action.
            
            szWriteBuffer = "   if ( _IsDocDisabled( ) == false )"
            WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   {"
            WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

            //KJS 11/16/2007 - We want to insert any javascript code that the
            //user has entered for this action.  This will be put before the action
            //generated code for submitting.
            szJavaScript = vDialog.Action.WebJavaScript
            IF  szJavaScript != ""
               szWriteBuffer = "      //Javascript code entered by user."
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
               szWriteBuffer = szJavaScript
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
               szWriteBuffer = "      //END of Javascript code entered by user."
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
            END

            // If this function is for Download File, we want to eliminate the _DisableFormElements statement.
            IF vDialog.Action.Type != zWAB_ProcessDownloadFile
               szWriteBuffer = "      _DisableFormElements( true );"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
            END

            // We need to determine if this Action is on a Group for File Transfer to Server, because we need to
            // use the Form Name from the Group in that case. We will locate the corresponding Action entry under
            // the Control subobject and move up one level to find the Group.
            szTransferFileFlag = ""
            CreateViewFromView( vDialogTemp, vDialog )
            lControl = zQUAL_STRING + zPOS_FIRST + zRECURS
            szActionName = vDialog.Action.Tag
            nRC = SetEntityCursor( vDialogTemp, "EventAct", "Tag", lControl,
                                   szActionName, "", "", 0, "Window", "" )
            IF nRC >= zCURSOR_SET
               ResetViewFromSubobject( vDialogTemp )
               SET CURSOR FIRST vDialogTemp.WebControlProperty WHERE vDialogTemp.WebControlProperty.Name = "File Transfer to Server"
               IF RESULT >= zCURSOR_SET
                  szTransferFileFlag = "Y"
               END
            END
            IF szTransferFileFlag = "Y"
               szCtrlTag = vDialogTemp.Control.Tag
               szWriteBuffer = "      document." + szCtrlTag + ".zAction.value = ^" + szActionName + "^;"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      document." + szCtrlTag + ".submit( );"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
            ELSE
               IF szListButtonFlag = "Y"
                  // The Action was on a Button on a Grid, so identify the entry selected.
                  szWriteBuffer = "      document." + szFormName + ".zTableRowSelect.value = strEntityKey;"
                  WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
               END

               //KELLY
               IF ( vDialog.Action.Type = zWAB_StartModalWebPopup OR vDialog.Action.Type = zWAB_StartModelessWebPopup ) AND vDialog.Action.NoMap = ""
                  // This Action is Startup Web Popup WITH mapping, so set zOpenPopupWindow to the next page jsp.
                  szDialogName = vDialog.Action.DialogName
                  szWindowName = vDialog.Action.WindowName

                  szWriteBuffer = "      document." + szFormName + ".zOpenPopupWindow.value = ^" + szDialogName + szWindowName + ".jsp^;"
                  WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

                  // We are opening a popup window within this dialog
                  IF szDialogName = vDialogRoot.Dialog.Tag
                     // KJS 01/25/08 - The popup window was getting the size of the calling window (above code).  Instead, we want the
                     // popup window to be the size of the painted popup window.  Added some hidden variables to hold this value.
                     CreateViewFromView( vDialogTemp2, vDialogRoot )
                     SET CURSOR FIRST vDialogTemp2.Window WHERE vDialogTemp2.Window.Tag = vDialog.Action.WindowName

                     IF RESULT >= zCURSOR_SET
                        zIntegerToString( szWidth, 10, vDialogTemp2.Window.SZDLG_X / 34000 )
                        zIntegerToString( szHeight, 10, vDialogTemp2.Window.SZDLG_Y / 34000 )
                     ELSE
                        szMsg = "Error in Window, " + vDialog.Window.Tag + ": A 'Set Subwindow' for a Popup exists to a window that doesn't exist: " + szWindowName
                        MessageSend( vSubtask, "", "JSP Generation", szMsg, zMSGQ_OBJECT_CONSTRAINT_WARNING, 0 )
                     END
                     DropView( vDialogTemp2 )
                  ELSE
                     // We are opening a popup window in a different dialog.  We want the size of the
                     // popup window.  Need to open the other dialog.
                     ActivateMetaOI_ByName( vSubtask, vDialogTemp2, 0, zREFER_DIALOG_META, zSINGLE, szDialogName, 0 )
                     SET CURSOR FIRST vDialogTemp2.Window WHERE vDialogTemp2.Window.Tag = szWindowName
                     IF RESULT >= zCURSOR_SET
                        zIntegerToString( szWidth, 10, vDialogTemp2.Window.SZDLG_X / 34000 )
                        zIntegerToString( szHeight, 10, vDialogTemp2.Window.SZDLG_Y / 34000 )
                     ELSE

                        szMsg = "Error in Window, " + vDialogRoot.Window.Tag + ": A 'Set Subwindow' for a Popup exists to a window that doesn't exist." +
                                szDialogName + "." + szWindowName
                        MessageSend( vSubtask, "", "JSP Generation", szMsg, zMSGQ_OBJECT_CONSTRAINT_WARNING, 0 )

                     END
                     DropObjectInstance( vDialogTemp2 )

                  END

                  szWriteBuffer = "      document." + szFormName + ".zPopupWindowSZX.value = ^" + szWidth + "^;"
                  WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "      document." + szFormName + ".zPopupWindowSZY.value = ^" + szHeight + "^;"
                  WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

               END

               IF vDialog.Action.Type = zWAB_ExitDialogTask
                  // For exiting the Dialog (ie., Session), the Action is OnUnload.
                  szWriteBuffer = "      document." + szFormName + ".zAction.value = ^_OnUnload^;"
               ELSE
                  szWriteBuffer = "      document." + szFormName + ".zAction.value = ^" + szActionName + "^;"
               END
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      document." + szFormName + ".submit( );"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

               //Type 84 is "Return from Web Popup/No Refresh
               //Type 85 is "Return from Web Popup/Refresh
               //We need to put in lines to close the popup window.
               IF ( vDialog.Action.Type = 85 )
                  szWriteBuffer = "      window.opener.location.href=window.opener.location.href;"
                  WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "      window.opener.focus();"
                  WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
               END
               IF ( vDialog.Action.Type = 84 OR vDialog.Action.Type = 85 )
                  szWriteBuffer = "      window.close();"
                  WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
               END
               /*
               IF ( vDialog.Action.Type = zWAB_ReturnFromWebPopupWithRefresh )
                  szWriteBuffer = "      window.opener.location.href=window.opener.location.href;"
                  WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "      window.opener.focus();"
                  WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
               END
               IF ( vDialog.Action.Type = zWAB_ReturnFromWebPopupNoRefresh OR vDialog.Action.Type = zWAB_ReturnFromWebPopupWithRefresh )
                  szWriteBuffer = "      window.close();"
                  WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
               END
               */
               

            END
            DropView( vDialogTemp )
            szWriteBuffer = "   }"
            WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
         END 
         END
         END
         szWriteBuffer = "}"
         WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
      END
   END

   // If the Window has a reusable side menu, add functions for each action from that menu.
   IF vDialog.ReusableSideWindow EXISTS
      IF vDialog.ReusableSideDialog.ZKey = vDialog.Dialog.ZKey
         CreateViewFromView( vDialogTemp, vDialog )
         SET CURSOR FIRST vDialogTemp.Window WHERE vDialogTemp.Window.ZKey = vDialog.ReusableSideWindow.ZKey
         IF RESULT >= zCURSOR_SET
            //Because the menu actions can be created on separate windows from the control
            //actions, we need to make sure these actions are unique.  We will prefix a
            //"m" to the main menu actions and prefix a "sm" to the side menu actions.
            GenJSP_MenuFunctions( vDialogTemp, vDialogRoot, lFileJSP, szWriteBuffer, szFormName, "sm" )
         END
         DropView( vDialogTemp )
      ELSE
         ActivateMetaOI_ByName( vSubtask, vDialogTemp, 0, zREFER_DIALOG_META, zSINGLE, vDialog.ReusableSideDialog.Tag, 0 )
         SET CURSOR FIRST vDialogTemp.Window WHERE vDialogTemp.Window.ZKey = vDialog.ReusableSideWindow.ZKey
         IF RESULT >= zCURSOR_SET
            //Because the menu actions can be created on separate windows from the control
            //actions, we need to make sure these actions are unique.  We will prefix a
            //"m" to the main menu actions and prefix a "sm" to the side menu actions.
            GenJSP_MenuFunctions( vDialogTemp, vDialogRoot, lFileJSP, szWriteBuffer, szFormName, "sm" )
         END
         DropObjectInstance( vDialogTemp )
      END
   END

   // If the Window has a reusable main menu, add functions for each action from that menu.
   ReusableDialogZKey = 0
   IF vDialog.ReusableMainWindow EXISTS
      ReusableDialogZKey = vDialog.ReusableMainDialog.ZKey
      ReusableWindowZKey = vDialog.ReusableMainWindow.ZKey
   ELSE
      IF vDialog.DefaultReusableMainWindow EXISTS
         ReusableDialogZKey = vDialog.DefaultReusableMainDialog.ZKey
         ReusableWindowZKey = vDialog.DefaultReusableMainWindow.ZKey
      END
   END
   IF ReusableDialogZKey != 0  // dks
      IF ReusableDialogZKey = vDialog.Dialog.ZKey
         CreateViewFromView( vDialogTemp, vDialog )
         SET CURSOR FIRST vDialogTemp.Window WHERE vDialogTemp.Window.ZKey = ReusableWindowZKey
         IF RESULT >= zCURSOR_SET
            //Because the menu actions can be created on separate windows from the control
            //actions, we need to make sure these actions are unique.  We will prefix a
            //"m" to the main menu actions and prefix a "sm" to the side menu actions.
            GenJSP_MenuFunctions( vDialogTemp, vDialogRoot, lFileJSP, szWriteBuffer, szFormName, "m" )
         END
         DropView( vDialogTemp )
      ELSE
         ActivateMetaOI_ByZKey( vSubtask, vDialogTemp, 0, zREFER_DIALOG_META, zSINGLE, ReusableDialogZKey, 0 )
         SET CURSOR FIRST vDialogTemp.Window WHERE vDialogTemp.Window.ZKey = ReusableWindowZKey
         IF RESULT >= zCURSOR_SET
            //Because the menu actions can be created on separate windows from the control
            //actions, we need to make sure these actions are unique.  We will prefix a
            //"m" to the main menu actions and prefix a "sm" to the side menu actions.
            GenJSP_MenuFunctions( vDialogTemp, vDialogRoot, lFileJSP, szWriteBuffer, szFormName, "m" )
         END
         DropObjectInstance( vDialogTemp )
      END
   END


   // If the Window has a reusable menu for the actions only, add functions for each action from that menu.
   ReusableDialogZKey = 0
   IF vDialog.ReusableActionWindow EXISTS
      ReusableDialogZKey = vDialog.ReusableActionDialog.ZKey
      ReusableWindowZKey = vDialog.ReusableActionWindow.ZKey
   ELSE
      IF vDialog.DefaultReusableActionWindow EXISTS
         ReusableDialogZKey = vDialog.DefaultReusableActionDialog.ZKey
         ReusableWindowZKey = vDialog.DefaultReusableActionWindow.ZKey
      END
   END
   IF ReusableDialogZKey != 0  // dks
      IF ReusableDialogZKey = vDialog.Dialog.ZKey
         CreateViewFromView( vDialogTemp, vDialog )
         SET CURSOR FIRST vDialogTemp.Window WHERE vDialogTemp.Window.ZKey = ReusableWindowZKey
         IF RESULT >= zCURSOR_SET
            // Because the menu actions can be created on separate windows from the control
            // actions, we need to make sure these actions are unique.  We will prefix a
            //"m" to the main menu actions and prefix a "sm" to the side menu actions and a 
            // prefix of "ma" for menu actions where the menu will not be either the main menu
            // or a side menu.
            GenJSP_MenuFunctions( vDialogTemp, vDialogRoot, lFileJSP, szWriteBuffer, szFormName, "ma" )
         END
         DropView( vDialogTemp )
      ELSE
         ActivateMetaOI_ByZKey( vSubtask, vDialogTemp, 0, zREFER_DIALOG_META, zSINGLE, ReusableDialogZKey, 0 )
         SET CURSOR FIRST vDialogTemp.Window WHERE vDialogTemp.Window.ZKey = ReusableWindowZKey
         IF RESULT >= zCURSOR_SET
            // Because the menu actions can be created on separate windows from the control
            // actions, we need to make sure these actions are unique.  We will prefix a
            //"m" to the main menu actions and prefix a "sm" to the side menu actions and a 
            // prefix of "ma" for menu actions where the menu will not be either the main menu
            // or a side menu.
            GenJSP_MenuFunctions( vDialogTemp, vDialogRoot, lFileJSP, szWriteBuffer, szFormName, "ma" )
         END
         DropObjectInstance( vDialogTemp )
      END
   END

   // Generate Function routines for each button inside a Table (grid, etc.)
   GenJSP_ChildFunctions( vDialog, lFileJSP, szWriteBuffer, szFormName )

   // Comboboxes and listboxes need to do some mapping before the action
   // is called, so create separate javascript functions for actions that
   // are called from comboboxes or listboxes.
   GenJSPJ_OutputMapRecurs( vDialog, lFileJSP, szWriteBuffer, szFormName )

   szWriteBuffer = "</script>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
   szWriteBuffer = "</head>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )


   /*****************************  End of JavaScript Functions Section *****************************************************/



   /*****************************  Beginning of <body> Section  *****************************************************/

   // The following five line of codes were removed by DonC on 7/5/2007 after discussion with Doug that _AfterPageLoaded should
   // be executed even if lSort != 0.
   //KJS 11/1/2007 - If there is an onLoad event on the body and we have table sorting on this page, the table
   //sorting does not work in Firefox (seems to work in IE and Opera).  The solution is to not call _AfterPageLoaded on
   //the body onLoad event but to create a call to addEvent(window 'load','_AfterPageLoaded)
   //which does not interfere with the Standardista code (for table sorting) but still calls _AfterPageLoaded.
   //In the Standardista code (sts.js) there is an addEvent that will call _AfterPageLoaded.
   //Because of this, I think we do need the below code.  It uses the onLoad event if the web screen does not use table sorting
   //but does not call onLoad if we are using table sorting and the _AfterPageLoaded gets called from addEvent in sts.js.
   //I did see some documentation on the web that said the addEvent function doesn't work on IE5/Mac.  Might want to see if that's
   //true. http://simonwillison.net/2004/May/26/addLoadEvent/
   IF lSort = 0
      szWriteBuffer = "<body onLoad=^_AfterPageLoaded( )^ onSubmit=^_DisableFormElements( true )^ onBeforeUnload=^_BeforePageUnload( )^>"
   ELSE
      szWriteBuffer = "<body onSubmit=^_DisableFormElements( true )^ onBeforeUnload=^_BeforePageUnload( )^>"
   END
   //szWriteBuffer = "<body onLoad=^_AfterPageLoaded( )^ onSubmit=^_DisableFormElements( true )^ onBeforeUnload=^_BeforePageUnload( )^>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
   
   // KJS 09/16/08 - Thinking that if WEB_NoBannerFlag = "Y" and WEB_NoTopMenuFlag = "Y" and
   // szNoPositioning = "Y" (using relative positioning) then we can assume that this window
   // is a popup window and so we can get rid of the div "wrapper" and "maincontents" so that
   // the only div will be the content div.  Currently you can still see the body background like all
   // other windows, and I'm not sure we want that.
   // KJS 10/30/08 - I added two styles to the "Window Style" (this is in zeidon.ppe) one for popup and
   // one for dashboard.
   IF vDialogRoot.WndStyle.Tag = "Popup Window"
      szWindowIsPopup = "Y"
   ELSE
   IF vDialogRoot.Window.WEB_NoBannerFlag = "Y" AND vDialogRoot.Window.WEB_NoTopMenuFlag = "Y" AND szNoPositioning = "Y"
      szWindowIsPopup = "Y"
   ELSE
      szWindowIsPopup = ""  
   END
   END
   
   
   // The user might want to have an include after the <body> so that they can create some divs that will be
   // displayed on the background of each page (ENC shows a skyline scene).  If so, create it here. 
   // Do not create if the window is a popup or if there is no banner.
   IF vDialog.Dialog.WEB_PageBackgroundInclude != "" AND szWindowIsPopup = "" AND vDialogRoot.Window.WEB_NoBannerFlag = ""
      szWriteBuffer = "<%@ include file=^" + vDialog.Dialog.WEB_PageBackgroundInclude + "^ %>"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )   
   END
   
   
   // KJS 10/30/08 - If a window has been created to be displayed on the user's dashboard, then this window needs to be specified
   // as a dashboard window because we have to do some special processing for this window (getting the blob from the dashboard entities).
   IF vDialogRoot.WndStyle.Tag = "Dashboard Window"
     szWindowIsForDashboard = "Y"
   ELSE
     szWindowIsForDashboard = ""
   END

   szShowBanner = "Y"
   szShowTopMenu = "Y"
   szShowSideMenu = "Y"

   IF szWindowIsPopup = "Y" AND szWindowIsForDashboard = "Y"
      szShowBanner = ""
      szShowTopMenu = ""
      szShowSideMenu = ""
   ELSE
      IF vDialogRoot.Window.WEB_NoBannerFlag = "Y"
         szShowBanner = ""
      END
      IF vDialog.Window.WEB_NoTopMenuFlag = "Y"
         szShowTopMenu = ""  
      END
   END
   
   // KJS 07/31/08 - I am adding a wrapper around the whole page, so that we can create styling in the
   // css.  Do not add this wrapper if the window is going to be a popup window or a window that will be part
   // of a dashboard.
   //<!--This text is a comment-->
   IF szWindowIsPopup = "" AND szWindowIsForDashboard = ""
      szWriteBuffer = "<div id=^wrapper^>"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )   
   END   

   // Build the Banner before getting into Menu Options.
   //IF vDialogRoot.Window.WEB_NoBannerFlag = ""
   IF szShowBanner = "Y"
      // strBannerName will always have a value, it might be a dynamic banner name set in vml code
      // or it might be an include file specified in the dialog or if neither of those, then
      // strBannerName has been set to "./include/banner.inc".
      //szWriteBuffer = "<a href=^#^><img src=^images/<%=strBannerName%>^ width=^800^ height=^93^></a>"
      szWriteBuffer = "<jsp:include page='<%=strBannerName %>' />"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
   END

   szSideMenuExists = "N"

   // Generate Main Navigation Bar
   ReusableDialogZKey = 0
   IF vDialog.ReusableMainWindow EXISTS
      ReusableDialogZKey = vDialog.ReusableMainDialog.ZKey
      ReusableWindowZKey = vDialog.ReusableMainWindow.ZKey
   ELSE
      IF vDialog.DefaultReusableMainWindow EXISTS
         ReusableDialogZKey = vDialog.DefaultReusableMainDialog.ZKey
         ReusableWindowZKey = vDialog.DefaultReusableMainWindow.ZKey
      END
   END
   
   //IF ( ReusableDialogZKey != 0 AND vDialog.Window.WEB_NoTopMenuFlag = "" )  // dks
   IF ( ReusableDialogZKey != 0 AND szShowTopMenu = "Y" )  // dks
      IF ReusableDialogZKey = vDialog.Dialog.ZKey
         CreateViewFromView( vDialogTemp, vDialog )
         SET CURSOR FIRST vDialogTemp.Window WHERE vDialogTemp.Window.ZKey = ReusableWindowZKey
         IF RESULT >= zCURSOR_SET
            BuildMainNavSection( vDialog, vDialogTemp, lFileJSP )
         END
         DropView( vDialogTemp )
      ELSE
         ActivateMetaOI_ByZKey( vSubtask, vDialogTemp, 0, zREFER_DIALOG_META, zSINGLE, ReusableDialogZKey, 0 )
         SET CURSOR FIRST vDialogTemp.Window WHERE vDialogTemp.Window.ZKey = ReusableWindowZKey
         IF RESULT >= zCURSOR_SET
            BuildMainNavSection( vDialog, vDialogTemp, lFileJSP )
         END
         DropObjectInstance( vDialogTemp )
      END
   END
   
   // KJS 07/31/08 - Before we build the main content items (side navigation if it exists and the page contents) we
   // are going to create another div.  Not sure this is necessary but I'm thinking it might be helpful (then the
   // footer can be after this).
   IF szWindowIsPopup = "" AND szWindowIsForDashboard = ""
      szWriteBuffer = "<div id=^maincontent^>"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   END
   
   // Left navigation bar from Menu.
   // If the Window has a Reusable menu, use it. Otherwise try to use the Main Menu for the Window.
   // If neither exists, there will be no left navigation bar.
   //IF vDialog.ReusableSideWindow EXISTS
   IF vDialog.ReusableSideWindow EXISTS AND szShowSideMenu = "Y"

      IF vDialog.DfltMenu EXISTS AND vDialog.ReusableSideWindow.ZKey != vDialog.Window.ZKey
         vDfltMenu = vDialog
      ELSE
         vDfltMenu = 0
      END

      IF vDialog.ReusableSideDialog.ZKey = vDialog.Dialog.ZKey
         CreateViewFromView( vDialogTemp, vDialog )
         SET CURSOR FIRST vDialogTemp.Window WHERE vDialogTemp.Window.ZKey = vDialog.ReusableSideWindow.ZKey
         IF RESULT >= zCURSOR_SET
            BuildSideNavSectionJ( vDialog, vDialogTemp, lFileJSP, "Y", vDfltMenu )  // dks ... want Reusable + Default
            szSideMenuExists = "Y"
         END
         DropView( vDialogTemp )
      ELSE
         ActivateMetaOI_ByName( vSubtask, vDialogTemp, 0, zREFER_DIALOG_META,  zSINGLE, vDialog.ReusableSideDialog.Tag, 0 )
         SET CURSOR FIRST vDialogTemp.Window WHERE vDialogTemp.Window.ZKey = vDialog.ReusableSideWindow.ZKey
         IF RESULT >= zCURSOR_SET
            BuildSideNavSectionJ( vDialog, vDialogTemp, lFileJSP, "Y", vDfltMenu )  // dks ... want Reusable + Default
            szSideMenuExists = "Y"
         END
         DropObjectInstance( vDialogTemp )
      END

   ELSE
      //IF vDialogRoot.DfltMenu EXISTS
      IF vDialogRoot.DfltMenu EXISTS AND szShowSideMenu = "Y"
         BuildSideNavSectionJ( vDialog, vDialogRoot, lFileJSP, "N", 0 )
         szSideMenuExists = "Y"
      END
   END

   szCSS_Class = vDialog.Window.CSS_Class
   IF szCSS_Class = ""
      szCSS_Class = vDialog.Dialog.CSS_Class
   END

   IF szCSS_Class != ""
      szDivContentClass = szCSS_Class
      //szWriteBuffer = "<div class=^" + szCSS_Class + "^>"
      szWriteBuffer = "<div id=^" + szCSS_Class + "^>"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   ELSE
      // KJS 10/30/08 - Do I want to put a div with id for dashboard window and
      // for popup window???
      IF  szWindowIsPopup = "Y"
         // If no class was given, create a default div with the id of content.
         szWriteBuffer = "<div id=^contentpopup^>"
         WL_QC( vDialogRoot, lFileJSP, szWriteBuffer, "^", 1 )
         szDivContentClass = "contentpopup"   
      ELSE
      IF  szWindowIsForDashboard = "Y"
         // If no class was given, create a default div with the id of content.
         szWriteBuffer = "<div id=^contentdashboard^>"
         WL_QC( vDialogRoot, lFileJSP, szWriteBuffer, "^", 1 )
         szDivContentClass = "contentdashboard"   
      ELSE 
      IF szSideMenuExists = "Y"
         // If no class was given, create a default div with the id of content.
         szWriteBuffer = "<div id=^content^>"
         WL_QC( vDialogRoot, lFileJSP, szWriteBuffer, "^", 1 )
         szDivContentClass = "content"   
      ELSE
         // If no class was given, and there is no side menu,
         // create a default div with the id of contentnosidemenu.
         szWriteBuffer = "<div id=^contentnosidemenu^>"
         WL_QC( vDialogRoot, lFileJSP, szWriteBuffer, "^", 1 )   
         szDivContentClass = "contentnosidemenu"   
      END
      END 
      END
   END

   // KJS 03/04/10 - We are going to try adding an include file for system maintenance.  That way if we
   // want to kick people out of MyENC, we will put code in systemmaintenance.inc that will have a flashing
   // message that will show on each page.
//<!--System Maintenance-->

//<div> <%@include file="./include/systemmaintenance.inc" %> </div>

//<!--System Maintenance-->

   szWriteBuffer = "<!--System Maintenance-->"
   WL_QC( vDialogRoot, lFileJSP, szWriteBuffer, "^", 1 )  
    
   szWriteBuffer = "<%@ include file=^./include/systemmaintenance.inc^ %>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
   
   szWriteBuffer = "<!-- END System Maintenance-->"
   WL_QC( vDialogRoot, lFileJSP, szWriteBuffer, "^", 1 )   


   szWriteBuffer = ""
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

   // Generate FORM
   //CreateSizeString( vDialog, szSize )
   PIX_PER_DU( vDialog, DLUnits )
   // For Popups, we will use the Width from the Window. Otherwise we won't.
   // The way we will determine if this Window is for a Popup is to see if any Action is Return from Popup.
   //SET CURSOR FIRST vDialog.Action WHERE ( vDialog.Action.Type = zWAB_StartModalWebPopup OR vDialog.Action.Type = zWAB_StartModelessWebPopup )
   SET CURSOR FIRST vDialog.Action WHERE ( vDialog.Action.Type = 78 OR vDialog.Action.Type = 79 )
   IF RESULT >= zCURSOR_SET
      lSize = zLOUSHORT( vDialog.Window.SZDLG_X )
      lSize = lSize * DLUnits
      szWidth = lSize
   ELSE
      szWidth = "750"
   END
   lSize = zLOUSHORT( vDialog.Window.SZDLG_Y )
   lSize = lSize * DLUnits
   szHeight = lSize
   szStyle = "width:" + szWidth + "px;height:" + szHeight + "px;"

   szWriteBuffer = "<form name=^" + szFormName + "^  id=^" + szFormName + "^  method=^post^>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   // Eliminating <input termination.
   szWriteBuffer = "   <input name=^zAction^ id=^zAction^ type=^hidden^ value=^NOVALUE^>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   <input name=^zTableRowSelect^ id=^zTableRowSelect^ type=^hidden^ value=^NOVALUE^>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   <input name=^zDisable^ id=^zDisable^ type=^hidden^ value=^NOVALUE^>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "<%"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   //szWriteBuffer = "   strSessionId = session.getId( );"
   //WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

   // Add each view definition.
   FOR EACH vDialog.ViewObjRef //WHERE vDialog.ViewObjRef.wWindowUseFlag = "Y"
      szWriteBuffer = "   View " + vDialog.ViewObjRef.Name + " = null;"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   END

   //szWriteBuffer = "   zeidon.zView vKZXMLPGO = new zeidon.zView( strSessionId );"
   //WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String strRadioGroupValue = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String strComboCurrentValue = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String strAutoComboBoxExternalValue = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String strComboCountCurrentValue = ^0^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String strErrorColor = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String strErrorMapValue = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String strTextDisplayValue = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String strTextURL_Value = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String strSolicitSave = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   int    ComboCount = 0;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   int    iTableRowCnt = 0;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )  
   IF  szWindowIsForDashboard = "Y"
      szWriteBuffer = "   strViewName = ^^;"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      iFrameCount = 0;"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   END
   szWriteBuffer = "   int    nRC2 = 0;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   nRC = 0;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   //szWriteBuffer = "   vKZXMLPGO = task.getViewByName( ^KZXMLPGO^ );"
   //WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   //szWriteBuffer = "   if ( vKZXMLPGO != null )"
   //WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   //szWriteBuffer = "   {"
   //WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   //szWriteBuffer = "      vKZXMLPGO = JspWebUtils.createWebSession( task, userId );"
   szWriteBuffer = "      vKZXMLPGO = JspWebUtils.createWebSession( task, ^testUserId^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   //szWriteBuffer = "      vKZXMLPGO.setName(^KZXMLPGO^);"
   //WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   //szWriteBuffer = "   }"
   //WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   //KJS Trace
   IF (lTrace = 1)
      szWriteBuffer = "   task.log().debug( ^InitWebPage: ^, ^" + vDialog.Dialog.Tag + vDialog.Window.Tag + "^ );"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   END

   //szWriteBuffer = "   nRC2 = vKZXMLPGO.InitWebPage(^" + vDialog.Dialog.Tag + "^, ^" +
   //                                                  vDialog.Window.Tag + "^ );"
   //WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
   
   IF  szWindowIsForDashboard = "Y" 
      // HOW AM I GOING TO KNOW TO USE mUser????!!! Right now this is vDialog.CtrlMapView.Name but that is not correct.
      //szViewName = vDialog.CtrlMapView.Name
      szViewName = "mUser"
      szWriteBuffer = "   // Position on the correct Frame by looping through the dashboard object "
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   iFrameCount = vKZXMLPGO.cursor( ^Session^ ).getIntegerFromAttribute( ^DashboardFrameCount^ ); "
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   if ( iFrameCount == 0 ) "
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      iFrameCount = 1; "
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   task.log().debug(^**** FrameCount *** ^, iFrameCount); "
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = ""
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   " + szViewName + " = task.getViewByName( ^" + szViewName + "^ );"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = ""
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   nRC = " + szViewName + ".cursor(^DashboardFrameUser^).setFirst( ^wFrameNbr^, iFrameCount, ^^ ); "
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   task.log().debug(^**** nRC after SetCursorFirstByInteger *** ^, nRC); "
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = ""
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   strViewName = " + szViewName + ".cursor(^DashboardFrame^).getStringFromAttribute( ^Name^ ); "
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   task.log().debug(^**** ReportName *** ^, strViewName); "
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   nRC = " + szViewName + ".cursor(^PresentationObjectInstance^ ).checkExistenceOfEntity(); "
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   if ( nRC >= 0 ) "
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   { "
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      nRC = mDashboard.SetOIFromBlob(strSessionId, ^^, task, " + szViewName + ", ^PresentationObjectInstance^, ^ObjectInstanceBlob^,0); //zIGNORE_ERRORS "
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      strViewName = " + szViewName + ".cursor(^DashboardFrame^).getStringFromAttribute( ^ObjectInstanceName^ ); "
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      mDashboard.SetName(strViewName ); "
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   } "
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = ""
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   iFrameCount = iFrameCount + 1; "
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   vKZXMLPGO.cursor(^Session^).setAttribute( ^DashboardFrameCount^, iFrameCount ); "
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   END

   // Build call to FindErrorFields and process any errors.
   szWriteBuffer = "   // FindErrorFields Processing"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   //strError = task.FindErrorFields( strSessionId );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

   //KJS Trace
   //szWriteBuffer = "   task.log().debug( ^Post FindErrorFields Error1: ^, strError );"
   //WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

   szWriteBuffer = "   nPos = strError.indexOf( ^\t^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

   //KJS Trace
   //szWriteBuffer = "   task.log().debug( ^Post FindErrorFields Pos1: ^, nPos );"
   //WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

   szWriteBuffer = "   if ( nPos > 0 )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      strErrorFlag = strError.substring( 0, 1 );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      strError = strError.substring( nPos + 1 );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   //szWriteBuffer = "   task.log().debug( ^Post FindErrorFields ErrorFlag: ^, strErrorFlag );"
   //WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   if ( nPos >= 0 && strErrorFlag.equals( ^Y^ ) )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      nPos = strError.indexOf( ^\t\t^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      if ( nPos >= 0 )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         strErrorTitle = strError.substring( 0, nPos );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         strErrorMsg = strError.substring( nPos + 2 );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

   //KJS Trace
   IF (lTrace = 1)
      szWriteBuffer = "         task.log().debug( ^After FindErrorFields ErrorFlag: ^, strErrorFlag );"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         task.log().debug( ^After FindErrorFields ErrorTitle: ^, strErrorTitle );"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         task.log().debug( ^After FindErrorFields ErrorMsg: ^, strErrorMsg );"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
   END

   szWriteBuffer = "      }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )


   szWriteBuffer = "   strSolicitSave = vKZXMLPGO.cursor( ^Session^ ).getStringFromAttribute( ^SolicitSaveFlag^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   // FindOpenFile processing.
   szWindowName = vDialog.Window.Tag
   szWriteBuffer = "   //strFocusCtrl = task.GetFocusCtrl(^" +
                   szDialogName + "^, ^" + szWindowName + "^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   //strOpenFile = task.FindOpenFile();"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

   //KJS Trace
   IF (lTrace = 1)
      szWriteBuffer = "   task.log().debug( ^After Get OpenFile: ^, strOpenFile );"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   END

   szWriteBuffer = "   //strDateFormat = task.GetDateDefaultContextFormat();"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

   //KJS Trace
   //szWriteBuffer = "   task.log().debug( ^After Get DateFormat: ^, strDateFormat );"
   //WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

   szWriteBuffer = "%>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   // Eliminating <input termination.
   szWriteBuffer = "   <input name=^zFocusCtrl^ id=^zFocusCtrl^ type=^hidden^ value=^<%=strFocusCtrl%>^>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   <input name=^zOpenFile^ id=^zOpenFile^ type=^hidden^ value=^<%=strOpenFile%>^>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   <input name=^zDateFormat^ id=^zDateFormat^ type=^hidden^ value=^<%=strDateFormat%>^>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   <input name=^zOpenPopupWindow^ id=^zOpenPopupWindow^ type=^hidden^ value=^<%=strOpenPopupWindow%>^>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   <input name=^zPopupWindowSZX^ id=^zPopupWindowSZX^ type=^hidden^ value=^<%=strPopupWindowSZX%>^>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   <input name=^zPopupWindowSZY^ id=^zPopupWindowSZY^ type=^hidden^ value=^<%=strPopupWindowSZY%>^>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   <input name=^zErrorFlag^ id=^zErrorFlag^ type=^hidden^ value=^<%=strErrorFlag%>^>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   // KJS 09/09/2009 - We are using Timeout.inc (which says this is for Jeff) but if there is a value in
   // WEB_Timeout for the dialog or window, we want to use that.
   IF vDialog.Window.WEB_Timeout != ""
      szWriteBuffer = "   <input name=^zTimeout^ id=^zTimeout^ type=^hidden^ value=^" 
      szWriteBuffer = szWriteBuffer + vDialog.Window.WEB_Timeout 
      szWriteBuffer = szWriteBuffer + "^>"
   ELSE
      IF vDialog.Dialog.WEB_Timeout != "" 
         szWriteBuffer = "   <input name=^zTimeout^ id=^zTimeout^ type=^hidden^ value=^"
         szWriteBuffer = szWriteBuffer + vDialog.Dialog.WEB_Timeout 
         szWriteBuffer = szWriteBuffer + "^>"
      ELSE 
         szWriteBuffer = "   <input name=^zTimeout^ id=^zTimeout^ type=^hidden^ value=^<%=nTimeout%>^>"
      END
   END
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   <input name=^zSolicitSave^ id=^zSolicitSave^ type=^hidden^ value=^<%=strSolicitSave%>^>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   // Generate HTML Control output.
   OrderEntityForView( vDialog, "Control", "PSDLG_Y A PSDLG_X A" )
   vGroupParent = 0

   // KJS 07/23/08 - Check if this dialog window will be built with all relative positioning or with absolute positioning
   IF  vDialog.Dialog.WEB_RelativePositionFlag = "Y" OR vDialog.Window.WEB_RelativePositionFlag = "Y" 
      szNoPositioning = "Y"
   ELSE
      szNoPositioning = ""
   END

   
   // KJS 02/19/09 - Added WEB_AbsolutePositionFlag because I would like to use absolute positioning on my popup pages but the rest
   // I want to use relative positioning.  Since I think from now on we will probably only want to use relative positioning for most
   // pages, I think it will be easier to have this flag.
   IF  vDialog.Window.WEB_AbsolutePositionFlag = "Y" 
      szNoPositioning = ""
   END

   
   GenJSPJ_CrteCtrlsRecurs( vDialog, vGroupParent, vDialogRoot, lFileJSP, szWriteBuffer, szIndentNext, lTableRowCnt, szNoPositioning, 0, 0 )

   // Complete the JSP file.
   szWriteBuffer = ""
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

   szWriteBuffer = "<%"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   if ( strErrorFlag.equals( ^D^ ) )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

   IF (lTrace = 1)
      szWriteBuffer = "      task.log().debug( ^Post FindErrorFields Error: ^, strError );"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   END

   szWriteBuffer = "      nPos = strError.indexOf( ^\t^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      if ( nPos >= 0 )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         strErrorTitle = strError.substring( 0, nPos );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         nPos = strError.indexOf( ^\t\t^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         strErrorMsg = strError.substring( nPos + 2 );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "%>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "   <input name=^zError^ id=^zError^ type=^hidden^ value=^<%=strErrorMsg%>^>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "</form>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

   // FORM GENERATION FOR FILE TRANSFER GROUPS
   // Create Form statements for each Group of type "File Transfer to Server".
   // Note that each Group requires a subcontrol of type EditBox and another of type PushBtn.
   CreateViewFromView( vDialogTemp, vDialog )
   NAME VIEW vDialogTemp "vDialogTemp"
   lControl = zQUAL_STRING + zPOS_FIRST + zRECURS
   szCtrlTag = "File Transfer to Server"
   nRC = SetEntityCursor( vDialogTemp, "WebControlProperty", "Name", lControl,
                          szCtrlTag, "", "", 0, "Window", "" )
   LOOP WHILE nRC >= zCURSOR_SET
      // Generate Form Statement for Group, with hidden field zAction.
      szWriteBuffer = ""
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szFormName = vDialogTemp.Control.Tag
      szWriteBuffer = "<form name=^" + szFormName + "^  id=^" + szFormName + "^ method=^post^ enctype=^multipart/form-data^>"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   <input name=^zAction^ id=^zAction^ type=^hidden^ value=^HELP^>"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

      // Get Group positions for adding to subcontrols.
      X_Size = vDialogTemp.Control.PSDLG_X * DLUnits
      Y_Size = vDialogTemp.Control.PSDLG_Y * DLUnits

      // Generate hidden field zTargetFileName, with JSP to retrieve name.
      // We are currently positioned on the GroupBox and need to reposition on the subcontrol Button
      // to generate the FileName mapping..
      szWriteBuffer = "<%"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   strErrorMapValue = ^^;"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

      SetViewToSubobject( vDialogTemp, "CtrlCtrl" )
      FOR EACH vDialogTemp.Control
         IF vDialogTemp.ControlDef.Tag = "PushBtn"
            IF vDialogTemp.CtrlMapER_Attribute EXISTS
               // The mapping for the Push Button specifies the attribute that contains the Target File Name (without suffix).

               szWriteBuffer = "   strSessionId = session.getId( );"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

               szWriteBuffer = "   " + vDialogTemp.CtrlMapView.Name + " = " +
                               "task.getViewByName( ^" + vDialogTemp.CtrlMapView.Name + "^ );"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   if ( " + vDialogTemp.CtrlMapView.Name + " != null )"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

               szWriteBuffer = "   {"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      nRC = " + vDialogTemp.CtrlMapView.Name +
                               ".cursor(^" +
                               vDialogTemp.CtrlMapRelatedEntity.Name + "^ ).checkExistenceOfEntity();"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      if ( nRC >= 0 )"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         strErrorMapValue = " +
                               vDialogTemp.CtrlMapView.Name + ".cursor.getStringFromAttribute(^" +
                               vDialogTemp.CtrlMapRelatedEntity.Name + "^, ^" +
                               vDialogTemp.CtrlMapER_Attribute.Name + "^ );"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   }"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

               IF (lTrace = 1)
                  szWriteBuffer = "   else"
                  WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "      " + vDialogTemp.CtrlMapView.Name +
                                  ".log().debug( ^Invalid View: ^, ^" + vDialogTemp.Control.Tag + "^ );"
                  WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
               END

            END
         END
      END
      szWriteBuffer = "%>"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   <input name=^zTargetFileName^ id=^zTargetFileName^ type=^hidden^ value=^<%=strErrorMapValue%>^ >"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

      // Process EditBox and PushBtn as subcontrols.
      FOR EACH vDialogTemp.Control
         IF vDialogTemp.ControlDef.Tag = "EditBox"
            szCtrlTag     = vDialogTemp.Control.Tag
            szControlType = vDialogTemp.ControlDef.Tag
            szWriteBuffer = "   <% /* " + szCtrlTag + ":" + szControlType + " */ %>"
            WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

            CreateAbsolStyleString( vDialogTemp, szStyle, X_Size, Y_Size, "" )

            // For some reason with the <input type="file" control, the width property doesn't
            // seem to size the width correctly.  Use the "size" attribute instead.  The weird thing
            // is that if I don't include the width in style, then the "Browse" button that gets
            // created is not inline with the field that displays the upload file. ???!!!
            zIntegerToString( szWidth, 10, vDialogTemp.Control.SZDLG_X / 3.5 )

            szClass = vDialogTemp.Control.CSS_Class
            IF szClass = ""
               szWriteBuffer = "   <input name=^" + szCtrlTag + "^ id=^" + szCtrlTag + "^ size=^" + szWidth + "^ " + szStyle + " type=^file^  >"
            ELSE
               szWriteBuffer = "   <input class=^" + szClass + "^ name=^" + szCtrlTag + "^ id=^" + szCtrlTag + "^ size=^" + szWidth + "^ " + szStyle + " type=^file^  >"
            END
            WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
         END
         IF vDialogTemp.ControlDef.Tag = "PushBtn"
            szCtrlTag     = vDialogTemp.Control.Tag
            szControlType = vDialogTemp.ControlDef.Tag
            szWriteBuffer = "   <% /* " + szCtrlTag + ":" + szControlType + " */ %>"
            WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

            CreateAbsolStyleString( vDialogTemp, szStyle, X_Size, Y_Size, "" )
            szActionName = ""
            IF vDialogTemp.EventAct EXISTS
               szActionName = vDialogTemp.EventAct.Tag
            END
            szClass       = vDialogTemp.Control.CSS_Class
            IF szClass = ""
               //szWriteBuffer = "   <input type=^submit^ name=^" + szCtrlTag + "^ id=^" + szCtrlTag + "^ " + " value=^" + vDialogTemp.Control.Text + "^" +
               //                " onclick=^" + szActionName + "()^ " + szStyle + " >"
               szWriteBuffer = "   <button type=^button^ name=^" + szCtrlTag + "^ id=^" + szCtrlTag + "^ " +
                               " onclick=^" + szActionName + "()^ " + szStyle + " >" + vDialogTemp.Control.Text + "</button>"
            ELSE
               //szWriteBuffer = "   <input class=^" + szClass + "^ type=^submit^ name=^" + szCtrlTag + "^ id=^" + szCtrlTag + "^ " + " value=^" + vDialogTemp.Control.Text + "^" +
               //                " onclick=^" + szActionName + "()^ " + szStyle + " >"
               szWriteBuffer = "   <button type=^button^ class=^" + szClass + "^ name=^" + szCtrlTag + "^ id=^" + szCtrlTag + "^ " +
                               " onclick=^" + szActionName + "()^ " + szStyle + " >" + vDialogTemp.Control.Text + "</button>"
            END
            WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
         END
      END
      ResetViewFromSubobject( vDialogTemp )

      szWriteBuffer = "</form>"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

      lControl = zQUAL_STRING + zPOS_NEXT + zRECURS
      szCtrlTag = "File Transfer to Server"
      nRC = SetEntityCursor( vDialogTemp, "WebControlProperty", "Name", lControl,
                             szCtrlTag, "", "", 0, "Window", "" )
   END
   DropView( vDialogTemp )

   szWriteBuffer = "</div>   <!-- This is the end tag for the div '" + szDivContentClass + "' -->"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   IF  szWindowIsPopup = "" AND szWindowIsForDashboard = ""
      szWriteBuffer = "</div>   <!-- This is the end tag for the div 'maincontent' -->"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
   END
   
   // KJS 07/31/08 I don't think we need the following lines.  We are always going to have a div with either
   // content or a name designated by the user.
   // If there is a side menu, a div is created with an id of content.  We
   // need to create the ending div tag.
   //IF szSideMenuExists = "Y"
   //   szWriteBuffer = "</div>  <!-- This is the end tag for the div 'content'  or the class given by the user -->"
   //   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
   //END
   
   // KJS 07/31/08
   // Include a footer at the bottom before the end wrapper div.
   // Only put in a footer if we are generating with relative position.
   IF szNoPositioning = "Y" AND szWindowIsPopup = "" AND szWindowIsForDashboard = ""
      IF vDialogRoot.Dialog.WEB_FooterInclude = ""
         // If the user did not specify a footer, hardcode footer.inc
         szWriteBuffer = "<%@ include file=^./include/footer.inc^ %>"
         WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )   
      ELSE 
         szWriteBuffer = "<%@ include file=^" + vDialogRoot.Dialog.WEB_FooterInclude + "^ %>"
         WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
      END
   END

   
   
   //<!--This text is a comment-->
   IF  szWindowIsPopup = "" AND szWindowIsForDashboard = ""
      szWriteBuffer = "</div>  <!-- This is the end tag for wrapper -->"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
   END
   
   // DO WE PUT IN THE CODE FOR DASHBOARD HERE???? 1111
   
   szWriteBuffer = "</body>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "</html>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
// szWriteBuffer = "<%@ include file=^menubottom.inc^ %>"
// WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

   // If the Window HAS a menu, then this JSP has the navigation structure within it and contained
   // a div statement. So end the div.
// IF vDialogRoot.DfltMenu EXISTS  we never need it???  dks  2006.02.25
//    szWriteBuffer = "</div>"
//    WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
// END

   // KJS 11/05/09 - For login screens, we want to unregisterzeidon at the end of building a page.  That way
   // when people come to this page but don't do anything, we don't have a session open.
   IF vDialog.Window.WEB_UnregisterZeidonWindow = "Y" 
      szWriteBuffer = "<%"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   if ( task != null )"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   {"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      task.log().debug( ^After building the page UnregisterZeidonApplication: ----------------------------------->>> ^, ^" + szFormName + "^ );"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      task.dropTask();"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      task = null;"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      session.setAttribute( ^ZeidonSubtask^, task );"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "  }"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
      szWriteBuffer = "%>"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   END
   

   DropView( vDialogRoot )

   SysCloseFile( vDialog, lFileJSP, 0 )

END

/////////////////////////////////////////////////////////////////////////////
//
//    OPERATION: GenJSPJ_DownloadFile
//    If we have a download file button, we are creating a separate jsp file to do the download if the
//    browser is firefox.  This creates that code.
//
/////////////////////////////////////////////////////////////////////////////
LOCAL OPERATION
GenJSPJ_DownloadFile( VIEW vDialog,
                     STRING ( 32 ) szDownloadFileName )

   STRING ( 10000 ) szWriteBuffer
   INTEGER          lFileJSP

   lFileJSP = SysOpenFile( vDialog, szDownloadFileName, COREFILE_WRITE )
   IF lFileJSP < 0
      RETURN -1
   END

   szWriteBuffer = "<%-- wDownload_File --%>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "<%@ page import=^java.util.*,javax.servlet.*,javax.servlet.http.*,java.io.*,zeidon.zView^ %>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "<% "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "session = request.getSession( );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "Task task;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "View vKZXMLPGO;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   //szWriteBuffer = "com.quinsoft.zeidon.system.Object_KZXMLPGO = null;"
   //WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   int nRC;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "   String strURL;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String strError = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String strErrorFlag = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String strErrorTitle = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String strErrorMsg = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "   // Check to see if the Zeidon subtask view already exists.  If not, create"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "  // it and copy it into the application object."
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String taskId = (String)  session.getAttribute( ^ZeidonSubtask^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   Task task = objectEngine.getTaskById( taskId );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
   szWriteBuffer = "   if ( task == null )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      strURL = response.encodeRedirectURL( ^logout.html^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      response.sendRedirect( strURL );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      return;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   else"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      task.log().debug( ^*** In wDownload_file: ^, ^^);"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "      vKZXMLPGO = JspWebUtils.createWebSession( task, ^testUserId^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

   szWriteBuffer = "      strURL = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      nRC = 0;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "   String sDownloadFile = null;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String sSourceFileNameOnly = null;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String sExtension = null;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   int l;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   int x;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "   // Download File Processing"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "   sDownloadFile = (String)session.getAttribute( ^DownloadFile^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   task.log().debug( ^*** Download File: ^, sDownloadFile );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "   // Replace any quotes."
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   sDownloadFile = sDownloadFile.replaceAll(^\^^,^^);"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   l = sDownloadFile.lastIndexOf(^.^);"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   x = sDownloadFile.lastIndexOf(^\\^);"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   task.log().debug( ^*** sDownloadFile: ^, sDownloadFile );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "   // If x > l then the filename has no extension and"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   // there must be a period in the directory name."
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   // Right now we are not using sExtension but just"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   // in case we want to change the encType I want"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   // to capture this."
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   if (x > l)"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      sExtension = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   else"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      sExtension = sDownloadFile.substring(l+1);"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "   // Get the filename only without directories."
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   sSourceFileNameOnly = sDownloadFile.substring(x + 1);"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "   File InputFile = new File(sDownloadFile);"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   FileInputStream fis = new FileInputStream(InputFile); "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   try"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      String contenttype = ^application/octet-stream^;  "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      response.setContentType(contenttype);"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      response.addHeader(^Content-Disposition^, ^attachment; filename=^ + sSourceFileNameOnly + ^;^);"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      task.log().debug( ^*** In sSourceFileNameOnly: ^, sSourceFileNameOnly);"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "      //response.setHeader(^Cache-Control^, ^cache,must-revalidate^); "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      //response.addHeader(^Pragma^, ^public^);"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "      ServletOutputStream outStream = response.getOutputStream();"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      int c = 0;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      while ((c=fis.read())!=-1)"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         outStream.write(c); "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      } "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      outStream.flush(); "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      outStream.close();"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      fis.close();"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   catch (Exception e) "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   { "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      if (InputFile!=null && InputFile.exists()) "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      { "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         //TraceLine"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         task.log().debug( ^Error downloading file: ^, sDownloadFile );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      } "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   task.log().debug( ^*** In wDownload_file 2: ^, ^^);"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "%>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "<html><body></body></html>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )


   SysCloseFile( vDialog, lFileJSP, 0 )

   RETURN 0

END
