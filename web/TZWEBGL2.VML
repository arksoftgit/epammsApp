/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: BuildSideNavSection
//
/////////////////////////////////////////////////////////////////////////////
GLOBAL OPERATION
BuildSideNavSectionJ( VIEW vDialog,
                      VIEW vDialogRoot BASED ON LOD TZWDLGSO,
                      INTEGER lFile,
                      STRING (1) szReusableMenu,
                      VIEW vDialogMenu BASED ON LOD TZWDLGSO )

   STRING ( 10000 ) szWriteBuffer
   STRING ( 50 )    szNavigationTitle
   STRING ( 50 )    szCSS_Class
   STRING ( 50 )    szHTML_Name
   STRING ( 50 )    szDialogName
   STRING ( 50 )    szOptionTag
   STRING ( 34 )    szActionName
   STRING ( 20 )    szClass
   INTEGER          ActionType
   SHORT            nRC

   // SIDE NAVIGATION BAR
   TraceLineS("*** BuildSideNavSection Window *** ", vDialog.Window.Tag )

   szWriteBuffer = ""
   WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = "<div id=^leftcontent^>"
   WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 1 )
   szWriteBuffer = "<!-- Side Navigation *********************** -->"
   WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = "<div id=^sidenavigation^>"
   WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   <ul>"
   WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )

   FOR EACH vDialogRoot.OptAct WITHIN vDialogRoot.Menu
      szNavigationTitle = vDialogRoot.Option.Text
      szDialogName = vDialogRoot.OptAct.DialogName
      IF szDialogName = ""
         szDialogName = "NoDialogName"
      END

   // szHTML_Name = szDialogName + vDialogRoot.OptAct.WindowName + ".jsp"
      IF vDialogRoot.OptAct EXISTS
    
         //Because the menu actions can be created on separate windows from the control
         //actions, we need to make sure these actions are unique.  We will prefix a
         //"m" to the main menu actions and prefix a "sm" to the side menu actions.
         IF szReusableMenu = "Y"
            szActionName = "sm" + vDialogRoot.OptAct.Tag
         ELSE
            szActionName = vDialogRoot.OptAct.Tag
         END
         ActionType = vDialogRoot.OptAct.Type
      ELSE
         szActionName = ""
         ActionType = 0
      END

      
      // If the window we are currently generating is the same window that this
      // side menu points to, then we want to set a class on this option.  The
      // reason is so that we can tell which side menu option the user has
      // selected.
      IF  vDialogRoot.OptAct.WindowName =  vDialog.Window.Tag
         szClass = "class=^sideselected^ "
      ELSE
         szClass = ""
      END

      szWriteBuffer = "<%"
      szOptionTag = vDialogRoot.Option.Tag
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   nRC = vKZXMLPGO.cursor( ^DisableMenuOption^).setFirst( ^MenuOptionName^, ^" + szOptionTag + "^ );"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   if ( nRC < 0 )"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   {"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "%>"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )

      szWriteBuffer = "       <li><a href=^#^ " + szClass + " onclick=^" + szActionName + "()^>" + szNavigationTitle + "</a></li>"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      
      szWriteBuffer = "<%"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   }"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "%>"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 1 )
   END

   // This is for building a default menu?
   // Trying to get this file to compile.
   IF vDialogMenu != 0
      CreateViewFromViewForTask( vDialogMenu, vDialogMenu, 0 )
      SET CURSOR FIRST vDialogMenu.Menu WHERE vDialogMenu.Menu.ZKey = vDialogMenu.DfltMenu.ZKey
      FOR EACH vDialogMenu.OptAct WITHIN vDialogMenu.Menu
         szNavigationTitle = vDialogMenu.Option.Text
         szDialogName = vDialogMenu.OptAct.DialogName
         IF szDialogName = ""
            szDialogName = "NoDialogName"
         END

      // szHTML_Name = szDialogName + vDialogMenu.OptAct.WindowName + ".jsp"
         IF vDialogMenu.OptAct EXISTS
            szActionName = vDialogMenu.OptAct.Tag
            ActionType = vDialogMenu.OptAct.Type
         ELSE
            szActionName = ""
            ActionType = 0
         END

         // If the window we are currently generating is the same window that this
         // side menu points to, then we want to set a class on this option.  The
         // reason is so that we can tell which side menu option the user has
         // selected.
         IF  vDialogMenu.OptAct.WindowName = vDialog.Window.Tag
            szClass = "class=^sideselected^ "
         ELSE
            szClass = ""
         END

         szWriteBuffer = "<%"
         WL_QC( vDialogMenu, lFile, szWriteBuffer, "^", 0 )
         szOptionTag = vDialogMenu.Option.Tag
         szOptionTag = vDialogMenu.Option.Tag
         szWriteBuffer = "   nRC = vKZXMLPGO.cursor( ^DisableMenuOption^ ).setFirst( ^MenuOptionName^, ^" + szOptionTag + "^ );"
         WL_QC( vDialogMenu, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "   if ( nRC < 0 )"
         WL_QC( vDialogMenu, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "   {"
         WL_QC( vDialogMenu, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "%>"
         WL_QC( vDialogMenu, lFile, szWriteBuffer, "^", 0 )

         szWriteBuffer = "       <li><a href=^#^ " + szClass + " onclick=^" + szActionName + "()^>" + szNavigationTitle + "</a></li>"
         WL_QC( vDialogMenu, lFile, szWriteBuffer, "^", 0 )
         
         szWriteBuffer = "<%"
         WL_QC( vDialogMenu, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "   }"
         WL_QC( vDialogMenu, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "%>"
         WL_QC( vDialogMenu, lFile, szWriteBuffer, "^", 1 )
      END

      DropView( vDialogMenu )
   END

   // Division ending for Navigation Bar.
   szWriteBuffer = "   </ul>"
   WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = "</div> <!-- sidenavigation -->"
   WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 1 )
   IF vDialogRoot.Dialog.WEB_LeftSideInclude != ""
      //szWriteBuffer = "<%@ include file=^./include/leftcontent.inc^ %>"
      szWriteBuffer = "<!-- left content include file -->"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "<%@ include file=^" + vDialogRoot.Dialog.WEB_LeftSideInclude + "^ %>"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 1 )
   END
   szWriteBuffer = "</div>  <!-- leftcontent -->"
   WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = ""
   WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )

   /*
   szCSS_Class = vDialog.Window.CSS_Class
   IF szCSS_Class = ""
      // Begin the division for the main body content.
      szWriteBuffer = "<div id=^content^>"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 1 )
   END
   */

END



/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: GenJSPJ_CrteCalendar
//
/////////////////////////////////////////////////////////////////////////////
GLOBAL OPERATION
GenJSPJ_CrteCalendar( VIEW vDialog BASED ON LOD TZWDLGSO,
                     INTEGER          lFile,
                     STRING ( 10000 ) szWriteBuffer,
                     STRING ( 50 )    szIndent,
                     STRING ( 32 )    szCtrlTag,
                     STRING ( 1 )     szTableRowFlag,
                     STRING ( 20 )    szJustify,
                     STRING ( 1 )     szNoPositioning,
                     INTEGER          lOffsetX,
                     INTEGER          lOffsetY )

   // Format a CALENDAR control.

   STRING ( 256 ) szStyle
   STRING ( 256 ) szClass
   STRING ( 10 )  szDisabled
   STRING ( 10 )  szWidth
   STRING ( 10 )  szHeight
   STRING ( 10 )  szX_Pos
   STRING ( 10 )  szY_Pos
   STRING ( 16 )  szTabIndex
   DECIMAL        DLUnits

   szWriteBuffer = "<% strErrorMapValue = ^^;"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   SET CURSOR FIRST vDialog.CtrlMapLOD_Attribute WITHIN vDialog.Control
   IF RESULT >= zCURSOR_SET
      szWriteBuffer = "   " + vDialog.CtrlMapView.Name + " = " +
                      "task.getViewByName( ^" + vDialog.CtrlMapView.Name + "^ );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   if ( " + vDialog.CtrlMapView.Name + " == null )"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      " + vDialog.CtrlMapView.Name +
               ".log().debug( ^Invalid View: ^, ^" + szCtrlTag + "^ );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   else"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   {"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      nRC = " + vDialog.CtrlMapView.Name +
                      ".cursor( ^" +
                      vDialog.CtrlMapRelatedEntity.Name + "^ ).checkExistenceOfEntity();"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      if ( nRC >= 0 )"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         strErrorMapValue = " +
                      vDialog.CtrlMapView.Name +
                      ".cursor( ^" +
               vDialog.CtrlMapRelatedEntity.Name + "^ ).getStringFromAttribute( ^" + 
               vDialog.CtrlMapER_Attribute.Name + "^, strDateFormat );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   }"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "%>"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

      // We will set the height to the constant 32 px.
      PIX_PER_DU( vDialog, DLUnits )
      zIntegerToString( szWidth, 10, vDialog.Control.SZDLG_X * DLUnits )
      szHeight = "32"
      szStyle = "style=^width:" + szWidth + "px;height:" + szHeight + "px;"
      
      // If szNoPositioning is null then we are using absolute positioning when creating controls.
      IF  szNoPositioning = "" 

         zIntegerToString( szX_Pos, 10, vDialog.Control.PSDLG_X * DLUnits )
         zIntegerToString( szY_Pos, 10, vDialog.Control.PSDLG_Y * DLUnits )
         szStyle = szStyle + "position:absolute;left:" + szX_Pos + "px;" + "top:" + szY_Pos + "px;^ "
      ELSE   
         szStyle = szStyle + "^ "
      END


      CreateTabIndexString( vDialog, szTabIndex )

      CreateDisabledString( vDialog, szDisabled )

      // Multiple class names must be separated by white space characters.
      szClass = vDialog.Control.CSS_Class

      szWriteBuffer = "<span " + szStyle + ">"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      IF szClass = ""
         szWriteBuffer = "   <input name=^" + szCtrlTag + "^ id='" + szCtrlTag + "' " + szDisabled +
                             "style=^width:80px^ type=^text^ value=^<%=strErrorMapValue%>^ " + szTabIndex + " />"
      ELSE
         szWriteBuffer = "   <input class=^" + szClass + "^ name=^" + szCtrlTag + "^ id='" + szCtrlTag + "' " + szDisabled +
                             "style=^width:80px^ type=^text^ value=^<%=strErrorMapValue%>^ " + szTabIndex + " />"
      END
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   <img src=^images/scw.gif^ title=^Select Date^ alt=^Select Date^"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "        onclick=^scwShow( document.getElementById( '" + szCtrlTag + "' ), this );^ " + szTabIndex + " />"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "</span>"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

   END
END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: GenJSPJ_CrteCheckBox
//
/////////////////////////////////////////////////////////////////////////////
GLOBAL OPERATION
GenJSPJ_CrteCheckBox( VIEW vDialog BASED ON LOD TZWDLGSO,
                     INTEGER          lFile,
                     STRING ( 10000 ) szWriteBuffer,
                     STRING ( 50 )    szIndent,
                     STRING ( 32 )    szCtrlTag,
                     STRING ( 1 )     szTableRowFlag,
                     STRING ( 20 )    szJustify,
                     STRING ( 1 )     szNoPositioning,
                     INTEGER          lOffsetX,
                     INTEGER          lOffsetY )

   // Format an CHECKBOX control.
   STRING ( 256 ) szStyle
   STRING ( 256 ) szClass
   STRING ( 256 ) szTitle
   STRING ( 256 ) szTitleHTML
   STRING ( 10 )  szDisabled
   STRING ( 100 ) szPosition
   STRING ( 16 )  szTabIndex
   STRING ( 20 )  szSpaces

   szWriteBuffer = "<%   strErrorMapValue = ^^;"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

   IF vDialog.CtrlMapView EXISTS
      szWriteBuffer = "   " + vDialog.CtrlMapView.Name + " = " +
                      "task.getViewByName( ^" + vDialog.CtrlMapView.Name + "^ );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   if ( " + vDialog.CtrlMapView.Name + " == null )"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      " + vDialog.CtrlMapView.Name +
                      ".log().debug( ^Invalid View: ^, ^" + szCtrlTag + "^ );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   else"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   {"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      nRC = " + vDialog.CtrlMapView.Name +
                      ".cursor( ^" +
                      vDialog.CtrlMapRelatedEntity.Name + "^ ).checkExistenceOfEntity();"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      if ( nRC >= 0 )"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         strRadioGroupValue = " +
                      vDialog.CtrlMapView.Name + ".cursor( ^" +
                      vDialog.CtrlMapRelatedEntity.Name + "^ ).getStringFromAttribute( ^" +
                      vDialog.CtrlMapER_Attribute.Name + "^ );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   }"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
   END

   szWriteBuffer = "   if ( strRadioGroupValue.equals( ^" +
                   vDialog.Control.RadioOrCheckboxValue + "^ ) )"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      strErrorMapValue = ^checked=\^checked\^^;"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = "%>"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

   CreateTabIndexString( vDialog, szTabIndex )
   
   // If this window is being generated with no positioning then
   // do not create the position in the style.
   IF  szNoPositioning = ""
      CreateAbsolPosString( vDialog, szPosition, lOffsetX, lOffsetY )
   END
   
   IF vDialog.Control.VisibleBorder = "Y"
      szPosition = szPosition + "border:'2px solid';border-style:'groove';"
   END

   szStyle = "style=^" + szPosition + "^" + szTabIndex

   CreateDisabledString( vDialog, szDisabled )

   //If we put a title on the control, when the mouse is hovered over the control, this text will display.
   szTitleHTML = ""
   szTitle = vDialog.Control.DIL_Text
   IF szTitle = ""
      szTitleHTML = ""
   ELSE
      szTitleHTML = " title=^" + szTitle + "^ "
   END

   IF vDialog.EventAct EXISTS
      szWriteBuffer = "<input type=^checkbox^ name=^" + szCtrlTag + "^ id=^" + szCtrlTag + "^ " + szDisabled +
                      " value=^" + vDialog.Control.RadioOrCheckboxValue +
                      "^ <%=strErrorMapValue%> " + szTitleHTML + szStyle + " onclick=^" + vDialog.EventAct.Tag + "( )^>"
   ELSE
      szWriteBuffer = "<input type=^checkbox^ name=^" + szCtrlTag + "^ id=^" + szCtrlTag + "^ " + szDisabled +
                      " value=^" + vDialog.Control.RadioOrCheckboxValue +
                      "^ <%=strErrorMapValue%> " + szTitleHTML + szStyle + ">"
   END
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

   // If this window is being generated with no positioning then
   // do not create the position in the style.
   IF  szNoPositioning = "Y"
      CreateNoPosStyleString( vDialog, szStyle, "" )
      // If we aren't putting in absolute positioning, make sure that there is a little space between
      // the checkbox and the text.
      szSpaces = "&nbsp "
   ELSE 
      CreateAbsolStyleString( vDialog, szStyle, 30 + lOffsetX, lOffsetY, "" )
      szSpaces = ""
   END
   szClass = vDialog.Control.CSS_Class

   IF szClass = ""
      szWriteBuffer = "<span " + szTitleHTML + szStyle + ">" + szSpaces + vDialog.Control.Text + "</span>"
   ELSE
      szWriteBuffer = "<span class=^" + szClass + "^ " + szTitleHTML + szStyle + ">" + szSpaces + vDialog.Control.Text + "</span>"
   END
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: GenJSPJ_CrteComboBox
//
/////////////////////////////////////////////////////////////////////////////
GLOBAL OPERATION
GenJSPJ_CrteComboBox( VIEW vDialog BASED ON LOD TZWDLGSO,
                     INTEGER          lFile,
                     STRING ( 10000 ) szWriteBuffer,
                     STRING ( 50 )    szIndent,
                     STRING ( 32 )    szCtrlTag,
                     STRING ( 1 )     szTableRowFlag,
                     STRING ( 1 )     szNoPositioning,
                     INTEGER          lOffsetX,
                     INTEGER          lOffsetY )

   // Combo boxes on OUTPUT

   // There are two kinds of combo boxes on output.
   // 1. Domain combo boxes, which need to get the individual table values
   //    from core calls.
   // 2. Select combo boxes (e.g.  Automatic Include, Set Foreign Key, etc.)
   //    which read the data values from an object, the same as a list box.
   // These two conditions are handled quite separately below, even though
   // the resulting HTML is basically the same.

   VIEW vList   BASED ON LOD TZWDLGSO  // identifies attribute mapping for list entries
   VIEW vEntity BASED ON LOD TZWDLGSO  // identifies entity mapping for list entries
   VIEW vScope  BASED ON LOD TZWDLGSO  // identifies scoping entity for list entries
   STRING ( 32 )  szContextName
   STRING ( 32 )  szScopingEntityName
   STRING ( 32 )  szListEntityName
   STRING ( 256 ) szStyle
   STRING ( 256 ) szClass
   STRING ( 256 ) szTitle
   STRING ( 256 ) szTitleHTML
   STRING ( 16 )  szTabIndex
   STRING ( 10 )  szWidth
   STRING ( 10 )  szSelectAction
   STRING ( 10 )  szSelectFunction
   STRING ( 10 )  szHeight
   STRING ( 10 )  szX_Pos
   STRING ( 10 )  szY_Pos
   STRING ( 10 )  szDisabled
   DECIMAL        DLUnits
   INTEGER        lSubtype
   SHORT          nRC

   szStyle = "width:" + szWidth + "px; height:" + szHeight + "px;"
   szClass = vDialog.Control.CSS_Class

   //If we put a title on the control, when the mouse is hovered over the control, this text will display.
   szTitleHTML = ""
   szTitle = vDialog.Control.DIL_Text
   IF szTitle != ""
      szTitleHTML = " title=^" + szTitle + "^ "
   END

   CreateTabIndexString( vDialog, szTabIndex )
   // We will set the height to the constant 20 px.
   PIX_PER_DU( vDialog, DLUnits )
   zIntegerToString( szWidth, 10, vDialog.Control.SZDLG_X * DLUnits )
   szHeight = "20"
   // The height used to be hard coded but we took that out!!!
   //szStyle = "style=^width:" + szWidth + "px;height:" + szHeight + "px;"
   szStyle = "style=^width:" + szWidth + "px;"

   
   // If szNoPositioning is null then we are using absolute positioning.
   IF  szNoPositioning = ""  
      
      zIntegerToString( szX_Pos, 10, vDialog.Control.PSDLG_X * DLUnits )
      zIntegerToString( szY_Pos, 10, vDialog.Control.PSDLG_Y * DLUnits )      
      
      szStyle = szStyle + "position:absolute;" + "left:" + szX_Pos + "px;" + "top:" + szY_Pos + "px;^ "
      // CreateAbsolStyleString( vDialog, szStyle, lOffsetX, lOffsetY, "" )
   ELSE
      szStyle = szStyle + "^ "
   END

   szStyle = szStyle + szTabIndex

   szWriteBuffer = "<% strErrorMapValue = ^^;  %>"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

   lSubtype = vDialog.Control.Subtype
   nRC = AreBitsSetInFlag( lSubtype, 61440 ) // 0x0000F000
   IF nRC = 0   // IF vDialog.Control.Subtype < 12000  ==> Domain Combobox

      // Domain type combo box

      szWriteBuffer = "<input name=^h" + szCtrlTag + "^ id=^h" + szCtrlTag + "^ type=^hidden^ value=^0^ >"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

      // The Select Action is either onfocusout or onchange depending on the following.
      // 1. If no Action, use onchange because this allows using keystrokes in the control.
      // 2. If Action is SelectChange, use onchange.
      // 3. If Action is SelectEnd, use onblur
      IF vDialog.Event EXISTS
         IF vDialog.Event.Type = 1
            szSelectAction   = "onchange"
            szSelectFunction = "OnChange"
         ELSE
            szSelectAction   = "onblur"
            szSelectFunction = "OnBlur"
         END
      ELSE
         szSelectAction   = "onchange"
         szSelectFunction = "OnChange"
      END

      CreateDisabledString( vDialog, szDisabled )

      IF szClass = ""
         szWriteBuffer = "<select name=^" + szCtrlTag + "^ id=^" + szCtrlTag + "^ size=^1^ " + szTitleHTML + szStyle + szDisabled + szSelectAction + "=^" +
                         szCtrlTag + szSelectFunction + "( )^" + ">"
      ELSE
         szWriteBuffer = "<select class=^" + szClass + "^ name=^" + szCtrlTag + "^ id=^" + szCtrlTag + "^ size=^1^ " + szTitleHTML + szStyle + szDisabled + szSelectAction + "=^" +
                         szCtrlTag + szSelectFunction + "( )^" + ">"
      END
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

      szWriteBuffer = "<%"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      IF vDialog.CtrlMapView EXISTS
         szWriteBuffer = "   " + vDialog.CtrlMapView.Name + " = " +
                      "task.getViewByName( ^" + vDialog.CtrlMapView.Name + "^ );"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "   if ( " + vDialog.CtrlMapView.Name + " == null )"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "   {"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

         // We get each table value from a core call.
         IF vDialog.CtrlMapLOD_Attribute EXISTS
         
            IF vDialog.CtrlMapContext EXISTS
               szContextName = vDialog.CtrlMapContext.Name
            ELSE
               szContextName = ""
            END
         
            szWriteBuffer = "      int    nRowCnt= 0;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            
            szWriteBuffer = "      List<TableEntry> list = getTableDomainValues(null, ^" + vDialog.CtrlMapRelatedEntity.Name + "^, ^" + 
                            vDialog.CtrlMapER_Attribute.Name + "^, ^" + szContextName + "^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            
            // Get the current value of the combo box.
            szWriteBuffer = "      strComboCurrentValue = " + vDialog.CtrlMapView.Name +
                     ".cursor( ^" +
                     vDialog.CtrlMapRelatedEntity.Name + "^ ).getStringFromAttribute( ^" +
                     vDialog.CtrlMapER_Attribute.Name + "^, ^" + szContextName + "^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            
            
            szWriteBuffer = "      for ( TableEntry entry : list )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         String internalValue = entry.getInternalValue();"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         String externalValue = entry.getExternalValue();"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      
/*      
    public void TestKellysJspCode()
    {
       List<TableEntry> list = getTableDomainValues(null, "entityName", "attribName", "contextName");
       for ( TableEntry entry : list )
       {
          String externalValue = entry.getExternalValue();
          String internalValue = entry.getInternalValue();
       }
       
    }
*/      

            szWriteBuffer = "      int k;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      int nFirst;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            szWriteBuffer = "      if ( nRowCnt > 0 ) "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            IF vDialog.CtrlMapER_Attribute.NotNull = "Y"
               // Generate code when attribute IS required.
               szWriteBuffer = "      // Code for required attribute, which doesn't allow a blank entry."
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         nFirst = (ComboVector.elementAt( 0 ) == ^^) ? 1 : 0;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            ELSE
               // Generate code when attribute is NOT required.
               szWriteBuffer = "      // Code for NOT required attribute, which makes sure a blank entry exists."
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      if ( ComboVector.elementAt( 0 ) != ^^ )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "            if ( strComboCurrentValue == ^^ )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "            {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "%>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "            <option selected=^selected^ value=^^></option>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "<%"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "            }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "            else"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "            {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "%>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "            <option value=^^></option>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "<%"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "            }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

               szWriteBuffer = "         nFirst = 0;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            END

            szWriteBuffer = "         for ( k = nFirst; k < nRowCnt; k++ )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            strErrorMapValue = (String) ComboVector.elementAt( k );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            // The following if statement eliminates a null value, which would be the second null in the combo box.
            szWriteBuffer = "            if ( strErrorMapValue.length( ) != 0 )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               if ( strComboCurrentValue.equals( strErrorMapValue ) )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "%>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                  <option selected=^selected^ value=^<%=strErrorMapValue%>^><%=strErrorMapValue%></option>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<%"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               else"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "%>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                  <option value=^<%=strErrorMapValue%>^><%=strErrorMapValue%></option>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<%"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         END
      END

      szWriteBuffer = "         }"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      } //if ( nRowCnt > 0 )"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   }"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "%>"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "</select>"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

   ELSE  //kelly1
      // Select type combo box
      CreateViewFromViewForTask( vList, vDialog, 0 )
      SET CURSOR NEXT vList.CtrlMap
      CreateViewFromViewForTask( vEntity, vList, 0 )
      SET CURSOR NEXT vEntity.CtrlMap
      CreateViewFromViewForTask( vScope, vEntity, 0 )
      SET CURSOR NEXT vScope.CtrlMap

      // The Select Action is either onblur or onchange depending on the following.
      // 1. If no Action, use onchange because this allows using keystrokes in the control.
      // 2. If Action is SelectChange, use onchange.
      // 3. If Action is SelectEnd, use onfocusout.
      IF vDialog.Event EXISTS
         IF vDialog.Event.Type = 1
            szSelectAction   = "onchange"
            szSelectFunction = "OnChange"
         ELSE
            szSelectAction   = "onblur"
            szSelectFunction = "OnBlur"
         END
      ELSE
         szSelectAction = "onchange"
         szSelectFunction = "OnChange"
      END
      IF szClass = ""
         szWriteBuffer = "<select name=^" + szCtrlTag + "^ id=^" + szCtrlTag + "^ size=^1^" + szTitleHTML + szStyle + szDisabled + szSelectAction + "=^" +
                         szCtrlTag + szSelectFunction + "( )^" + ">"
      ELSE
         szWriteBuffer = "<select class=^" + szClass + "^ name=^" + szCtrlTag + "^ id=^" + szCtrlTag + "^ size=^1^" + szTitleHTML + szStyle + szDisabled + szSelectAction + "=^" +
                         szCtrlTag + szSelectFunction + "( )^" + ">"
      END
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

      szWriteBuffer = "<%"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      IF vDialog.CtrlMapView EXISTS
         szWriteBuffer = "   " + vList.CtrlMapView.Name + " = " +
                         "task.getViewByName( ^" + vList.CtrlMapView.Name + "^ );"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "   if ( " + vList.CtrlMapView.Name + " == null )"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "   {"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         strComboCurrentValue = ^^;"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      View v" + szCtrlTag + ";"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

         // If mapping is specified, set up the value to be used in selecting
         // the correct entry.
         IF vDialog.CtrlMapLOD_Attribute EXISTS
            szWriteBuffer = "      " + vDialog.CtrlMapView.Name + " = " +
                            "task.getViewByName( ^" + vDialog.CtrlMapView.Name +
                            "^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      if ( " + vDialog.CtrlMapView.Name + " == null )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         nRC = " + vDialog.CtrlMapView.Name + ".cursor( ^" +
                            vDialog.CtrlMapRelatedEntity.Name + "^ ).checkExistenceOfEntity();"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         if ( nRC >= 0 )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            IF vDialog.CtrlMapContext EXISTS
               szContextName = vDialog.CtrlMapContext.Name
            ELSE
               szContextName = ""
            END
            szWriteBuffer = "            strComboCurrentValue = " + vDialog.CtrlMapView.Name +
                     ".cursor( ^" +
                     vDialog.CtrlMapRelatedEntity.Name + "^ ).getStringFromAttribute( ^" +
                     vDialog.CtrlMapER_Attribute.Name + "^, ^" + szContextName + "^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      }"
         ELSE
            szWriteBuffer = "      strComboCurrentValue = ^^;"
         END
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

         // See if a list entity has been specified, and if so, use it.
         IF vEntity.CtrlMapLOD_Entity EXISTS
            szListEntityName = vEntity.CtrlMapLOD_Entity.Name
         ELSE
            szListEntityName = vList.CtrlMapRelatedEntity.Name
         END

         // See if a scoping entity has been specified, and if so, use it.
         lSubtype = vDialog.Control.Subtype
         lSubtype = IsFlagSequenceSet( lSubtype, zCOMBOBOX_SCOPE_OI )
         IF lSubtype = 0
            IF vScope.CtrlMapLOD_Entity EXISTS
               szScopingEntityName = "^" + vScope.CtrlMapLOD_Entity.Name + "^"
            ELSE
               szScopingEntityName = ""
            END
         END

         szWriteBuffer = "      v" + szCtrlTag + " = " + vList.CtrlMapView.Name + ".newView();"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      ComboCount = 0;"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      strComboCountCurrentValue = ^0^;"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

         // Auto Include
         IF vDialog.Control.Subtype >= 20480 AND vDialog.Control.Subtype <= 21252   // IF Auto Include
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            // For Auto Include, we are automatically putting a blank entry as the first entry in the 
            // combobox.  With this in mind, there is code in DoInputMapping that assumes the first
            // entry in a combobox is null (or blank).  What if the user doesn't want a blank entry?
            // and wants to use the "No null in list" checkbox in the painter.  I would need to
            // change this code but I'm not sure how because I can't tell from DoInputMapping what
            // the value of combobox.selectedindex[0] is, I only know they selected the index 0.
            szWriteBuffer = "      // For Auto Include, process null entry."
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      ComboCount++;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      if ( strComboCurrentValue == null )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "%>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         <option selected=^selected^></option>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<%"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      else"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "%>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         <option></option>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<%"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
         END

         IF lSubtype = 0
            szWriteBuffer = "      nRC = v" + szCtrlTag + ".cursor( ^" +
                                         szListEntityName + "^).setFirst( " + szScopingEntityName + " );"
         ELSE
            szWriteBuffer = "      nRC = v" + szCtrlTag + ".SetCursorScopeOI( ^" +
                                         szListEntityName + "^, 1 ); // first" // zPOS_FIRST
         END

         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      while ( nRC >= 0 )"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      {"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         IF vList.CtrlMapLOD_Attribute EXISTS
            IF vList.CtrlMapContext EXISTS
               szContextName = vList.CtrlMapContext.Name
            ELSE
               szContextName = ""
            END

            szWriteBuffer = "         strErrorMapValue = v" + szCtrlTag +
                            ".cursor( ^" +
                            vList.CtrlMapRelatedEntity.Name + "^ ).getStringFromAttribute( ^" +
                            vList.CtrlMapER_Attribute.Name + "^, ^" +
                            szContextName + "^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         END

         szWriteBuffer = "         if ( strComboCurrentValue.equals( strErrorMapValue ) )"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         {"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "%>"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "            <option selected=^selected^><%=strErrorMapValue%></option>"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "<%"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "            strComboCountCurrentValue = Integer.toString( ComboCount );"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         }"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         else"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         {"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "%>"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "            <option><%=strErrorMapValue%></option>"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "<%"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         }"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
         szWriteBuffer = "         ComboCount++;"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         IF lSubtype = 0
            szWriteBuffer = "         nRC =  v" + szCtrlTag +
                            ".cursor( ^" + szListEntityName +
                            "^ ).setNextContinue( " + szScopingEntityName + " );"
         ELSE
            szWriteBuffer = "         nRC =  v" + szCtrlTag +
                            ".SetCursorScopeOI( ^" + szListEntityName + "^, 3 ); // next" // zPOS_NEXT
         END

         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         DropView( vList )
         DropView( vEntity )
         DropView( vScope )
      END

      szWriteBuffer = "      }"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
      szWriteBuffer = "      v" + szCtrlTag + ".drop();"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

      szWriteBuffer = "   }"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "%>"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "</select>"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "<input name=^h" + szCtrlTag + "^ id=^h" + szCtrlTag + "^ type=^hidden^ value=^<%=strComboCountCurrentValue%>^ >"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
   END

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: GenJSPJ_CrteCtrlsRadio
//
/////////////////////////////////////////////////////////////////////////////
GLOBAL OPERATION
GenJSPJ_CrteCtrlsRadio( VIEW vDialog BASED ON LOD TZWDLGSO,
                       INTEGER          lFile,
                       STRING ( 10000 ) szWriteBuffer,
                       STRING ( 50 )    szIndent,
                       STRING ( 32 )    szRadioGroupName,
                       STRING ( 1 )     szNoPositioning,
                       INTEGER          lOffsetX,
                       INTEGER          lOffsetY )

   STRING ( 256 ) szStyle
   STRING ( 256 ) szClass
   STRING ( 256 ) szTitle
   STRING ( 256 ) szTitleHTML
   STRING ( 10 )  szDisabled
   STRING ( 16 )  szPosition
   STRING ( 16 )  szTabIndex
   STRING ( 32 )  szActionName
   INTEGER        nRC

   // Process the individual Radio Buttons for a Radio Button Group.
   FOR EACH vDialog.Control
      szActionName = ""
      IF vDialog.EventAct EXISTS
         szActionName = vDialog.EventAct.Tag
         nRC = zstrcmpi( szActionName, "alt-f4" )
         IF nRC = 0
            szActionName = "AltF4"
         END
      END

      szWriteBuffer = "<% strErrorMapValue = ^^;"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   if ( strRadioGroupValue.equals( ^" +
                               vDialog.Control.RadioOrCheckboxValue + "^ ) )"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      strErrorMapValue = ^checked=\^checked\^^;  %>"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

      CreateTabIndexString( vDialog, szTabIndex )
      // If this window is being generated with no positioning then
      // do not create the position in the style.
      IF  szNoPositioning = ""
         CreateAbsolPosString( vDialog, szPosition, lOffsetX, lOffsetY )
      END
      //CreateAbsolPosString( vDialog, szPosition, 0, 0 )
      CreateDisabledString( vDialog, szDisabled )
      FixStyleString( szStyle, szPosition, "", "" )

      szStyle = szStyle + szTabIndex
   // szStyle = " style=^position:absolute;LEFT:" + szX + ";TOP:" + szY + ";^ "
      IF  szActionName != ""
         szWriteBuffer = "   <input type=^radio^ name=^" + szRadioGroupName + "^ id=^" + szRadioGroupName +
                         "^ value=^" + vDialog.Control.RadioOrCheckboxValue +
                         "^ <%=strErrorMapValue%> " + szStyle + szDisabled + " onclick=^" + szActionName + "( )^  >"
      ELSE
         szWriteBuffer = "   <input type=^radio^ name=^" + szRadioGroupName + "^ id=^" + szRadioGroupName +
                         "^ value=^" + vDialog.Control.RadioOrCheckboxValue +
                         "^ <%=strErrorMapValue%> " + szStyle + szDisabled + " >"
      END

      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

      IF szNoPositioning = "Y"
         CreateNoPosStyleString( vDialog, szStyle, "")
      ELSE
         CreateAbsolStyleString( vDialog, szStyle, 30 + lOffsetX, lOffsetY, "" )
      END

      //If we put a title on the control, when the mouse is hovered over the control, this text will display.
      szTitleHTML = ""
      szTitle = vDialog.Control.DIL_Text
      IF szTitle != ""
         szTitleHTML = " title=^" + szTitle + "^ "
      END

      szClass = vDialog.Control.CSS_Class
      IF szClass = ""
         szWriteBuffer = "   <span " + szTitleHTML + szStyle + ">" + vDialog.Control.Text + "</span>"
      ELSE
         szWriteBuffer = "   <span class=^" + szClass + "^ " + szTitleHTML + szStyle + ">" + vDialog.Control.Text + "</span>"
      END

      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   END

END



/*************************************************************************************************
**    
**    OPERATION: GenJSPJ_CrteGroupTable
**    
*************************************************************************************************/
GLOBAL OPERATION
GenJSPJ_CrteGroupTable(  VIEW vDialog BASED ON LOD TZWDLGSO,
                        VIEW vGroupParent BASED ON LOD TZWDLGSO, 
                        VIEW vDialogRoot BASED ON LOD TZWDLGSO,
                        INTEGER          lFile,
                        STRING ( 10000 ) szWriteBuffer,
                        STRING ( 100 )   szIndent,
                        INTEGER          TableRowCnt,
                        STRING ( 1 )     szNoPositioning )
                        
   INTEGER        X_Size
   INTEGER        Y_Size
   INTEGER        X_Pos
   INTEGER        Y_Pos
   INTEGER        LastY_Pos
   INTEGER        iHighestColCnt
   INTEGER        iColCnt
   INTEGER        nRC
   INTEGER        iColWidth
   INTEGER        lMaxStringLength
   INTEGER        lTemp
   INTEGER        lStyleX
   INTEGER        Size
   INTEGER        lOffsetX
   INTEGER        lOffsetY
   DECIMAL        DLUnits
   STRING ( 10 )  szColCnt
   STRING ( 10 )  szWidth
   STRING ( 10 )  szHeight
   STRING ( 50 )  szCtrlTag
   STRING ( 50 )  szParentCtrlTag
   STRING ( 85 )  szHTMLCtrlID
   STRING ( 256 ) szTitle
   STRING ( 256 ) szTitleHTML
   STRING ( 100 ) szStyle
   STRING ( 256 ) szClass
   STRING ( 32 )  szActionName
   STRING ( 50 )  szControlType
   STRING ( 16 )  szTabIndex
   STRING ( 256 ) szText
   STRING ( 32 )  szContextName
   STRING ( 10 )  szMaxStringLength
   STRING ( 32 )  szSize
   STRING ( 256 ) szAbsoluteStyle

   STRING ( 1 )   szNoHeightFlag
   STRING ( 1 )   szNoWidthFlag
   STRING ( 1 )   szSpanFlag
   STRING ( 1 )   szDivFlag
   STRING ( 1 )   szScrollableFlag
   STRING ( 1 )   szScrollingTable
   STRING ( 1 )   szGroupIsTable
   STRING ( 100 ) szIndentGroup
   STRING ( 50 )  szWebCtrlType

   LastY_Pos = 0
   iColCnt = 0
   iHighestColCnt = 0
   szIndent = szIndent + "   "
   
   X_Size  = vGroupParent.Control.SZDLG_X
   Y_Size  = vGroupParent.Control.SZDLG_Y
   szParentCtrlTag = vGroupParent.Control.Tag
   
   IF vGroupParent.Control.CSS_Class != ""
      szClass = " class=^" + vGroupParent.Control.CSS_Class + "^"
   ELSE
      szClass = ""  
   END
   
   IF  vDialog.Control EXISTS 
      SET CURSOR  FIRST vDialog.Control
      LastY_Pos = vDialog.Control.PSDLG_Y 
   END
                           
   // Loop through each Control within this group.  Determine what row has the largest
   // number of controls.  This will determine how many columns our table will have.
   FOR EACH vDialog.Control
   
      IF  LastY_Pos < vDialog.Control.PSDLG_Y
       
         IF  iColCnt > iHighestColCnt
            iHighestColCnt = iColCnt
         END
         iColCnt = 0
      END
      
      iColCnt = iColCnt + 1
      
      LastY_Pos = vDialog.Control.PSDLG_Y
   END
   
   //TraceLineI("**** Highest Col Count *** ", iHighestColCnt )
   zIntegerToString( szColCnt, 10, iHighestColCnt )
   PIX_PER_DU( vDialog, DLUnits )
   zIntegerToString( szWidth, 10, X_Size * DLUnits )
   zIntegerToString( szHeight, 10, Y_Size * DLUnits )
   
   // 05/27/09 - Currently, we never put in a height.  Would we want to do this?????!!!.
   IF  szNoPositioning = "Y"
         
      szNoWidthFlag = "" 
      SET CURSOR FIRST vGroupParent.WebControlProperty WHERE vGroupParent.WebControlProperty.Name = "No Width"
      IF RESULT >= zCURSOR_SET
         szNoWidthFlag = "Y"
      END
   END
   
   // Create a div around the whole table.  This should probably be float.
   //szWriteBuffer = "<div style=^float:left;width:" + szWidth + "px;height:" + szHeight + "px;^" + szClass + ">"
   // KJS 09/11/09 - Neither the table or the div had an id or name.  I am not sure whether I should put the 
   // id on the <table we create or on the <div> but I will put it on the div.
   szWriteBuffer = "<div id=^" + szParentCtrlTag + "^ name=^" + szParentCtrlTag + "^ style=^float:left;"
   IF szNoWidthFlag = ""
      szWriteBuffer = szWriteBuffer + "width:" + szWidth + "px;"
   END
   szWriteBuffer = szWriteBuffer + "^ " + szClass + ">"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
   
   // Now create the table with the proper number of columns.
   //szWriteBuffer = "<table cols=" szColCount + " name=^" + szCtrlTag + "^ id=^" + szCtrlTag + "^>"   
   szWriteBuffer = "<table cols=" + szColCnt 
   IF szNoWidthFlag = ""
      szWriteBuffer = szWriteBuffer + " style=^width:" + szWidth + "px;^ "
   END
   szWriteBuffer = szWriteBuffer + " class=^grouptable^>"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
   
         szWriteBuffer = "<tr>"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   
   LastY_Pos = 0
   IF  vDialog.Control EXISTS 
      SET CURSOR  FIRST vDialog.Control
      LastY_Pos = vDialog.Control.PSDLG_Y 
   END
   
   
   // Loop through the controls, placing each control in a different column.
   // When the Y_Pos has changed, we need to create a new row in the table.
   FOR EACH vDialog.Control
   
      // We are onto a new row
      IF  LastY_Pos < vDialog.Control.PSDLG_Y 
            
         // If LastY_Pos is 0 then we are on the first control.
         // If this wasn't the very first row, then 
         // create the end tag for the last row.
         //IF  LastY_Pos != 0
            // If the previous row didn't have as many controls as there are 
            // table columns, then we need to create a blank column
            LOOP  WHILE iColCnt < iHighestColCnt
               szWriteBuffer = "<td>&nbsp</td>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               iColCnt = iColCnt + 1
            END
            szWriteBuffer = "</tr>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         //END
         
         szWriteBuffer = "<tr>"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         // Since we are on a new row, reset the column count.
         iColCnt = 0
      END
  
      szCtrlTag = vDialog.Control.Tag
      szHTMLCtrlID = " id=^" + szCtrlTag + "^ name=^" + szCtrlTag + "^ "
      szControlType = vDialog.ControlDef.Tag
      CreateNoPosStyleString( vDialog, szStyle, "" )
      
      X_Pos = vDialog.Control.PSDLG_X 
      //TraceLineI("*** Control Start position *** ", vDialog.Control.PSDLG_X )     
      LastY_Pos = vDialog.Control.PSDLG_Y

      // We want to find out how wide this column should bed
      nRC = SetCursorNextEntity( vDialog, "Control", "" )
      iColWidth = 0
      IF  nRC >= zCURSOR_SET AND LastY_Pos = vDialog.Control.PSDLG_Y
         //TraceLineI("*** Next Control Start position *** ", vDialog.Control.PSDLG_X )     
         iColWidth = vDialog.Control.PSDLG_X - X_Pos
      END
      
      IF  nRC >= zCURSOR_SET 
         nRC = SetCursorPrevEntity( vDialog, "Control", "" )
      END
      
      IF  iColWidth = 0
         //TraceLineI("*** Width is width of control *** ", vDialog.Control.SZDLG_X )     
         iColWidth = vDialog.Control.SZDLG_X       
      END
      
      szClass = vDialog.Control.CSS_Class
      IF vDialog.Control.CSS_Class != ""
         szClass = " class=^" + vDialog.Control.CSS_Class + "^ "
      ELSE
         szClass = ""
      END
      
      //KELLY0210
      zIntegerToString( szWidth, 10, iColWidth * DLUnits )
      szWriteBuffer = "<td  valign=^top^ " + szClass + "style=^width:" + szWidth + "px;^>"
      //szWriteBuffer = "<td>"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      
      //****************************************************************************
      
      /*
      IF szControlType = "GroupBox"  // Grid or Table
      
         OrderEntityForView( vDialog, "CtrlCtrl", "PSDLG_Y A PSDLG_X A" )
         // Create view for Group as a parent. This will be used in processing subcontrols to check for WebControlProperty.
         CreateViewFromView( vGroupParent, vDialog )
         SetViewToSubobject( vDialog, "CtrlCtrl" )
         TraceLineS("**** GroupBox in Table ", " Before Recurs ")
         GenJSPJ_CrteCtrlsRecurs( vDialog, vGroupParent, lFile, szWriteBuffer, szIndent,
                                 TableRowCnt, szNoPositioning, 0, 0 )
         TraceLineS("**** GroupBox in Table ", " After Recurs ")
         ResetViewFromSubobject( vDialog )
         DropView( vGroupParent )
         vGroupParent = 0
      END
      */
      
      IF szControlType = "GroupBox"
      
         // Do I need to check if this is a groupbox and we are not using absolute positioning, then I want to
         // check if there are other groupboxes at this same PSDLG_Y.  If so, then these groups would need to
         // have a float:left applied to them.
         // Would I only want to do this once for the row?
         // Or, do I want to put a float on every div created and then create a <div style="clear:both;"</div> after
         // every row?
         //IF  szNoPositioning = "Y" AND szCheckedRowForGroups         //END
         
         
         // InitializeRepeatingGroup for GroupBox
         
         // Check to see if this GroupBox has a WebControlProperty of "Table".  If so, then we will create this
         // as a table and try and position what is in this group box as a table.
         szGroupIsTable = "" 
         SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Table"
         IF RESULT >= zCURSOR_SET
            szGroupIsTable = "Y"
         END
         
         szNoHeightFlag = "" 
         SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "No Height"
         IF RESULT >= zCURSOR_SET
            szNoHeightFlag = "Y"
         END
         
         szNoWidthFlag = "" 
         SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "No Width"
         IF RESULT >= zCURSOR_SET
            szNoWidthFlag = "Y"
         END

      END
      
      // Initialize the szAbsoluteStyle variable with X and Y values.
      IF  szNoPositioning = "Y"
         IF szControlType = "GroupBox" AND szNoHeightFlag = "Y" AND szNoWidthFlag = "Y"
            szAbsoluteStyle = ""
         ELSE
         IF szControlType = "GroupBox" AND szNoHeightFlag = "Y"
            // We might not want the groupbox to have a height (so it grows)
            zIntegerToString( szWidth, 10, vDialog.Control.SZDLG_X * DLUnits )
            szAbsoluteStyle = "style=^width:" + szWidth + ";^"
         ELSE
         IF szControlType = "GroupBox" AND szNoWidthFlag = "Y"
            // We might not want the groupbox to have a width (so it grows)
            zIntegerToString( szHeight, 10, vDialog.Control.SZDLG_Y * DLUnits )
            szAbsoluteStyle = "style=^height:" + szHeight + ";^"
         ELSE
            CreateNoPosStyleString( vDialog, szAbsoluteStyle, "" )
         END
         END
         END
      ELSE 
         CreateAbsolStyleString( vDialog, szAbsoluteStyle, lOffsetX, lOffsetY, "" )
      END

      szWriteBuffer = "<% /* " + szCtrlTag + ":" + szControlType + " */ %>"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      
      // Check to see if this GroupBox has a WebControlProperty of "Table".  If so, then we will create this
      // as a table and try and position what is in this group box as a table.
      IF szControlType = "GroupBox" AND szGroupIsTable = "Y"
            
            X_Size = vDialog.Control.SZDLG_X
            Y_Size = vDialog.Control.SZDLG_Y
            
            OrderEntityForView( vDialog, "CtrlCtrl", "PSDLG_Y A PSDLG_X A" )
            CreateViewFromView( vGroupParent, vDialog )
            // Create view for Group as a parent. This will be used in processing subcontrols to check for WebControlProperty.
            SetViewToSubobject( vDialog, "CtrlCtrl" )
            szIndentGroup = szIndent
            GenJSPJ_CrteGroupTable( vDialog, vGroupParent, vDialogRoot, lFile, szWriteBuffer, szIndent, TableRowCnt, szNoPositioning )
            ResetViewFromSubobject( vDialog )
            DropView( vGroupParent )
            vGroupParent = 0
      END

      IF szControlType = "GroupBox" AND szGroupIsTable = ""

         // Set Group flags either from old szWebCtrlType or new WebControlProperty.
         IF szWebCtrlType = "Scrollable"
            szScrollableFlag = "Y"
         ELSE
            szScrollableFlag = ""
            SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Scrollable"
            IF RESULT >= zCURSOR_SET
               szScrollableFlag = "Y"
            END
         END
         IF szWebCtrlType = "Span"
            szSpanFlag = "Y"
         ELSE
            szSpanFlag = ""
            SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Span"
            IF RESULT >= zCURSOR_SET
               szSpanFlag = "Y"
            END
         END
         IF szWebCtrlType = "Div"
            szDivFlag = "Y"
         ELSE
            szDivFlag = ""
            SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Div"
            IF RESULT >= zCURSOR_SET 
               szDivFlag = "Y"
            END
         END
        

         // Is this clear even working???!!!
         IF szWebCtrlType = "Clear"
            szWriteBuffer = "<div id='clear'></div>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            X_Size = vDialog.Control.PSDLG_X * DLUnits + lOffsetX  // borrow these for a second
            Y_Size = vDialog.Control.PSDLG_Y * DLUnits + lOffsetY
            OrderEntityForView( vDialog, "CtrlCtrl", "PSDLG_Y A PSDLG_X A" )
            // Create view for Group as a parent. This will be used in processing subcontrols to check for WebControlProperty.
            CreateViewFromView( vGroupParent, vDialog )
            SetViewToSubobject( vDialog, "CtrlCtrl" )
            szIndentGroup = szIndent
            GenJSPJ_CrteCtrlsRecurs( vDialog, vGroupParent, vDialogRoot, lFile, szWriteBuffer, szIndentGroup,
                                    TableRowCnt, szNoPositioning, X_Size, Y_Size )
            ResetViewFromSubobject( vDialog )
            DropView( vGroupParent )
            vGroupParent = 0
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         ELSE
         IF szSpanFlag = "Y"

            // Div on a Group Control requests that all the controls inside the group line up one under the other.
            szClass = vDialog.Control.CSS_Class
            IF szClass = ""
               szWriteBuffer = "<span" + szHTMLCtrlID + szAbsoluteStyle + ">"
            ELSE
               szWriteBuffer = "<span" + szHTMLCtrlID + "class=^" + szClass + "^ " + szAbsoluteStyle + ">"
            END
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            OrderEntityForView( vDialog, "CtrlCtrl", "PSDLG_Y A PSDLG_X A" )
            // Create view for Group as a parent. This will be used in processing subcontrols to check for WebControlProperty.
            CreateViewFromView( vGroupParent, vDialog )
            SetViewToSubobject( vDialog, "CtrlCtrl" )
            szIndentGroup = szIndent
            GenJSPJ_CrteCtrlsRecurs( vDialog, vGroupParent, vDialogRoot, lFile, szWriteBuffer, szIndentGroup,
                                    TableRowCnt, szNoPositioning, lOffsetX, lOffsetY )
            ResetViewFromSubobject( vDialog )
            DropView( vGroupParent )
            vGroupParent = 0
            szWriteBuffer = "</span>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         ELSE
         IF szDivFlag = "Y"

            // Add Scrollable if requested.
            IF szScrollableFlag = "Y"
               zAppendQuotedString( szAbsoluteStyle, "overflow:auto;", "style=", "^" )
            END

            // If we are not using absolute positioning, then make all the divs
            // float left.
            IF  szNoPositioning = "Y" 
               zAppendQuotedString( szAbsoluteStyle, "float:left;", "style=", "^" )
            END


            // Div on a Group Control requests that all the controls inside the group line up one under the other.
            szClass = vDialog.Control.CSS_Class
            IF szClass = ""
               szWriteBuffer = "<div" + szHTMLCtrlID + szAbsoluteStyle + ">"
            ELSE
               szWriteBuffer = "<div" + szHTMLCtrlID + "class=^" + szClass + "^ " + szAbsoluteStyle + ">"
            END
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            OrderEntityForView( vDialog, "CtrlCtrl", "PSDLG_Y A PSDLG_X A" )
            // Create view for Group as a parent. This will be used in processing subcontrols to check for WebControlProperty.
            CreateViewFromView( vGroupParent, vDialog )
            SetViewToSubobject( vDialog, "CtrlCtrl" )
            szIndentGroup = szIndent
            GenJSPJ_CrteCtrlsRecurs( vDialog, vGroupParent, vDialogRoot, lFile, szWriteBuffer, szIndentGroup,
                                    TableRowCnt, szNoPositioning, lOffsetX, lOffsetY )
            ResetViewFromSubobject( vDialog )
            DropView( vGroupParent )
            vGroupParent = 0
            szWriteBuffer = "</div>  <!-- " + szCtrlTag + " --> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         ELSE
         IF szWebCtrlType = "DivScroll"
            // Div on a Group Control requests that all the controls inside the group line up one under the other.
            zAppendQuotedString( szAbsoluteStyle, "overflow:auto;", "style=", "^" )
            
            // If we are not using absolute positioning, then make all the divs
            // float left.
            IF  szNoPositioning = "Y" 
               zAppendQuotedString( szAbsoluteStyle, "float:left;", "style=", "^" )
            END
            szClass = vDialog.Control.CSS_Class
            IF szClass = ""
               szWriteBuffer = "<div" + szHTMLCtrlID + szAbsoluteStyle + ">"
            ELSE
               szWriteBuffer = "<div" + szHTMLCtrlID + "class=^" + szClass + "^ " + szAbsoluteStyle + ">"
            END
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            OrderEntityForView( vDialog, "CtrlCtrl", "PSDLG_Y A PSDLG_X A" )
            // Create view for Group as a parent. This will be used in processing subcontrols to check for WebControlProperty.
            CreateViewFromView( vGroupParent, vDialog )
            SetViewToSubobject( vDialog, "CtrlCtrl" )
            szIndentGroup = szIndent
            GenJSPJ_CrteCtrlsRecurs( vDialog, vGroupParent, vDialogRoot, lFile, szWriteBuffer, szIndentGroup,
                                    TableRowCnt, szNoPositioning, lOffsetX, lOffsetY )
            ResetViewFromSubobject( vDialog )
            DropView( vGroupParent )
            vGroupParent = 0
            szWriteBuffer = "</div>  <!-- " + szCtrlTag + " --> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         ELSE
            // Default Group is div for now
            
            // If we are not using absolute positioning, then make all the divs
            // float left.
            IF  szNoPositioning = "Y" 
               zAppendQuotedString( szAbsoluteStyle, "float:left;", "style=", "^" )
            END
            
            szClass = vDialog.Control.CSS_Class
            IF szClass = ""
               szWriteBuffer = "<div" + szHTMLCtrlID + szAbsoluteStyle + ">"
            ELSE
               szWriteBuffer = "<div" + szHTMLCtrlID + "class=^" + szClass + "^ " + szAbsoluteStyle + ">"
            END
            /*IF szClass = ""
               szWriteBuffer = "<fieldset " + szAbsoluteStyle + ">"
            ELSE
               szWriteBuffer = "<fieldset class=^" + szClass + "^ " + szAbsoluteStyle + ">"
            END*/
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            IF vDialog.Control.Text != ""
               szWriteBuffer = "<div>" + vDialog.Control.Text + "</div>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            END

            OrderEntityForView( vDialog, "CtrlCtrl", "PSDLG_Y A PSDLG_X A" )
            // Create view for Group as a parent. This will be used in processing subcontrols to check for WebControlProperty.
            CreateViewFromView( vGroupParent, vDialog )
            SetViewToSubobject( vDialog, "CtrlCtrl" )
            szIndentGroup = szIndent + "   "
            GenJSPJ_CrteCtrlsRecurs( vDialog, vGroupParent, vDialogRoot, lFile, szWriteBuffer, szIndentGroup,
                                    TableRowCnt, szNoPositioning, lOffsetX, lOffsetY )
            ResetViewFromSubobject( vDialog )
            DropView( vGroupParent )
            vGroupParent = 0

            szWriteBuffer = "</div>  <!-- " + szCtrlTag + " --> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         END
         END
         END
         END

      END  // Control is groupbox
      
      
      
      IF szControlType = "Text"  // TEXT
         GenJSPJ_CrteText( vDialog, vGroupParent, vDialogRoot, lFile, szWriteBuffer, szIndent, szCtrlTag,
                          "", szNoPositioning, 0, 0 )
      END

      IF szControlType = "EditBox"  // EDITBOX
         GenJSPJ_CrteEditBox( vDialog, lFile, szWriteBuffer, szIndent, szCtrlTag,
                             "", "", szNoPositioning, 0, 0 )
      END

      IF szControlType = "Calendar"  // CALENDAR
         GenJSPJ_CrteCalendar( vDialog, lFile, szWriteBuffer, szIndent, szCtrlTag,
                              "", "", szNoPositioning, 0, 0 )
      END

      IF szControlType = "RadioGrp" // RADIO BUTTON GROUP
         szWriteBuffer = "<% strErrorMapValue = ^^;"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

         IF vDialog.CtrlMapView EXISTS
            szWriteBuffer = "   " + vDialog.CtrlMapView.Name + " = " +
                            "task.getViewByName( ^" + vDialog.CtrlMapView.Name + "^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   if ( " + vDialog.CtrlMapView.Name + " == null )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      " + vDialog.CtrlMapView.Name +
                            ".log().debug( ^Invalid View: ^, ^" + szCtrlTag + "^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   else"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      nRC = " + vDialog.CtrlMapView.Name +
                            ".cursor( ^" +
                            vDialog.CtrlMapRelatedEntity.Name + "^ ).checkExistenceOfEntity();"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      if ( nRC >= 0 )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         strRadioGroupValue = " +
                            vDialog.CtrlMapView.Name + ".cursor( ^" +
                            vDialog.CtrlMapRelatedEntity.Name + "^ ).getStringFromAttribute( ^" +
                            vDialog.CtrlMapER_Attribute.Name + "^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         END

         szWriteBuffer = "%>"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

         //KJS 11/14/07 - I don't think there should always be a box around radio buttons.
         //I'm going to do this like the way group box is (or was).  If there is text
         //to go on the box then we will create <fieldset.  If there is no text then
         //we will create a div.
         //KJS 10/07/09 - I added the id to this <div but then realized that the radio buttons also have this
         //id, so I am adding "gb" in front of the control tag.  Not sure how much we care that this div has
         //an id and name but think it should.
         IF vDialog.Control.Text = ""
            //szWriteBuffer = "<div " + szStyle + ">"
            szWriteBuffer = "<div id=^gb" + szCtrlTag + "^ name=^gb" + szCtrlTag + "^ " + szStyle + ">"
         ELSE
            szWriteBuffer = "<fieldset " + szStyle + ">"
         END
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         IF vDialog.Control.Text != ""
            szWriteBuffer = "<div>" + vDialog.Control.Text + "</div>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         END

         OrderEntityForView( vDialog, "CtrlCtrl", "PSDLG_Y A PSDLG_X A" )
         SetViewToSubobject( vDialog, "CtrlCtrl" )
         szIndent = szIndent + "   "
         GenJSPJ_CrteCtrlsRadio( vDialog, lFile, szWriteBuffer, szIndent,
                                szCtrlTag, szNoPositioning, 0, 0 )
         ResetViewFromSubobject( vDialog )
         IF vDialog.Control.Text = ""
            szWriteBuffer = "</div>"
         ELSE
            szWriteBuffer = "</fieldset>"
         END
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

      END

      IF szControlType = "CheckBox"  // CHECKBOX
         GenJSPJ_CrteCheckBox( vDialog, lFile, szWriteBuffer, szIndent, szCtrlTag,
                              "", "", szNoPositioning, 0, 0 )
      END

      IF szControlType = "PushBtn"  // PUSH BUTTON
         szActionName = ""
         IF vDialog.EventAct EXISTS
            szActionName = vDialog.EventAct.Tag
            nRC = zstrcmpi( szActionName, "alt-f4" )
            IF nRC = 0
               szActionName = "AltF4"
            END
         END

         CreateTabIndexString( vDialog, szTabIndex )
         szStyle = szStyle + szTabIndex

         szText = ""
         szText = vDialog.Control.Text
         // Set Class as either null or with Class value.
         IF vDialog.Control.CSS_Class = ""
            szClass = ""
         ELSE
            szClass = "class=^" + vDialog.Control.CSS_Class + "^ "
         END

         //If we put a title on the control, when the mouse is hovered over the control, this text will display.
         szTitleHTML = ""
         szTitle = vDialog.Control.DIL_Text
         IF szTitle != ""
            szTitleHTML = " title=^" + szTitle + "^ "
         END

         szWriteBuffer = "<button type=^button^ " + szClass + szTitleHTML + szHTMLCtrlID

         szWriteBuffer = szWriteBuffer + "value=^" + szText + "^ onclick=^" +
                         szActionName + "( )^ " + " " + szStyle + ">" + szText + "</button>"
                         
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
      END  //End of PushBtn

      IF szControlType = "ComboBox"  // COMBOBOX
         GenJSPJ_CrteComboBox( vDialog, lFile, szWriteBuffer, szIndent,
                              szCtrlTag, "", szNoPositioning, 0, 0 )
      END

      IF szControlType = "Bitmap" OR szControlType = "BitmapBtn"  // BITMAP / JPG
         GenJSPJ_CrteJPG( vDialog, lFile, szWriteBuffer, szIndent,
                         szCtrlTag, szNoPositioning, 0, 0 )
      END

      IF szControlType = "ListBox"  // LISTBOX
         GenJSPJ_CrteListBox( vDialog, lFile, szWriteBuffer, szIndent,
                              szCtrlTag, szNoPositioning, 0, 0 )
      END  // IF szControlType = "ListBox"

      IF szControlType = "MLEdit"  // MLEDIT
         SET CURSOR FIRST vDialog.CtrlMapLOD_Attribute WITHIN vDialog.Control
         IF RESULT >= zCURSOR_SET
            szWriteBuffer = "<%"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   // " + szControlType + ": " + szCtrlTag
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   strErrorMapValue = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   " + vDialog.CtrlMapView.Name + " = " + "task.getViewByName( ^" +
                            vDialog.CtrlMapView.Name + "^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   if ( " + vDialog.CtrlMapView.Name + " == null )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      " + vDialog.CtrlMapView.Name +
                            ".log().debug( ^Invalid View: ^, ^" + szCtrlTag + "^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   else"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      nRC = " + vDialog.CtrlMapView.Name +
                            ".cursor( ^" +
                            vDialog.CtrlMapRelatedEntity.Name + "^ ).checkExistenceOfEntity();"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      if ( nRC >= 0 )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            szContextName = ""
            IF vDialog.CtrlMapContext EXISTS
               szContextName = vDialog.CtrlMapContext.Name
            END

            IF vDialog.CtrlMapER_Domain.MaxStringLth > 200
               lMaxStringLength = vDialog.CtrlMapER_Domain.MaxStringLth
               szMaxStringLength = lMaxStringLength
            ELSE
               szMaxStringLength = "200"
            END

            szWriteBuffer = "         strErrorMapValue = " +
                            vDialog.CtrlMapView.Name +
                            ".cursor( ^" +
                            vDialog.CtrlMapRelatedEntity.Name + "^ ).getStringFromAttribute( ^" +
                            vDialog.CtrlMapER_Attribute.Name + "^, ^" +
                            szContextName + "^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   }"

            lStyleX = vDialog.Control.ExtendedStyle
            lTemp = IsFlagSequenceSet( lStyleX, zCONTROLX_PREFILL )
            IF lTemp != 0
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
               szWriteBuffer = "      if ( strErrorMapValue.length( ) == 0 )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         strErrorMapValue = ^" + vDialog.Control.Text + "^;"
            END

            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            szWriteBuffer = "%>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            X_Size = vDialog.Control.SZDLG_X
            Size = X_Size / 4
            zIntegerToString( szSize, 10, Size )
            Y_Size = vDialog.Control.SZDLG_Y
            Size = Y_Size / 12
            zIntegerToString( szHeight, 10, Size )

            IF vDialog.Control.VisibleBorder = "Y"
               zAppendQuotedString( szStyle, "border:'4px solid';border-style:'groove';", "style=", "^" )
            ELSE
               zAppendQuotedString( szStyle, "border:'2px solid';border-style:'groove';", "style=", "^" )
            END

            IF vDialog.Control.WebCtrlType = "wysiwygEditor"

            // CreateTabIndexString( vDialog, szTabIndex )
            // CreateAbsolStyleString( vDialog, szAbsoluteStyle, lOffsetX, lOffsetY, "" )
            // szAbsoluteStyle = szAbsoluteStyle + szTabIndex

               szClass = vDialog.Control.CSS_Class
               IF szClass = ""
                  szClass = "widgEditor nothing"   // szClass = "mceSimple" TinyMCE default
               END

               szWriteBuffer = "<textarea"+ szHTMLCtrlID +
                               "^ class=^" + szClass + "^ " + szTitleHTML +
                               szStyle + "^>" +
                            // "^ rows="15" cols="80" style="width: 80%">" +
                               "<%=strErrorMapValue%></textarea>"

            ELSE

               CreateTabIndexString( vDialog, szTabIndex )
               szWriteBuffer = "<textarea " + szHTMLCtrlID + szTitleHTML +
                               szStyle + szTabIndex + " wrap=^wrap^>" +
                               "<%=strErrorMapValue%></textarea>"

            END
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
         END
      END   //IF szControlType = "MLEdit"

      //****************************************************************************
      
      
      szWriteBuffer = "</td>"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                      
      iColCnt = iColCnt + 1
   END  
   
   // If the previous row didn't have as many controls as there are 
   // table columns, then we need to create a blank column
   LOOP  WHILE iColCnt < iHighestColCnt
      szWriteBuffer = "<td>&nbsp</td>"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      iColCnt = iColCnt + 1
   END
   
   szWriteBuffer = "</tr>" 
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   
   szWriteBuffer = "</table>"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
   szWriteBuffer = "</div>  <!-- " + szParentCtrlTag + " --> "
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

END



/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: GenJSPJ_CrteCtrlsRecurs
//
/////////////////////////////////////////////////////////////////////////////
GLOBAL OPERATION
GenJSPJ_CrteCtrlsRecurs( VIEW vDialog      BASED ON LOD TZWDLGSO,
                        VIEW vGroupParent BASED ON LOD TZWDLGSO,
                        VIEW vDialogRoot  BASED ON LOD TZWDLGSO,
                        INTEGER          lFile,
                        STRING ( 10000 ) szWriteBuffer,
                        STRING ( 100 )   szIndent,
                        INTEGER          TableRowCnt,
                        STRING ( 1 )     szNoPositioning,
                        INTEGER          lOffsetX,
                        INTEGER          lOffsetY )


   VIEW vDialog2 BASED ON LOD TZWDLGSO
   VIEW vList    BASED ON LOD TZWDLGSO  // identifies attribute mapping for list entries
   VIEW vEntity  BASED ON LOD TZWDLGSO  // identifies entity mapping for list entries
   VIEW vScope   BASED ON LOD TZWDLGSO  // identifies scoping entity for list entries
   STRING ( 32 )  szContextName
   STRING ( 32 )  szScopingEntityName
   STRING ( 32 )  szListEntityName
   STRING ( 64 )  szViewName
   STRING ( 32 )  szMapEntityName
   STRING ( 32 )  szMapAttributeName
   STRING ( 32 )  szActionName
   STRING ( 10 )  szSelectAction
   STRING ( 10 )  szSelectFunction
   STRING ( 50 )  szCtrlTag
   STRING ( 50 )  szCtrlCtrlTag
   STRING ( 50 )  szControlType
   STRING ( 50 )  szCtrlCtrlType
   STRING ( 32 )  szListCtrlTag
   STRING ( 100 ) szIndentGroup
   STRING ( 100 ) szIndentHold
   STRING ( 100 ) szPosition
   STRING ( 10 )  szColCount
   STRING ( 100 ) szSort
   STRING ( 256 ) szAbsoluteStyle
   STRING ( 20 )  szAbsoluteWidth
   STRING ( 256 ) szRelStyle
   STRING ( 256 ) szClass
   STRING ( 256 ) szTitle
   STRING ( 256 ) szTitleHTML
   STRING ( 50 )  ListBoxDoubleClickAction
   STRING ( 16 )  szTabIndex
   STRING ( 32 )  szSize
   STRING ( 16 )  szWidth
   STRING ( 16 )  szHeight
   STRING ( 1 )   szBorder
   STRING ( 32 )  szRadioGroupName
   STRING ( 256 ) szWidget
   STRING ( 256 ) szText
   STRING ( 64 )  szTerm
   STRING ( 20 )  szJustify
   STRING ( 50 )  szWebCtrlType
   STRING ( 35 )  szControlTag
   STRING ( 85 )  szHTMLCtrlID
   STRING ( 50 )  szGridView
   STRING ( 50 )  szGridOrigViewName
   STRING ( 2 )   szSuffix
   STRING ( 10 )  szMaxStringLength
   STRING ( 200 ) szItemTableHeader
   STRING ( 50 )  szParentWebType
   STRING ( 1 )   szRepeatingGroupFlag
   STRING ( 1 )   szGridGroupingFlag
   STRING ( 1 )   szIncludeFileFlag
   STRING ( 1 )   szNoHeightFlag
   STRING ( 1 )   szNoWidthFlag
   STRING ( 1 )   szSpanFlag
   STRING ( 1 )   szDivFlag
   STRING ( 1 )   sziFrameFlag
   STRING ( 1 )   szDashboardFlag
   STRING ( 1 )   szScrollableFlag
   STRING ( 1 )   szScrollingTable
   STRING ( 1 )   szFilterTable
   STRING ( 1 )   szFileTransferFlag
   STRING ( 1 )   szGroupIsTable
   STRING ( 1 )   szreCAPTCHAFlag
   STRING ( 1 )   szWCP_Edit
   STRING ( 1 )   szWCP_Hidden
   STRING ( 1 )   szWCP_Multiline
   STRING ( 1 )   szWCP_EmailAddress
   STRING ( 1 )   szWCP_Hyperlink
   STRING ( 1 )   szWCP_AbsoluteWidth
   STRING ( 1 )   szWCP_FirstOccuranceOnly
   STRING ( 1 )   szFirstTimeThrough
   STRING ( 1 )   szGridInGroup
   STRING ( 10 )  szDisabled
   STRING ( 100 ) szStyle
   DECIMAL        DLUnits
   INTEGER        LastY_Pos
   INTEGER        LastY_Height
   INTEGER        LastY_PosGroup
   INTEGER        LastX_Pos
   INTEGER        LastX_Width
   INTEGER        MaxY_HeightForLine
   INTEGER        X_Size
   INTEGER        Y_Size
   INTEGER        X_Pos
   INTEGER        Y_Pos
   INTEGER        nbsp_count
   INTEGER        Size
   INTEGER        Width
   INTEGER        WidthPercent
   INTEGER        lSubtype
   INTEGER        lSubtypeX
   INTEGER        lSort
   INTEGER        lHeader
   INTEGER        lColCnt
   INTEGER        lCol
   INTEGER        lPushBtn
   INTEGER        lEditBox
   INTEGER        lStyleX
   INTEGER        lTemp
   INTEGER        lMaxStringLength
   SHORT          bResetToPlaceHolder
   SHORT          nRC

   PIX_PER_DU( vDialog, DLUnits )

   // Generate the code for creating HTML statements for controls.
   // A major issue is determining which Controls are on the same row, as they need table entries
   // around them. Note that Groups must be handled differently from other Controls.

   // Make sure the Controls are ordered by row and column.
   
   szIndentHold = szIndent
   
   // These variables are for if we are not using absolute positioning.
   LastY_Pos      = 0
   LastY_Height   = 0
   LastY_PosGroup = 0
   LastX_Pos      = 0
   LastX_Width    = 0
   MaxY_HeightForLine = 0
   szFirstTimeThrough = "Y"

   // Process each Control
   FOR EACH vDialog.Control
   
      //zIntegerToString( szX_Pos, 10, vDialog.Control.PSDLG_X * DLUnits + X_BASE )
      //zIntegerToString( szY_Pos, 10, vDialog.Control.PSDLG_Y * DLUnits + Y_BASE )
      
      // If szNoPositioning = "Y" then we are not using absolute positioning.  We need to
      // create some divs or spans to make this look similar to what's in the painter.
      IF  szNoPositioning = "Y" 
      
         // Need to reset the x positions
         IF  ( LastY_Pos < vDialog.Control.PSDLG_Y ) AND szFirstTimeThrough != "Y"
         //IF  ( LastY_Pos < vDialog.Control.PSDLG_Y ) AND LastY_Pos != 0
            szWriteBuffer = "</div>  <!-- End of a new line -->"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            LastX_Pos       = 0
            LastX_Width     = 0
            
            // If we are using relative positioning, then we have automatically put
            // float:left on any groupboxes.  Because of this, I think if we are onto
            // a new row, then we should put a "clear" div in.
            szWriteBuffer = "<div style=^clear:both;^></div>  <!-- Moving to a new line, so do a clear -->"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            
         END         
         
         // We may have controls on the same line with varying heights.  When determining if there is
         // blank space in between these lines, make sure we are comparing the heighest control.
         Y_Pos = LastY_Pos + LastY_Height
         IF  Y_Pos > MaxY_HeightForLine
            MaxY_HeightForLine = Y_Pos
         END
         
         // Determine if there is blank space in between the y coordinates of the last 
         // control and the current control.  If so, then we need to put in a div as a spacer control.
         IF  Y_Pos < vDialog.Control.PSDLG_Y 
             
               //TraceLineS("****  SPACE BETWEEN Ys *** ", vDialog.Control.Tag )  
               //Y_Size = ( vDialog.Control.PSDLG_Y - ( LastY_Pos + LastY_Height ) ) * DLUnits + lOffsetY
               Y_Size = ( vDialog.Control.PSDLG_Y - ( MaxY_HeightForLine ) ) * DLUnits + lOffsetY
               X_Size = 100
               zIntegerToString( szHeight, 16, Y_Size )
               zIntegerToString( szWidth, 16, X_Size )
               szWriteBuffer = ""
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = " <!-- This is added as a line spacer -->"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "<div style=^height:" + szHeight + "px;width:" + szWidth + "px;^></div>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         END
         
         // There should be a <div> surrounding each line.
         IF ( LastY_Pos < vDialog.Control.PSDLG_Y ) OR szFirstTimeThrough = "Y"
         
               LastY_Pos    = vDialog.Control.PSDLG_Y

               // KJS 08/01/08 - Seems as though I need to give this div a width, otherwise,
               // it many times places things on different lines.
               //KELLY8
               CreateViewFromView( vDialog2, vDialog )
               
               X_Size = vDialog2.Control.PSDLG_X + vDialog2.Control.SZDLG_X
               SET CURSOR  NEXT vDialog2.Control 
               // Loop through all the controls that are at the same y pos and see how wide they
               // are.
               LOOP  WHILE RESULT >= zCURSOR_SET AND LastY_Pos = vDialog2.Control.PSDLG_Y
               
                  //X_Size = X_Size + vDialog2.Control.SZDLG_X
                  X_Size = vDialog2.Control.PSDLG_X + vDialog2.Control.SZDLG_X
                  SET CURSOR  NEXT vDialog2.Control 
                  
               END
               
               DropView(vDialog2)
               
               X_Size = X_Size * DLUnits + lOffsetY
               // KJS 09/03/08 - does this help??
               X_Size = X_Size + 1
               zIntegerToString( szWidth, 16, X_Size )

               szWriteBuffer = ""
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               //szWriteBuffer = "<div style=^width:" + szWidth + "px;^>  <!-- Beginning of a new line -->"
               szWriteBuffer = "<div >  <!-- Beginning of a new line -->"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         END
         
         X_Pos = LastX_Pos + LastX_Width
         // If there is blank space to the left of a control put in a spacer control.
         IF X_Pos < vDialog.Control.PSDLG_X
         
            //TraceLineS("****  SPACE BETWEEN Xs *** ", vDialog.Control.Tag )  
            X_Size = ( vDialog.Control.PSDLG_X  - ( LastX_Pos + LastX_Width ) ) * DLUnits + lOffsetX 
            Y_Size = vDialog.Control.SZDLG_Y * DLUnits + lOffsetY
            zIntegerToString( szHeight, 16, Y_Size )
            zIntegerToString( szWidth, 16, X_Size )
                     
            // KJS 11/19/08 - Currently we are placing a span with spacers in between controls that have space between them.
            // If there is a div control (or grid or tab) in a row and there is space before it, then we should really
            // put a floating div there instead of a span.  10/07/09 - Added RadioGrp as well.
            IF vDialog.ControlDef.Tag = "GroupBox" OR vDialog.ControlDef.Tag = "Grid" OR 
               vDialog.ControlDef.Tag = "Tab" OR vDialog.ControlDef.Tag = "RadioGrp"
               //szWriteBuffer = "<div style=^height:" + szHeight + "px;width:" + szWidth + "px;float:left;^></div>   <!-- Width Spacer -->"
               // Taking out the height for this spacer since in IE this causes some issue.
               szWriteBuffer = "<div style=^height:1px;width:" + szWidth + "px;float:left;^></div>   <!-- Width Spacer -->"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            ELSE  
               nbsp_count = X_Size / 5
               //TraceLineI("**** nbsp_count ", nbsp_count )
               
               IF  nbsp_count > 0 
                  szWriteBuffer = "<span style=^height:" + szHeight + "px;^>"
                  LOOP WHILE nbsp_count > 0
                      nbsp_count = nbsp_count - 1
                      szWriteBuffer = szWriteBuffer + "&nbsp"
                  END
                  szWriteBuffer = szWriteBuffer + "</span>"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               END
            END
            
         END
         
         LastY_Pos    = vDialog.Control.PSDLG_Y
         LastY_Height = vDialog.Control.SZDLG_Y
         LastX_Pos    = vDialog.Control.PSDLG_X
         LastX_Width  = vDialog.Control.SZDLG_X      
      END

      szFirstTimeThrough = ""
      szControlType = vDialog.ControlDef.Tag
      szWebCtrlType = vDialog.Control.WebCtrlType
      szIndent = szIndentHold + "   "
      szCtrlTag = vDialog.Control.Tag
      
      szHTMLCtrlID = " id=^" + szCtrlTag + "^ name=^" + szCtrlTag + "^ "

      IF szControlType = "GroupBox"
      
         // Do I need to check if this is a groupbox and we are not using absolute positioning, then I want to
         // check if there are other groupboxes at this same PSDLG_Y.  If so, then these groups would need to
         // have a float:left applied to them.
         // Would I only want to do this once for the row?
         // Or, do I want to put a float on every div created and then create a <div style="clear:both;"</div> after
         // every row?
         //IF  szNoPositioning = "Y" AND szCheckedRowForGroups         //END
         
         
         // InitializeRepeatingGroup for GroupBox
         
         // Check to see if this GroupBox has a WebControlProperty of "Table".  If so, then we will create this
         // as a table and try and position what is in this group box as a table.
         szGroupIsTable = "" 
         SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Table"
         IF RESULT >= zCURSOR_SET
            szGroupIsTable = "Y"
         END
         
         // There are times when the user wants to paint a div that has no height so it will grow with the 
         // data within it.  This flags the div will have no height.
         szNoHeightFlag = "" 
         SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "No Height"
         IF RESULT >= zCURSOR_SET
            szNoHeightFlag = "Y"
         END
         
         // There are times when the user wants to paint a div that has no width so it will grow with the 
         // data within it.  This flags the div will have no width.
         szNoWidthFlag = "" 
         SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "No Width"
         IF RESULT >= zCURSOR_SET
            szNoWidthFlag = "Y"
         END
         
         // KJS 05/01/09
         // When the user paints a grid, they may not want this grid (and any leading header text) to show
         // during run-time if there is no data for the grid.  If the user puts this grid and any other
         // controls in a groupbox with the control property of "Table Grouping", we will not display anything
         // within this groupbox if the grid has no data during run-time. 
         szGridGroupingFlag = "" 
         SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Grid Grouping"
         IF RESULT >= zCURSOR_SET
            szGridGroupingFlag = "Y"
            // This div should not have any height or width.
            szNoHeightFlag = "Y"
            szNoWidthFlag = "Y"
         END

         // Set flag for RepeatingGroup either from old szWebCtrlType or new WebControlProperty.
         // Repeating Group is used for the situation where a Group of controls is to be repeated for each controlling
         // entity, very much as is done in Reports. An example in Zencas is the page of student pictures and basic
         // information for either a class or an advisor.
         IF szWebCtrlType = "RepeatingGroup"
            szRepeatingGroupFlag = "Y"
         ELSE
            szRepeatingGroupFlag = ""
            SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Repeating Group"
            IF RESULT >= zCURSOR_SET
               szRepeatingGroupFlag = "Y"
            END
         END

         // Set flag for FileTransfer, as all GroupBox and subcontrol processing is skipped for that case.
         szFileTransferFlag = ""
         SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "File Transfer to Server"
         IF RESULT >= zCURSOR_SET
            szFileTransferFlag = "Y"
         END
         
         szIncludeFileFlag = "" 
         SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Include File"
         IF RESULT >= zCURSOR_SET
            szIncludeFileFlag = "Y"
         END
         
         // Wondering if somehow this should be different in the sense that a group box can only be
         // either div, include file, iframe, table etc. whereas the "No Height" etc. can go with
         // div but only div, "Include File" etc.  How would a user know?
         sziFrameFlag = "" 
         SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "iFrame"
         IF RESULT >= zCURSOR_SET
            sziFrameFlag = "Y"
         END
         
         szDashboardFlag = "" 
         SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Dashboard"
         IF RESULT >= zCURSOR_SET
            szDashboardFlag = "Y"
         END
         
         szreCAPTCHAFlag = ""
         SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "reCAPTCHA"
         IF RESULT >= zCURSOR_SET
            szreCAPTCHAFlag = "Y"
         END
         
         // Set Group flags either from old szWebCtrlType or new WebControlProperty.
         IF szWebCtrlType = "Scrollable"
            szScrollableFlag = "Y"
         ELSE
            szScrollableFlag = ""
            SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Scrollable"
            IF RESULT >= zCURSOR_SET
               szScrollableFlag = "Y"
            END
         END
         IF szWebCtrlType = "Span"
            szSpanFlag = "Y"
         ELSE
            szSpanFlag = ""
            SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Span"
            IF RESULT >= zCURSOR_SET
               szSpanFlag = "Y"
            END
         END
         IF szWebCtrlType = "Div"
            szDivFlag = "Y"
         ELSE
            szDivFlag = ""
            SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Div"
            IF RESULT >= zCURSOR_SET 
               szDivFlag = "Y"
            END
         END
         
      END
      
      // Initialize the szAbsoluteStyle variable with X and Y values.
      IF  szNoPositioning = "Y"
         IF szControlType = "GroupBox" AND szNoHeightFlag = "Y" AND szNoWidthFlag = "Y"
            szAbsoluteStyle = ""
         ELSE
         IF szControlType = "GroupBox" AND szNoHeightFlag = "Y"
            // We might not want the groupbox to have a height (so it grows)
            zIntegerToString( szWidth, 10, vDialog.Control.SZDLG_X * DLUnits )
            szAbsoluteStyle = "style=^width:" + szWidth + "px;^"
         ELSE
         IF szControlType = "GroupBox" AND szNoWidthFlag = "Y"
            // We might not want the groupbox to have a width (so it grows)
            zIntegerToString( szHeight, 10, vDialog.Control.SZDLG_Y * DLUnits )
            szAbsoluteStyle = "style=^height:" + szHeight + "px;^"
         ELSE
            CreateNoPosStyleString( vDialog, szAbsoluteStyle, "" )
         END
         END
         END
      ELSE 
         CreateAbsolStyleString( vDialog, szAbsoluteStyle, lOffsetX, lOffsetY, "" )
      END

      szWriteBuffer = "<% /* " + szCtrlTag + ":" + szControlType + " */ %>"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      
      // Check to see if this GroupBox has a WebControlProperty of "Table".  If so, then we will create this
      // as a table and try and position what is in this group box as a table.
      IF szControlType = "GroupBox" AND szGroupIsTable = "Y"
            
         X_Size = vDialog.Control.SZDLG_X
         Y_Size = vDialog.Control.SZDLG_Y
         
         OrderEntityForView( vDialog, "CtrlCtrl", "PSDLG_Y A PSDLG_X A" )
         CreateViewFromView( vGroupParent, vDialog )
         // Create view for Group as a parent. This will be used in processing subcontrols to check for WebControlProperty.
         SetViewToSubobject( vDialog, "CtrlCtrl" )
         szIndentGroup = szIndent
         GenJSPJ_CrteGroupTable( vDialog, vGroupParent, vDialogRoot, lFile, szWriteBuffer, szIndent, TableRowCnt, szNoPositioning )
         ResetViewFromSubobject( vDialog )
         DropView( vGroupParent )
         vGroupParent = 0
      END
      
      // Inside this div there should be a grid control.  Look for the first grid control and check it's mapping.
      // During run-time, we will not display anything within this groupbox if the grid has no data.  If there is
      // other items in the group box don't worry about them.  Should we give an error message if this group box
      // has no grid?
      IF szControlType = "GroupBox" AND szGridGroupingFlag = "Y" 

            // If we are not using absolute positioning, then make all the divs
            // float left.
            IF  szNoPositioning = "Y" 
               zAppendQuotedString( szAbsoluteStyle, "float:left;", "style=", "^" )
            END

            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            // Div on a Group Control requests that all the controls inside the group line up one under the other.
            szWriteBuffer = "<div" + szHTMLCtrlID + szAbsoluteStyle + ">  <!-- " + vDialog.Control.Tag + " --> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      
         szViewName = ""
         szMapEntityName = ""
      
         SetViewToSubobject( vDialog, "CtrlCtrl" )
         FOR EACH vDialog.Control
            IF vDialog.ControlDef.Tag = "Grid" AND szViewName = ""
               // Should I get grid mapping here?
               szViewName = vDialog.CtrlMapView.Name
               szMapEntityName = vDialog.CtrlMapLOD_Entity.Name 
            END            
         END
         ResetViewFromSubobject( vDialog )
         
         // If there was a grid with mapping, use these to check the existence of the entity and paint what's in the groupbox
         // if the entity exists.
         IF szViewName != "" AND szMapEntityName != ""
         
            szWriteBuffer = "      <%"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      " + szViewName + " = " + "task.getViewByName( ^" + szViewName + "^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      if ( " + szViewName + " == null )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         nRC = " + szViewName + ".cursor( ^" + szMapEntityName + "^ ).checkExistenceOfEntity();"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         if ( nRC >= 0 ) "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      %>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            
             // Generate everything within this groupbox.
            CreateViewFromView( vGroupParent, vDialog )
            // Create view for Group as a parent. This will be used in processing subcontrols to check for WebControlProperty.
            SetViewToSubobject( vDialog, "CtrlCtrl" )
            szIndentGroup = szIndent
            GenJSPJ_CrteCtrlsRecurs( vDialog, vGroupParent, vDialogRoot, lFile, szWriteBuffer, szIndentGroup,
                                    TableRowCnt, szNoPositioning, lOffsetX, lOffsetY )
            ResetViewFromSubobject( vDialog )
            DropView( vGroupParent )
            vGroupParent = 0
           
            
            szWriteBuffer = "      <%"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      }"
            // Do I drop the view here?
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      %>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            
         ELSE
            // Should I give a message here that there is no grid within this groupbox or
            // should I just ignore it?          
         END
            szWriteBuffer = "</div>  <!--  " + vDialog.Control.Tag + " --> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         
      END

      IF szControlType = "GroupBox" AND szRepeatingGroupFlag = "" AND szFileTransferFlag = "" AND szGroupIsTable = "" AND
         szGridGroupingFlag = ""


         // Is this clear even working???!!!
         IF szWebCtrlType = "Clear"
            szWriteBuffer = "<div id='clear'></div>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            X_Size = vDialog.Control.PSDLG_X * DLUnits + lOffsetX  // borrow these for a second
            Y_Size = vDialog.Control.PSDLG_Y * DLUnits + lOffsetY
            OrderEntityForView( vDialog, "CtrlCtrl", "PSDLG_Y A PSDLG_X A" )
            // Create view for Group as a parent. This will be used in processing subcontrols to check for WebControlProperty.
            CreateViewFromView( vGroupParent, vDialog )
            SetViewToSubobject( vDialog, "CtrlCtrl" )
            szIndentGroup = szIndent
            GenJSPJ_CrteCtrlsRecurs( vDialog, vGroupParent, vDialogRoot, lFile, szWriteBuffer, szIndentGroup,
                                    TableRowCnt, szNoPositioning, X_Size, Y_Size )
            ResetViewFromSubobject( vDialog )
            DropView( vGroupParent )
            vGroupParent = 0
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         ELSE
         IF szSpanFlag = "Y"

            // Div on a Group Control requests that all the controls inside the group line up one under the other.
            szClass = vDialog.Control.CSS_Class
            IF szClass = ""
               szWriteBuffer = "<span" + szHTMLCtrlID + szAbsoluteStyle + ">"
            ELSE
               szWriteBuffer = "<span" + szHTMLCtrlID + "class=^" + szClass + "^ " + szAbsoluteStyle + ">"
            END
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            OrderEntityForView( vDialog, "CtrlCtrl", "PSDLG_Y A PSDLG_X A" )
            // Create view for Group as a parent. This will be used in processing subcontrols to check for WebControlProperty.
            CreateViewFromView( vGroupParent, vDialog )
            SetViewToSubobject( vDialog, "CtrlCtrl" )
            szIndentGroup = szIndent
            GenJSPJ_CrteCtrlsRecurs( vDialog, vGroupParent, vDialogRoot, lFile, szWriteBuffer, szIndentGroup,
                                    TableRowCnt, szNoPositioning, lOffsetX, lOffsetY )
            ResetViewFromSubobject( vDialog )
            DropView( vGroupParent )
            vGroupParent = 0
            szWriteBuffer = "</span>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         ELSE
         IF szWebCtrlType = "DivScroll"
            // Div on a Group Control requests that all the controls inside the group line up one under the other.
            zAppendQuotedString( szAbsoluteStyle, "overflow:auto;", "style=", "^" )
            
            // If we are not using absolute positioning, then make all the divs
            // float left.
            IF  szNoPositioning = "Y" 
               zAppendQuotedString( szAbsoluteStyle, "float:left;", "style=", "^" )
            END
            
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            szClass = vDialog.Control.CSS_Class
            IF szClass = ""
               szWriteBuffer = "<div "+ szHTMLCtrlID + szAbsoluteStyle + ">  <!-- " + vDialog.Control.Tag + " --> "
            ELSE
               szWriteBuffer = "<div" + szHTMLCtrlID + "class=^" + szClass + "^ " + szAbsoluteStyle + ">  <!-- " + vDialog.Control.Tag + " --> "
            END
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            OrderEntityForView( vDialog, "CtrlCtrl", "PSDLG_Y A PSDLG_X A" )
            // Create view for Group as a parent. This will be used in processing subcontrols to check for WebControlProperty.
            CreateViewFromView( vGroupParent, vDialog )
            SetViewToSubobject( vDialog, "CtrlCtrl" )
            szIndentGroup = szIndent
            GenJSPJ_CrteCtrlsRecurs( vDialog, vGroupParent, vDialogRoot, lFile, szWriteBuffer, szIndentGroup,
                                    TableRowCnt, szNoPositioning, lOffsetX, lOffsetY )
            ResetViewFromSubobject( vDialog )
            DropView( vGroupParent )
            vGroupParent = 0
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "</div>  <!-- " + szCtrlTag + " --> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         ELSE
         IF  szDashboardFlag = "Y" 

            // If we are not using absolute positioning, then make all the divs
            // float left.
            IF  szNoPositioning = "Y" 
               zAppendQuotedString( szAbsoluteStyle, "float:left;", "style=", "^" )
            END

            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            
            szClass = vDialog.Control.CSS_Class
            IF szClass = ""
               szWriteBuffer = "<div" + szHTMLCtrlID + szAbsoluteStyle + ">  <!-- " + vDialog.Control.Tag + " --> "
            ELSE
               szWriteBuffer = "<div" + szHTMLCtrlID + "class=^" + szClass + "^ " + szAbsoluteStyle + ">  <!-- " + vDialog.Control.Tag + " --> "
            END
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            
//*******************************  DASHBOARD CODE   ******************************************************

            
                       
            szWriteBuffer = "<% "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   String szDashboardSource = ^^; "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   String szDashboardMore = ^^; "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   String szFunction = ^^; "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   String szDisplayFrame = ^^; "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   int iDashboardMax = 0; "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   int iDashboardCnt = 1; "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   int iMaxColumns = 3; "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   int iMaxInCol = 0; "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   int iNbrInCol = 1; "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   int iColStartNbr = 0; "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   int iColEndNbr = 0; "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   int iRemainder = 0; "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   int iColNbr = 1; "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   int iSortOrder = 0; "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   int i = 0; "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   vKZXMLPGO = task.getViewByName( ^KZXMLPGO^ ); "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   vKZXMLPGO.cursor( ^Session^ ).setAttribute( ^DashboardFrameCount^, 1 ); "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   " + vDialog.CtrlMapView.Name + " = " + "task.getViewByName( ^" + vDialog.CtrlMapView.Name + "^ ); "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   if ( " + vDialog.CtrlMapView.Name + " == null )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   { "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      nRC = " + vDialog.CtrlMapView.Name + ".cursor( ^DashboardFrameUser^ ).checkExistenceOfEntity(); "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      if ( nRC >= 0 ) "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      { "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         //Order by Sort Order "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         //nRC = " + vDialog.CtrlMapView.Name + ".OrderEntityForView( strSessionId, " + vDialog.CtrlMapView.Name + ", ^DashboardFrameUser^, ^PresentationSortOrder A^); "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         //" + vDialog.CtrlMapView.Name + ".log().debug(^*** nRC after OrderEntityForView *** ^, nRC ); "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         nRC = " + vDialog.CtrlMapView.Name + ".cursor( ^DashboardFrameUser^).setFirst(); "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         while ( nRC >= 0 ) "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         { "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            szDisplayFrame = " + vDialog.CtrlMapView.Name + ".cursor( ^DashboardFrameUser^ ).getStringFromAttribute( ^ActiveOnCurrentDashboard^ ); "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            if ( szDisplayFrame.equals( ^Y^ ) ) "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            { "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               // When we've reached the max number of columns then "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               // start at column one again.   "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               if (iColNbr > iMaxColumns ) "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                  iColNbr = 1; "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               // Set what column this frame will be positioned in. "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               " + vDialog.CtrlMapView.Name + ".cursor( ^DashboardFrameUser^ ).setAttribute( ^wColumnNbr^, iColNbr ); "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               iDashboardMax++; "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               iColNbr++; "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            } "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            nRC =  " + vDialog.CtrlMapView.Name + ".cursor( ^DashboardFrameUser^ ).setNextContinue(); "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         } "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "          "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         iRemainder = iDashboardMax % iMaxColumns;  // mod function  "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         if ( iRemainder == 0 ) "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            iMaxInCol = (iDashboardMax / iMaxColumns); "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         else "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            iMaxInCol = (iDashboardMax / iMaxColumns) + 1; "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         // Loop through each frame that is in the first column, then those in the "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         // second column etc.        "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         for  ( i=1; i <= iMaxColumns; i++ ) "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         { "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            iColNbr = i; "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            // If we are onto a new dashboard column, put the closing tag on the previous column "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            if ( i != 1 ) "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            { "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "%> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                  </div> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<% "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            } "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "%> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                  <div id=^column-<%=iColNbr%>^> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<% "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            // These variables are used in the Expand function. "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            iColStartNbr = iDashboardCnt; "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            iColEndNbr = (iColStartNbr + iMaxInCol) - 1; "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            if (iColEndNbr > iDashboardMax ) "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               iColEndNbr = iDashboardMax; "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            nRC = " + vDialog.CtrlMapView.Name + ".cursor( ^DashboardFrameUser^).setFirst( ^wColumnNbr^, i, ); "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            while ( nRC >= 0 ) "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            { "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               szDisplayFrame = " + vDialog.CtrlMapView.Name + ".cursor( ^DashboardFrameUser^).getStringFromAttribute( ^ActiveOnCurrentDashboard^ ); "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               iSortOrder = " + vDialog.CtrlMapView.Name + ".cursor( ^DashboardFrameUser^ ).getIntegerFromAttribute( ^PresentationSortOrder^ ); "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               if ( iSortOrder <= 0 ) "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               { "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                  iSortOrder = iDashboardCnt; "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                  " + vDialog.CtrlMapView.Name + ".log().debug(^*** There is no sort order *** ^, iSortOrder ); "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               } "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               " + vDialog.CtrlMapView.Name + ".cursor( ^DashboardFrameUser^ ).setAttribute( ^wFrameNbr^, iDashboardCnt ); "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               //" + vDialog.CtrlMapView.Name + ".log().debug(^*** Dashboard Column *** ^, iColNbr ); "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               if ( szDisplayFrame.equals( ^Y^ ) ) "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               { "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                  szDashboardSource = " + vDialog.CtrlMapView.Name + ".cursor( ^DashboardFrame^ ).getStringFromAttribute( ^DashboardDisplayURL^ ); "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                  szDashboardMore = " + vDialog.CtrlMapView.Name + ".cursor( ^DashboardFrame^ ).getStringFromAttribute( ^ExpandedDisplayURL^ ); "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                  szFunction = ^Expand(this, ^ + iDashboardCnt + ^, ^ + iColNbr + ^, ^ + iColStartNbr + ^, ^ + iColEndNbr + ^)^; "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                  //" + vDialog.CtrlMapView.Name + ".log().debug(^*** Expand Function *** ^, szFunction );         "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "%> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                     <div id=^rpt-display-<%=iDashboardCnt%>^ class=^region-display^> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                       <div class=^region-header^> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                         <div id=^rpt-display-title-<%=iDashboardCnt%>^ class=^region-header-title^ >A Report <%=iSortOrder%> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                         </div> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                         <div id=^rpt-display-expand-<%=iDashboardCnt%>^ class=^region-header-title-expand^ title=^Expand^ onclick=^<%=szFunction%>^> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                         </div> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                         <div id=^rpt-display-open-<%=iDashboardCnt%>^ class=^region-header-title-open^ title=^More Detail...^ onclick=^OpenFrame(this,'<%=szDashboardMore%>' );^> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                         </div> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                       </div> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                       <div id=^rpt-display-content-<%=iDashboardCnt%>^ class=^region-body-content^ > "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                          <iframe src=^<%=szDashboardSource%>^ width=^100%^ height=^100%^> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                          </iframe> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                       </div> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                     </div> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<% "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "    "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                   iDashboardCnt++; "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               } // if ( szDisplayFrame.equals( ^Y^ ) ) "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               nRC =  " + vDialog.CtrlMapView.Name + ".cursor( ^DashboardFrameUser^, ^wColumnNbr^, i ).setNextContinue(); "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            } // While "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            //vComboBox2.drop(); "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         }  // For each i "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         // Now close the last column div. "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "%> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                  </div> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<% "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = " "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      } // if CheckExistenceOfEntity "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   } "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "%> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                        
            
            
            
            
//*****************************************  END OF DASHBOARD   ********************************************************            
            
            szWriteBuffer = "</div>  <!-- " + szCtrlTag + " --> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            
         ELSE
         IF  sziFrameFlag = "Y" 

            // If we are not using absolute positioning, then make all the divs
            // float left.
            IF  szNoPositioning = "Y" 
               zAppendQuotedString( szAbsoluteStyle, "float:left;", "style=", "^" )
            END

            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            // Div on a Group Control requests that all the controls inside the group line up one under the other.
            szClass = vDialog.Control.CSS_Class
            IF szClass = ""
               szWriteBuffer = "<iframe " + szAbsoluteStyle + " name=^" + szCtrlTag + "^ id=^" + szCtrlTag + "^ src=^" + vDialog.Control.WebFileName + "^>  <!-- " + vDialog.Control.Tag + " --> "
            ELSE
               szWriteBuffer = "<iframe class=^" + szClass + "^ " + szAbsoluteStyle + ">  <!-- " + vDialog.Control.Tag + " --> "
            END
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            szWriteBuffer = "</iframe>  <!-- " + vDialog.Control.Tag + " --> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            
         ELSE
         // Div is the default group for now so we don't have to check
         // IF szDivFlag = "Y" for the moment.
         //IF szDivFlag = "Y"

            // Add Scrollable if requested.
            IF szScrollableFlag = "Y"
               zAppendQuotedString( szAbsoluteStyle, "overflow:auto;", "style=", "^" )
            END

            // If we are not using absolute positioning, then make all the divs
            // float left.
            IF  szNoPositioning = "Y" 
               zAppendQuotedString( szAbsoluteStyle, "float:left;", "style=", "^" )
            END

            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            // Div on a Group Control requests that all the controls inside the group line up one under the other.
            szClass = vDialog.Control.CSS_Class
            IF szClass = ""
               szWriteBuffer = "<div" + szHTMLCtrlID + szAbsoluteStyle + ">  <!-- " + vDialog.Control.Tag + " --> "
            ELSE
               szWriteBuffer = "<div" + szHTMLCtrlID + "class=^" + szClass + "^ " + szAbsoluteStyle + ">  <!-- " + vDialog.Control.Tag + " --> "
            END
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            
            // Should we put reCAPTCHA code here???  Or should I have done this up above?
            IF szreCAPTCHAFlag = "Y"
               szWriteBuffer = "<script type=^text/javascript^"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   src=^https://api-secure.recaptcha.net/challenge?k=" + vDialog.Control.WebreCAPTCHAPublicKey + "^"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "</script>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

               szWriteBuffer = "<noscript>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   <iframe src=^https://api-secure.recaptcha.net/noscript?k=" + vDialog.Control.WebreCAPTCHAPublicKey + "^"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "       height=^300^ width=^500^ frameborder=^0^></iframe><br>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   <textarea name=^recaptcha_challenge_field^ rows=^3^ cols=^40^>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   </textarea>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   <input type=^hidden^ name=^recaptcha_response_field^"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "       value=^manual_challenge^"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "</noscript>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
             
            ELSE
            
            // KJS 09/19/08 - Adding the ability to include a file inside a div.  I am assuming that if there
            // is an include file, there will be nothing else inside the div so we dont' need to call
            // GenJSPJ_CrteCtrlsRecurs.
            IF  szIncludeFileFlag = "Y"

               szWriteBuffer = ""
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "<%@include file=^" + vDialog.Control.WebFileName + "^ %>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = ""
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
             
            ELSE
               // Only put this in if there was no web type.  We might want to change this
               // later.
               IF  szDivFlag = "" 
                  IF vDialog.Control.Text != ""
                     szWriteBuffer = "<div " + szHTMLCtrlID + ">" + vDialog.Control.Text + "</div>"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  END
               END

               OrderEntityForView( vDialog, "CtrlCtrl", "PSDLG_Y A PSDLG_X A" )
               // Create view for Group as a parent. This will be used in processing subcontrols to check for WebControlProperty.
               CreateViewFromView( vGroupParent, vDialog )
               TraceLineS("*** About to call recurs code from div *** ", vDialog.Control.Tag )
               SetViewToSubobject( vDialog, "CtrlCtrl" )
               szIndentGroup = szIndent
               GenJSPJ_CrteCtrlsRecurs( vDialog, vGroupParent, vDialogRoot, lFile, szWriteBuffer, szIndentGroup,
                                       TableRowCnt, szNoPositioning, lOffsetX, lOffsetY )
               ResetViewFromSubobject( vDialog )
               DropView( vGroupParent )
               vGroupParent = 0
            END
            END
            
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "</div>  <!--  " + szCtrlTag + " --> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         END
         END
         END
         END
         END

      ELSE  // Not a groupbox
         IF szControlType = "Text"  // TEXT
            TraceLineS("*** Creating Text *** ", szCtrlTag )
            GenJSPJ_CrteText( vDialog, vGroupParent, vDialogRoot, lFile, szWriteBuffer, szIndent, szCtrlTag,
                             szJustify, szNoPositioning, lOffsetX, lOffsetY )
         END

         IF szControlType = "EditBox"  // EDITBOX
            GenJSPJ_CrteEditBox( vDialog, lFile, szWriteBuffer, szIndent, szCtrlTag,
                                "", szJustify, szNoPositioning, lOffsetX, lOffsetY )
         END

         IF szControlType = "Calendar"  // CALENDAR
            GenJSPJ_CrteCalendar( vDialog, lFile, szWriteBuffer, szIndent, szCtrlTag,
                                 "", szJustify, szNoPositioning, lOffsetX, lOffsetY )
         END

         IF szControlType = "RadioGrp" // RADIO BUTTON GROUP
            szRadioGroupName = szCtrlTag
            szWriteBuffer = "<% strErrorMapValue = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            IF vDialog.CtrlMapView EXISTS
               szWriteBuffer = "   " + vDialog.CtrlMapView.Name + " = " +
                               "task.getViewByName( ^" + vDialog.CtrlMapView.Name + "^ );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   if ( " + vDialog.CtrlMapView.Name + " == null )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      " + vDialog.CtrlMapView.Name +
                               ".log().debug( ^Invalid View: ^, ^" + szCtrlTag + "^ );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   else"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      nRC = " + vDialog.CtrlMapView.Name +
                               ".cursor( ^" +
                               vDialog.CtrlMapRelatedEntity.Name + "^ ).checkExistenceOfEntity();"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      if ( nRC >= 0 )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         strRadioGroupValue = " +
                               vDialog.CtrlMapView.Name + ".cursor( ^" +
                               vDialog.CtrlMapRelatedEntity.Name + "^ ).getStringFromAttribute( ^" +
                               vDialog.CtrlMapER_Attribute.Name + "^ );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            END

            szWriteBuffer = "%>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            //KJS 11/14/07 - I don't think there should always be a box around radio buttons.
            //I'm going to do this like the way group box is (or was).  If there is text
            //to go on the box then we will create <fieldset.  If there is no text then
            //we will create a div.
            //KJS 10/07/09 - I added the id to this <div but then realized that the radio buttons also have this
            //id, so I am adding "gb" in front of the control tag.  Not sure how much we care that this div has
            //an id and name but think it should.
            IF vDialog.Control.Text = ""
               szWriteBuffer = "<div id=^gb" + szCtrlTag + "^ name=^gb" + szCtrlTag + "^ " + szAbsoluteStyle + ">"
            ELSE
               szWriteBuffer = "<fieldset " + szAbsoluteStyle + ">"
            END
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            IF vDialog.Control.Text != ""
               szWriteBuffer = "<div>" + vDialog.Control.Text + "</div>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            END

            OrderEntityForView( vDialog, "CtrlCtrl", "PSDLG_Y A PSDLG_X A" )
            SetViewToSubobject( vDialog, "CtrlCtrl" )
            szIndentGroup = szIndent + "   "
            GenJSPJ_CrteCtrlsRadio( vDialog, lFile, szWriteBuffer, szIndentGroup,
                                   szRadioGroupName, szNoPositioning, lOffsetX, lOffsetY )
            ResetViewFromSubobject( vDialog )
            IF vDialog.Control.Text = ""
               szWriteBuffer = "</div>"
            ELSE
               szWriteBuffer = "</fieldset>"
            END
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

         END

         IF szControlType = "CheckBox"  // CHECKBOX
            GenJSPJ_CrteCheckBox( vDialog, lFile, szWriteBuffer, szIndent, szCtrlTag,
                                 "", szJustify, szNoPositioning, lOffsetX, lOffsetY )
         END

         IF szControlType = "PushBtn"  // PUSH BUTTON
            szActionName = ""
            IF vDialog.EventAct EXISTS
               szActionName = vDialog.EventAct.Tag
               nRC = zstrcmpi( szActionName, "alt-f4" )
               IF nRC = 0
                  szActionName = "AltF4"
               END
            END

            CreateTabIndexString( vDialog, szTabIndex )
            szAbsoluteStyle = szAbsoluteStyle + szTabIndex
         // szWriteBuffer = "<button name=^" + szCtrlTag + "^ onclick=^" +
         //                 szActionName + "( )^ " + "value=^^" + szAbsoluteStyle +
         //                 ">" + vDialog.Control.Text + "</button>"

            szText = vDialog.Control.Text
            // Set Class as either null or with Class value.
            IF vDialog.Control.CSS_Class = ""
               szClass = ""
            ELSE
               szClass = "class=^" + vDialog.Control.CSS_Class + "^ "
            END

            //If we put a title on the control, when the mouse is hovered over the control, this text will display.
            szTitleHTML = ""
            szTitle = vDialog.Control.DIL_Text
            IF szTitle != ""
               szTitleHTML = " title=^" + szTitle + "^ "
            END

            //KJS 10/19/07 - Added title.
            /*
            IF szWebCtrlType = "Button"
               szWidget = "<button type=^button^ " + szClass + szTitleHTML + "name=^"
               szTerm = szText + "</button>"
               szText = ""
            ELSE
               szWidget = "<input type=^submit^ " + szClass + szTitleHTML + "name=^"
               szTerm = ""
            END
            */
               szWidget = "<button type=^button^ " + szClass + szTitleHTML + "name=^"
               szTerm = szText + "</button>"
               szText = ""

            szParentWebType = ""
            IF vGroupParent != 0
               SET CURSOR FIRST vGroupParent.WebControlProperty WHERE vGroupParent.WebControlProperty.Name = "Relative Positioning"
               IF RESULT >= zCURSOR_SET
                  szParentWebType = "RelativePos"
               ELSE
                  szParentWebType = vGroupParent.Control.WebCtrlType
               END
            END
            IF szParentWebType = "Div" OR szParentWebType = "DivScroll" OR
               szParentWebType = "Span"

               szWriteBuffer = "<p></p>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               CreateSizeString( vDialog, szSize )
               szWriteBuffer = szWidget + szCtrlTag + "^ id=^" + szCtrlTag + "^ value=^" + szText + "^ onclick=^" +
                               szActionName + "( )^ " + "style=^" + szSize + "^>" + szTerm
            ELSE
               szWriteBuffer = szWidget + szCtrlTag + "^ id=^" + szCtrlTag + "^ value=^" + szText + "^ onclick=^" +
                               szActionName + "( )^ " + szAbsoluteStyle + ">" + szTerm
            END
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
         END  //End of PushBtn

         IF szControlType = "ComboBox"  // COMBOBOX
            GenJSPJ_CrteComboBox( vDialog, lFile, szWriteBuffer, szIndentGroup,
                                 szCtrlTag, "", szNoPositioning, lOffsetX, lOffsetY )
         END

         IF szControlType = "Bitmap" OR szControlType = "BitmapBtn"  // BITMAP / JPG
            GenJSPJ_CrteJPG( vDialog, lFile, szWriteBuffer, szIndent,
                            szCtrlTag, szNoPositioning, lOffsetX, lOffsetY )
         END

         IF szControlType = "ListBox"  // LISTBOX
            GenJSPJ_CrteListBox( vDialog, lFile, szWriteBuffer, szIndentGroup,
                                 szCtrlTag, szNoPositioning, lOffsetX, lOffsetY )
         END  // IF szControlType = "ListBox"
         
         IF szControlType = "GroupBox" AND szRepeatingGroupFlag = "Y"  // REPEATING GROUP

            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            //szWriteBuffer = "<% /* REPEATING GROUP BEGIN */ %>"
            szWriteBuffer = "<!-- REPEATING GROUP BEGIN -->"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            szWriteBuffer = "<%"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            // Begin with JSP first cursor loop.
            IF vDialog.CtrlMapView EXISTS
               szWriteBuffer = "   nRC = " + vDialog.CtrlMapView.Name + " = " + "task.getViewByName( ^" +
                               vDialog.CtrlMapView.Name + "^ );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   if ( " + vDialog.CtrlMapView.Name + " == null )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               // See if a scoping entity has been specified, and if so, use it.
               CreateViewFromView( vDialog2, vDialog )
               SET CURSOR NEXT vDialog2.CtrlMap
               IF vDialog2.CtrlMapLOD_Entity EXISTS
                  szScopingEntityName = "^" + vDialog2.CtrlMapLOD_Entity.Name + "^"
               ELSE
                  szScopingEntityName = ""
               END

               DropView( vDialog2 )

               szWriteBuffer = "      nRC = " + vDialog.CtrlMapView.Name +
                               ".cursor( ^" + vDialog.CtrlMapLOD_Entity.Name +
                               "^).setFirst( " + szScopingEntityName + " );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      while ( nRC >= 0 )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            END

            szWriteBuffer = "%>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            // Process GroupBox begin.
            
            //KJS 09/11/08 - Now that we can generate using relative positioning, this
            // repeating group doesn't work right.  Instead of using fieldset, I will use the
            // div.
            IF  szNoPositioning = "Y"
               szClass = vDialog.Control.CSS_Class
               IF szClass = ""
                  szWriteBuffer = "<div " + szAbsoluteStyle + "> <!-- div for repeating group --> "
               ELSE
                  szWriteBuffer = "<div class=^" + szClass + "^ " + szAbsoluteStyle + ">  <!-- div for repeating group -->"
               END
            ELSE 
               CreateRelStyleString( vDialog, szRelStyle, 0, 0, "" )
               szClass = vDialog.Control.CSS_Class
               IF szClass = ""
                  szWriteBuffer = "<fieldset " + szRelStyle + ">"
               ELSE
                  szWriteBuffer = "<fieldset class=^" + szClass + "^ " + szRelStyle + ">"
               END
            END
               
            
            
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            IF vDialog.Control.Text != ""
               szWriteBuffer = "<div>" + vDialog.Control.Text + "</div>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            END
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            // Process fields on GroupBox.
            OrderEntityForView( vDialog, "CtrlCtrl", "PSDLG_Y A PSDLG_X A" )
            // Create view for Group as a parent. This will be used in processing subcontrols to check for WebControlProperty.
            CreateViewFromView( vGroupParent, vDialog )
            SetViewToSubobject( vDialog, "CtrlCtrl" )
            szIndentGroup = szIndent + "   "
            GenJSPJ_CrteCtrlsRecurs( vDialog, vGroupParent, vDialogRoot, lFile, szWriteBuffer, szIndentGroup,
                                    TableRowCnt, szNoPositioning, lOffsetX, lOffsetY )
            ResetViewFromSubobject( vDialog )
            DropView( vGroupParent )
            vGroupParent = 0

            // Process GroupBox end.
            IF  szNoPositioning = "Y" 
               szWriteBuffer = "</div>   <!-- end div for repeating group -->"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "<div style=^clear:both;^></div> <!-- clear before each repeating group -->"
            ELSE
               szWriteBuffer = "</fieldset>"
            END
            
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            szWriteBuffer = "<%"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            // Conclude with JSP next cursor loop.
            IF vDialog.CtrlMapView EXISTS
               szWriteBuffer = "         nRC = " + vDialog.CtrlMapView.Name +
                               ".cursor( ^" + vDialog.CtrlMapLOD_Entity.Name +
                               "^ ).setNextContinue( " + szScopingEntityName + " );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            END

            szWriteBuffer = "%>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            //szWriteBuffer = "<% /* REPEATING GROUP END */ %>"
            szWriteBuffer = "<!-- REPEATING GROUP END -->"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

         END

         // Generation of the Tab control
         IF szControlType = "Tab"

            IF  vDialog.Control.CSS_Class != ""
               szClass = "tab-pane " + vDialog.Control.CSS_Class
            ELSE
               szClass = "tab-pane"
            END
            
            // If we are using relative positioning, don't give the tab a height.
            IF  szNoPositioning = "Y"
               // We might not want the groupbox to have a height (so it grows)
               zIntegerToString( szWidth, 10, vDialog.Control.SZDLG_X * DLUnits )
               szAbsoluteStyle = "style=^width:" + szWidth + "px;^"
            END
         

            // Create the parent tab control
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<div id=^" + szCtrlTag + "^ class=^" + szClass + "^ " + szAbsoluteStyle + "> <!-- Beginning of Tab Control " + szCtrlTag + " -->"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            //<script type="text/javascript">tp1 = new WebFXTabPane( document.getElementById( "tabPane1" ) );</script>
            szWriteBuffer = "<script type=^text/javascript^>" + szCtrlTag + " = new WebFXTabPane( document.getElementById( ^" + szCtrlTag + "^ ) );</script>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            zIntegerToString( szHeight, 10, vDialog.Control.SZDLG_Y * DLUnits )


            // If we are using relative positioning, don't give each tab page a height.
            IF  szNoPositioning = "Y"
               szStyle = ""
            ELSE
               szStyle = "style=^height:" + szHeight + "px;^"
            END


            // Set to the ctrl subobject to loop thru the tabs on the tab control
            SetViewToSubobject( vDialog, "CtrlCtrl" )
            OrderEntityForView( vDialog, "Control", "Type A" )

            FOR EACH vDialog.Control

               szCtrlCtrlTag = vDialog.Control.Tag

               IF  vDialog.Control.CSS_Class != ""
                  szClass = "tab-page " + vDialog.Control.CSS_Class
               ELSE
                  szClass = "tab-page "
               END

               // Currently there are three actions associated with the tab (premapoi, postmapoi and preleae) currently I can only see
               // onclick working so I am not going to worry about pre-leae yet.  Also, we are not differenciating between the
               // premapoi and postmapoi, just take the action if one of these exists.
               szActionName = ""
               FOR  EACH  vDialog.EventAct
                  IF  vDialog.Event.Type = "1" OR vDialog.Event.Type = "3"
                     szActionName = vDialog.EventAct.Tag
                     nRC = zstrcmpi( szActionName, "alt-f4" )
                     IF nRC = 0
                        szActionName = "AltF4"
                     END
                  END
               END

               szWriteBuffer = "<div id=^" + szCtrlCtrlTag + "^ class=^" + szClass + "^ " + szStyle + "> <!-- Tab item " + szCtrlCtrlTag + " -->"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               IF  szActionName = ""
                  szWriteBuffer = "<h2 class=^tab^><span>" + vDialog.Control.Text +"</span></h2>"
               ELSE
                  szWriteBuffer = "<h2 class=^tab^><span onclick=^" + szActionName + "();^>" + vDialog.Control.Text +"</span></h2>"
               END
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "<script type=^text/javascript^>" + szCtrlTag + ".addTabPage( document.getElementById( ^" + szCtrlCtrlTag + "^ ) );</script>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

               szIndentGroup = szIndent
               CreateViewFromView( vGroupParent, vDialog )
               //Set to ctrl subobject and generate the controls that are on this tab
               SetViewToSubobject( vDialog, "CtrlCtrl" )
               GenJSPJ_CrteCtrlsRecurs( vDialog, vGroupParent, vDialogRoot, lFile, szWriteBuffer, szIndentGroup,
                                       TableRowCnt, szNoPositioning, lOffsetX, lOffsetY )

               ResetViewFromSubobject( vDialog )
               DropView( vGroupParent )
               vGroupParent = 0               
               szWriteBuffer = "</div> <!-- End of Tab item " + szCtrlCtrlTag + " -->"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            END

            ResetViewFromSubobject( vDialog )
            szWriteBuffer = "</div> <!-- End of Tab Control " + szCtrlTag + " -->"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            szWriteBuffer = "<script type=^text/javascript^>setupAllTabs();</script>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
         END  // End of tab control


//********************** START OF GRID ***********************************

         IF szControlType = "Grid"   // SPREADSHEET

            lSubtypeX = vDialog.Control.ExtendedStyle

            // #define zSS_SORTEDHEADERS 0x00040000 = 262144
            // #define zSS_REMEMBERSORT  0x00020000 = 131072

            lSort = IsFlagSequenceSet( lSubtypeX, 262144 )
            IF lSort = 0
               lSort = IsFlagSequenceSet( lSubtypeX, 131072 )
            END

            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            TableRowCnt = TableRowCnt + 1   // Set up iTableRowCnt variable suffix.
            szSuffix = TableRowCnt
         // X_Size = vDialog.Control.SZDLG_X
         // Width = X_Size * 2
         // zIntegerToString( szWidth, 10, Width )

            //KJS 02/12/08 - We had been looping through CtrlCtrl instead of setting
            //the view to the subobject but if there is a hidden column, then
            //we don't want to count that column so we need to look at the web properties.
            SetViewToSubobject( vDialog, "CtrlCtrl" )
            lColCnt = 0
            FOR EACH vDialog.Control
               SET CURSOR  FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Hidden"
               //Don't count this if it is hidden.
               IF RESULT < zCURSOR_SET
                  lColCnt = lColCnt + 1
               END
            END
            ResetViewFromSubobject( vDialog )

            //lColCnt = 0
            //FOR EACH vDialog.CtrlCtrl
            //   lColCnt = lColCnt + 1
            //END

            //KJS 7/26/07 - Previously the "cols=..." was only being added to the
            //table def if the headers were sortable.  In trying to get the absolute width
            //to work for individual columns, it seems I need this set so I am going to always
            //set "cols=...".
            szColCount = ""
            IF  lColCnt > 0
               zIntegerToString( szPosition, 10, lColCnt )
               szColCount = " cols=" + szPosition
            END

            szClass = vDialog.Control.CSS_Class
            //If there is no sorting of headers...
            IF lSort = 0
               IF szClass = ""
                  szSort = ""
               ELSE
                  szSort = "class=^" + szClass + "^"
               END
            // TraceLineS( "Table not sorted: ", vDialog.Control.Tag )
            ELSE
            //Headers are being sorted
            // TraceLineS( "Table sorted: ", vDialog.Control.Tag )
               IF szClass = ""
                  szSort = "class=^sortable^ "
               ELSE
                  szSort = "class=^sortable " + szClass + "^ "
               END
            END
            
            // Reset szPosition from using is above as the column count.
            szPosition = ""

            // If szNoPositioning is null then we are not using absolute positioning.
            IF  szNoPositioning = "" 
               // Set up "top" and "left" positions for absolute positioning.
               CreateAbsolPosStringTable( vDialog, szPosition, 0, 0 )
            END

            // If Absolute Width is requested, add Width to szPosition.
            SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Absolute Width"
            IF RESULT >= zCURSOR_SET
               PIX_PER_DU( vDialog, DLUnits )
               zIntegerToString( szWidth, 10, vDialog.Control.SZDLG_X * DLUnits )
               szPosition = szPosition + "width:" + szWidth + "px;"
               // The width in percent of the table will be the pixel width divided by 400. Multiplying by 100 gives
               // an integer value of the percent.
               //WidthPercent = (Width * 100) / 400
               //szWidth = WidthPercent
            END

            szClass = vDialog.Control.CSS_Class

            szWebCtrlType = ""
            IF vGroupParent != 0
               SET CURSOR FIRST vGroupParent.WebControlProperty WHERE vGroupParent.WebControlProperty.Name = "Relative Positioning"
               IF RESULT >= zCURSOR_SET
                  szWebCtrlType = "RelativePos"
               ELSE
                  szWebCtrlType = vGroupParent.Control.WebCtrlType
               END
            END

            // KJS 6/19/08 - We want to add filtering on a table.  If the user chooses the web control property "Filter Rows" then 
            // they need to have an attribute on the table entity called wHideTableRow.  If this attribute is set to "Y" then
            // that entity will not be displayed in the table.
            szFilterTable = ""
            SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Filter Rows (wHideTableRow='Y')" 
            IF RESULT >= zCURSOR_SET
               szFilterTable = "Y"
            END
            
            // KJS 05/06/09 - I am placing this div around the <table> being generated so that if there is a 
            // WebGridNoDataMessage, I can create this message under the table lined up with the table.  Otherwise,
            // I need to save any spacing that happens before this grid.
            IF vDialog.Control.WebNoGridDataMessage != "" 
               szWriteBuffer = "<div style=^float:left^>  <!-- Div around the table, this is for the message if no data -->"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            END

            szScrollingTable = ""
            //KJS 04/10/08 - Want to try and add a scrolling table with stationary headings.
            SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Scrolling Table"
            IF RESULT >= zCURSOR_SET
               szScrollingTable = "Y"
               szWriteBuffer = "<div class=^tableScroll^ "
               PIX_PER_DU( vDialog, DLUnits )
               zIntegerToString( szHeight, 10, vDialog.Control.SZDLG_Y * DLUnits )
               // For the scrollable table we need to give the table a height.
               szPosition = szPosition + "height:" + szHeight + "px;"

               IF szWebCtrlType = "RelativePos" OR szWebCtrlType = "Span"
                  szWriteBuffer= szWriteBuffer + " style=^position:relative;width:" + szWidth + "px;height:" + szHeight + "px;^>"
               ELSE
                  szWriteBuffer= szWriteBuffer + " style=^" + szPosition + "^>"
               END
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

               szWriteBuffer = "<table name=^" + szCtrlTag + "^ id=^" + szCtrlTag + "^ cellspacing=0 " + szSort + szColCount + "  >"
            ELSE

               IF szWebCtrlType = "RelativePos" OR szWebCtrlType = "Span"
                  szWriteBuffer = "<table " + szSort + szColCount + " style=^position:relative^  name=^" + szCtrlTag + "^ id=^" + szCtrlTag + "^>"
               ELSE
                  szWriteBuffer = "<table " + szSort + szColCount + " style=^" + szPosition + "^  name=^" + szCtrlTag + "^ id=^" + szCtrlTag + "^>"
               END
            END

            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            // Process Grid Headings, unless "NoHeadings" is requested.
            // Create a Class statement for each column in the list.
            lSubtype = vDialog.Control.Subtype
            lHeader = IsFlagSequenceSet( lSubtype, 262144 ) // zSS_HIDEROWHEADER = zCONTROL_SPECIFIC_1
            IF lHeader = 0     // NoHeader was not set
               IF lSort = 0
                  szWriteBuffer = "<thead><tr>"
               ELSE
                  szWriteBuffer = "<thead bgcolor=green><tr>"
               END

               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

               OrderEntityForView( vDialog, "CtrlCtrl", "PSDLG_X A" )

               SetViewToSubobject( vDialog, "CtrlCtrl" )
               lCol = 0
               //Loop through each field in the grid and create the headers
               FOR EACH vDialog.Control

                  szCtrlCtrlType = vDialog.ControlDef.Tag
                  IF szCtrlCtrlType = "GridSubCtl" AND vDialog.CtrlCtrl EXISTS
                     SetViewToSubobject( vDialog, "CtrlCtrl" )
                     bResetToPlaceHolder = 1
                     szCtrlCtrlType = vDialog.ControlDef.Tag
                  ELSE
                     bResetToPlaceHolder = 0
                  END

                  //KJS 2/12/2008
                  SET CURSOR  FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Hidden"

                  //Don't ceate a header if this control is hidden
                  IF RESULT < zCURSOR_SET

                     IF szCtrlCtrlType = "PushBtn"  // PUSH BUTTON
                        lPushBtn = 1
                     ELSE
                        lPushBtn = 0
                     END

                     //KJS 7/26/07 - If we want "Absolute Width" for this control, we should put the
                     //width on the <th> as well as on the <td>.
                     SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Absolute Width"
                     IF RESULT >= zCURSOR_SET
                        szWCP_AbsoluteWidth = "Y"
                     ELSE
                        szWCP_AbsoluteWidth = "N"
                     END

                     // If Absolute Width is requested.
                     szAbsoluteWidth = ""
                     IF szWCP_AbsoluteWidth = "Y"
                        PIX_PER_DU( vDialog, DLUnits )
                        zIntegerToString( szWidth, 10, vDialog.Control.SZDLG_X * DLUnits )
                        szAbsoluteWidth = "width:" + szWidth + "px;"
                     END


                     // Set Grid Title either from static text or variable.
                     SET CURSOR FIRST vDialog.CtrlMap WHERE vDialog.CtrlMap.Tag = "Variable Header"
                     IF RESULT >= zCURSOR_SET
                        //Yes, there is a variable header.
                        IF szWriteBuffer != "   }"
                           // The last entry was NOT a variable text, so create the "<%" statement.
                           szWriteBuffer = "<%"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        END
                        szWriteBuffer = "   " + vDialog.CtrlMapView.Name + " = " +
                                        "task.getViewByName( ^" + vDialog.CtrlMapView.Name + "^ );"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "   if ( " + vDialog.CtrlMapView.Name + " == null )"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "   {"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "      nRC =  " + vDialog.CtrlMapView.Name +
                                     ".cursor( ^" + vDialog.CtrlMapRelatedEntity.Name + "^ ).checkExistenceOfEntity();"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "      if ( nRC >= 0 )"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        IF vDialog.CtrlMapER_Domain.MaxStringLth > 200
                           lMaxStringLength = vDialog.CtrlMapER_Domain.MaxStringLth
                           szMaxStringLength = lMaxStringLength
                        ELSE
                           szMaxStringLength = "200"
                        END
                        szWriteBuffer = "         strErrorMapValue =  " + vDialog.CtrlMapView.Name +
                                     ".cursor( ^" + vDialog.CtrlMapRelatedEntity.Name +
                                     "^ ).getStringFromAttribute( ^" + vDialog.CtrlMapER_Attribute.Name + "^ );"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "       else"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "          strErrorMapValue = ^^;"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "   }"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "    else"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "       strErrorMapValue = ^^;"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "   if ( strErrorMapValue.length( ) > 0 )"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "   {"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "%>"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        IF  szAbsoluteWidth = ""
                           szWriteBuffer = "   <th><%=strErrorMapValue%></th>"
                        ELSE
                           szWriteBuffer = "   <th style=^" + szAbsoluteWidth + "^><%=strErrorMapValue%></th>"
                        END
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "<%"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "   }"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     ELSE
                        // The Title is a constant.
                        IF szWriteBuffer = "   }"
                           // The last entry was a variable text, so create the "%>" statement.
                           szWriteBuffer = "%>"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        END

                        // If this is sortable and this is a pushbutton on the grid...
                        IF lSort != 0 AND lPushBtn != 0
                           IF  szAbsoluteWidth = ""
                              szWriteBuffer = "   <th class=^gridheading^>" + vDialog.Control.Text
                           ELSE
                              szWriteBuffer = "   <th style=^" + szAbsoluteWidth + "^ class=^gridheading^>" + vDialog.Control.Text
                           END
                        ELSE
                           IF  szAbsoluteWidth = ""
                              szWriteBuffer = "   <th"
                           ELSE
                              szWriteBuffer = "   <th style=^" + szAbsoluteWidth + "^"
                           END

                           //If this column is for a checkbox with no header text, we are creating a checkbox so that
                           //the user can "select all" for this column.  Because of this, we do not want this
                           //column to be able to sort.  Put on the class "gridheading" which keeps this column
                           //from sorting.
                           IF vDialog.Control.Text = "" AND vDialog.ControlDef.Tag = "GridCheckCtl"
                              szWriteBuffer = szWriteBuffer + " class=^gridheading^"
                           END

                           //Put the ending on the tag and the text if there is any.
                           szWriteBuffer = szWriteBuffer + ">" + vDialog.Control.Text
                        END



                        //KJS 10/19/07 - If there is no Text and the control is a checkbox, then we want to create a
                        //checkbox in the header with an onclick to "CheckAllInGrid"
                        //Need to put class="gridheading" on <th>.
                        //I shouldn't have to do this for the variable headers (code up above) because we are only doing this
                        //if there is no header text.
                        IF vDialog.Control.Text = "" AND vDialog.ControlDef.Tag = "GridCheckCtl"
                           szWriteBuffer = szWriteBuffer + "<input type=^checkbox^ onclick=^CheckAllInGrid(this,'" + vDialog.Control.Tag +"')^>"
                        ELSE
                           szWriteBuffer = szWriteBuffer + ""
                        END

                        szWriteBuffer = szWriteBuffer + "</th>"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     END

                  END //End of checking if the current control is hidden.

                  IF bResetToPlaceHolder = 1
                     ResetViewFromSubobject( vDialog )
                  END

               END  //End of looping through each field in the grid and creating the headers.

               // If the last entry was a variable text, create the "" statement.
               IF szWriteBuffer = "   }"
                  szWriteBuffer = "%>"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
               ELSE
                  szWriteBuffer = ""
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               END

               ResetViewFromSubobject( vDialog )

               szWriteBuffer = "</tr></thead>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            END

            IF szScrollingTable = "Y"
               // Make tbody's height 50px (this might not always be right) less than the div height.  Otherwise you get a
               // scrollbar within the scrollbar.
               zIntegerToString( szHeight, 10, vDialog.Control.SZDLG_Y * DLUnits - 50 )
               szWriteBuffer = "<tbody height=^" + szHeight + "px;^>"
            ELSE
               szWriteBuffer = "<tbody>"
            END
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            szWriteBuffer = "<%"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            IF vDialog.CtrlMapView EXISTS
            
               szWriteBuffer = "   iTableRowCnt = 0;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   " + vDialog.CtrlMapView.Name + " = " +
                               "task.getViewByName( ^" + vDialog.CtrlMapView.Name + "^ );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   if ( " + vDialog.CtrlMapView.Name + " == null )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               //szWriteBuffer = "      int    iTableRowCnt" + szSuffix + " = 0;"
               //WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      long    lEntityKey;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      String strEntityKey;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      String strButtonName;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      String strOdd;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      String strTag;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               
               IF szFilterTable = "Y"
                  szWriteBuffer = "      String strFilter;"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               END
               
               //szWriteBuffer = "      iTableRowCnt = 0;"
               //WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               

               OrderEntityForView( vDialog, "CtrlCtrl", "PSDLG_X A" )

               SetViewToSubobject( vDialog, "CtrlCtrl" )

               // Create a work variable for each column in the list.
               FOR EACH vDialog.Control

                  szCtrlCtrlType = vDialog.ControlDef.Tag
                  IF szCtrlCtrlType = "GridSubCtl" AND vDialog.CtrlCtrl EXISTS
                     SetViewToSubobject( vDialog, "CtrlCtrl" )
                     bResetToPlaceHolder = 1
                     szCtrlCtrlType = vDialog.ControlDef.Tag
                  ELSE
                     bResetToPlaceHolder = 0
                  END

                  // KJS 12/14/07 - I added Combobox and GridComboCtl to this because if there is a combobox,
                  // we already get the variables for the combobox while creating the combobox html code.
                  IF szCtrlCtrlType != "PushBtn" AND szCtrlCtrlType != "ComboBox" AND szCtrlCtrlType != "GridComboCtl"
                     szWriteBuffer = "      String str" + vDialog.Control.Tag + ";"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     IF szCtrlCtrlType = "GridCheckCtl"
                        // Checkboxes need the extra work value.
                        szWriteBuffer = "      String str" + vDialog.Control.Tag + "Value;"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     END
                  END

                  SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Edit"
                  IF RESULT >= zCURSOR_SET
                     szWCP_Edit = "Y"
                  ELSE
                     szWCP_Edit = "N"
                  END

                  IF vDialog.Control.WebCtrlType = "Edit" OR szWCP_Edit = "Y"
                     szListCtrlTag = vDialog.Control.Tag
                     szWriteBuffer = "      String str" + szListCtrlTag + "ErrorColor;"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  END


                  // KJS 05/06/09 - First Occurance Only is when the user wants to show only the first occurance of a value in
                  // a table column.  We need to keep track of the last value for the column so we need to create a variable to
                  // hold the last value.
                  SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "First Occurance Only"
                  IF RESULT >= zCURSOR_SET
                     szWriteBuffer = "      String str" + vDialog.Control.Tag + "LV = ^^;  // Last value of this column "
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  END
                  

                  // If the Grid entry requests URL Mapping, generate the variable definition here.
                  SET CURSOR FIRST vDialog.CtrlMap WHERE vDialog.CtrlMap.Tag = "Hyperlink URL"
                  IF RESULT >= zCURSOR_SET
                     // Define variable for URL Mapping.
                     szWriteBuffer = "      String str" + vDialog.Control.Tag + "_URL;"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  END

                  IF bResetToPlaceHolder = 1
                     ResetViewFromSubobject( vDialog )
                  END
               END

               ResetViewFromSubobject( vDialog )
               szWriteBuffer = "      "
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               // KJS 5/1/08 - Jeff is a pain in the butt so I need to add this code.
               // We are creating a temporary view to the table view so that when we loop through the
               // entities to create this grid, we do not loose the original entity position.
               // If you have several grids on one page mapped to the same entity path, when one grid was
               // being painted, that messed up the position of the other grids.
               szGridView = "v" + vDialog.Control.Tag
               szGridOrigViewName = vDialog.CtrlMapView.Name

               szWriteBuffer = "      View " + szGridView + ";"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      " + szGridView + "= " + vDialog.CtrlMapView.Name + ".newView();"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               // See if a scoping entity has been specified, and if so, use it.
               lSubtypeX = vDialog.Control.ExtendedStyle
               lSubtypeX = IsFlagSequenceSet( lSubtypeX, zSS_SCOPE_OI )
               IF lSubtypeX = 0
                  CreateViewFromView( vDialog2, vDialog )
                  SET CURSOR NEXT vDialog2.CtrlMap
                  IF vDialog2.CtrlMapLOD_Entity EXISTS
                     szScopingEntityName = "^" + vDialog2.CtrlMapLOD_Entity.Name + "^"
                  ELSE
                     szScopingEntityName = ""
                  END

                  DropView( vDialog2 )
                  szWriteBuffer = "      nRC2 = " + szGridView +
                                  ".cursor( ^" + vDialog.CtrlMapLOD_Entity.Name +
                                  "^).setFirst( " + szScopingEntityName + " );"
               ELSE
                  szWriteBuffer = "      nRC2 = " + szGridView +
                                  ".SetCursorScopeOI( ^" + vDialog.CtrlMapLOD_Entity.Name + "^, 1 ); // first" // zPOS_FIRST
               END

               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      while ( nRC2 >= 0 )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               
               // Create an "IF" statement to filter rows if one of the web control properties was "Filter Rows"
               IF  szFilterTable = "Y" 

                  szWriteBuffer = "         strFilter = " + szGridView +
                               ".cursor( ^" + vDialog.CtrlMapLOD_Entity.Name +
                               "^ ).getStringFromAttribute( ^wHideTableRow^ );" 
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

                  szWriteBuffer = "         // If the attribute wHideTableRow is null then we want to show this row."
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "         if ( strFilter.length( ) == 0 )"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "         {"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
               END



               //szWriteBuffer = "         strOdd = (iTableRowCnt" + szSuffix + " % 2) != 0 ? ^ class='odd'^ : ^^;"
               szWriteBuffer = "         strOdd = (iTableRowCnt % 2) != 0 ? ^ class='odd'^ : ^^;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               //szWriteBuffer = "         iTableRowCnt" + szSuffix + "++;"
               //WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
               szWriteBuffer = "         iTableRowCnt++;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            // szWriteBuffer = "         strSuffix" + szSuffix + " = Integer.toString( iTableRowCnt" + szSuffix + " );"
            // WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               szWriteBuffer = "         lEntityKey = " + szGridView +
                               ".cursor( ^" + vDialog.CtrlMapLOD_Entity.Name + "^ ).getEntityKey();"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         strEntityKey = Long.toString( lEntityKey );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         strButtonName = ^SelectButton^ + strEntityKey;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

               // Process the subcontrols for mapping.
               SetViewToSubobject( vDialog, "CtrlCtrl" )
               // szIndentGroup = szIndent + "   "
               // Get the mapping attributes for each column in the table. 
               FOR EACH vDialog.Control

                  szCtrlCtrlType = vDialog.ControlDef.Tag
                  IF szCtrlCtrlType = "GridSubCtl" AND vDialog.CtrlCtrl EXISTS
                     SetViewToSubobject( vDialog, "CtrlCtrl" )
                     bResetToPlaceHolder = 1
                     szCtrlCtrlType = vDialog.ControlDef.Tag
                  ELSE
                     bResetToPlaceHolder = 0
                  END

                  szJustify = ""
                  lSubtype = vDialog.Control.Subtype
                  lTemp = IsFlagSequenceSet( lSubtype, zCONTROL_CENTERJUSTIFY )
                  IF lTemp != 0
                     szJustify = " align=^center^"
                  ELSE
                     lTemp = IsFlagSequenceSet( lSubtype, zCONTROL_RIGHTJUSTIFY )
                     IF lTemp != 0
                        szJustify = " align=^right^"
                     END
                  END

                  // Position on display mapping value, which is CtrlMap named "Displayed Text" or unnamed CtrlMap.
                  SET CURSOR FIRST vDialog.CtrlMap WHERE vDialog.CtrlMap.Tag = "Displayed Text"
                  IF RESULT < zCURSOR_SET
                     SET CURSOR FIRST vDialog.CtrlMapLOD_Attribute WITHIN vDialog.Control
                                WHERE vDialog.CtrlMap.Tag = ""
                  END

                  // Grid Control Mapping
                  // We don't generate mapping for Push Button or if there wasn't mapping.
                  // KJS 12/14/07 - I added Combobox and GridComboCtl to this because if there is a combobox,
                  // we already get the variables for the combobox while creating the combobox html code.
                  IF szCtrlCtrlType != "PushBtn" AND szCtrlCtrlType != "BitmapBtn" AND
                     szCtrlCtrlType != "ComboBox" AND szCtrlCtrlType != "GridComboCtl" AND
                     RESULT >= zCURSOR_SET
                     // Regular text

                     szListCtrlTag = vDialog.Control.Tag
                     szControlTag = "str" + szListCtrlTag
                     szWriteBuffer = "         " + szControlTag + " = ^^;"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                     SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Edit"
                     IF RESULT >= zCURSOR_SET
                        szWCP_Edit = "Y"
                     ELSE
                        szWCP_Edit = "N"
                     END

                     //IF RESULT >= zCURSOR_SET OR vDialog.Control.WebCtrlType = "Edit"
                     IF vDialog.Control.WebCtrlType = "Edit" OR szWCP_Edit = "Y"
                        lEditBox = 1
                        szWriteBuffer = "         " + szControlTag + "ErrorColor = ^^;"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     ELSE
                        lEditBox = 0
                     END

                     IF vDialog.CtrlMapContext EXISTS
                        szContextName = vDialog.CtrlMapContext.Name
                     ELSE
                        szContextName = ""
                     END

                     szWriteBuffer = "         nRC = " + szGridView +
                                  ".cursor( ^" + vDialog.CtrlMapRelatedEntity.Name + "^ ).checkExistenceOfEntity();"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "         if ( nRC >= 0 )"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                     IF lEditBox = 1

                        szWriteBuffer = "         {"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "            strTag = ^@" + szListCtrlTag + "#^ + strEntityKey;"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        
                        // If there is an error, set on that entity and report the error? kkk
                        szWriteBuffer = "            nRC = vMsgQ.cursor( ^WebMsg^ ).setFirst( ^ControlTag^, strTag );"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "            if ( nRC >= 0 )"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "            {"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "               // Should we do something with the error?"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "               vMsgQ.cursor(^WebMsg^).deleteEntity( CursorPosition.NEXT );"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "            }"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        
                        
                        szWriteBuffer = "            //strErrorMapValue = task.CheckError( strSessionId, strTag, strErrorTitle );"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "            strErrorMapValue = ^^;"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "            if ( strErrorMapValue.length( ) > 0 )"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "            {"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "               " + szControlTag + "ErrorColor = ^ style='color: red'^;"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "               " + szControlTag + " = strErrorMapValue;"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "            }"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "            else"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "            {"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        IF vDialog.CtrlMapER_Domain.MaxStringLth > 200
                           lMaxStringLength = vDialog.CtrlMapER_Domain.MaxStringLth
                           szMaxStringLength = lMaxStringLength
                        ELSE
                           szMaxStringLength = "200"
                        END

                        szWriteBuffer = "               " + szControlTag + " = " + szGridView +
                                     ".cursor( ^" + vDialog.CtrlMapRelatedEntity.Name +
                                     "^ ).getStringFromAttribute( ^" + vDialog.CtrlMapER_Attribute.Name + "^, ^" + szContextName + "^ );"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "            }"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "         }"

                     ELSE
                        IF vDialog.CtrlMapER_Domain.MaxStringLth > 200
                           lMaxStringLength = vDialog.CtrlMapER_Domain.MaxStringLth
                           szMaxStringLength = lMaxStringLength
                        ELSE
                           szMaxStringLength = "200"
                        END

                        IF szCtrlCtrlType = "Calendar"
                           szWriteBuffer = "            " + szControlTag + " = " + szGridView +
                                     ".cursor( ^" + vDialog.CtrlMapRelatedEntity.Name +
                                     "^ ).getStringFromAttribute( ^" + vDialog.CtrlMapER_Attribute.Name + "^, strDateFormat );"
                        ELSE
                           szWriteBuffer = "            " + szControlTag + " = " + szGridView +
                                     ".cursor( ^" + vDialog.CtrlMapRelatedEntity.Name +
                                     "^ ).getStringFromAttribute( ^" + vDialog.CtrlMapER_Attribute.Name + "^, ^" + szContextName + "^ );"
                        END
                     END
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                     
                     // KJS 05/06/09 - Check if the user wants this column to show only the first occurance of the column value.
                     // All other occurances of a value are null.
                     SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "First Occurance Only"
                     IF RESULT >= zCURSOR_SET
                           szWriteBuffer = "            // Only show the first occurance of this column value."
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "            if ( " + szControlTag + ".equals(" + szControlTag + "LO" + ") )"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "            {"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "               " + szControlTag + "LV = " + szControlTag + ";"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "               " + szControlTag + " = ^^;"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "            }"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "            else "
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "               " + szControlTag + "LV = " + szControlTag + ";"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                     END

                     // Checkbox mapping is different here.
                     IF szCtrlCtrlType = "GridCheckCtl"
                        // If the value of the checkbox for not being checked is anything but null, the
                        // .length( ) wouldn't work properly.  All checkboxes would be checked.  Changing this...
                        szWriteBuffer = "         if ( " + szControlTag + ".equals( ^" + vDialog.Control.RadioOrCheckboxValue + "^ ) )"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     ELSE
                        szWriteBuffer = "         if ( " + szControlTag + ".length( ) == 0 )"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     END

                     // Checkbox mapping is different here.
                     IF szCtrlCtrlType = "GridCheckCtl"

                        //KJS 10/19/07 - We want to add "title" to controls and should I add class here as well?

                        //If we put a title on the control, when the mouse is hovered over the control, this text will display.
                        szTitleHTML = ""
                        szTitle = vDialog.Control.DIL_Text
                        IF szTitle != ""
                           szTitleHTML = " title='" + szTitle + "' "
                        END

                        //KJS 7/26/07 - Added disabled option for the checkbox.
                        CreateDisabledString( vDialog, szDisabled )

                        szWriteBuffer = "         {"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "            " + szControlTag + "Value = ^" + vDialog.Control.Tag +
                                        "^ + strEntityKey;"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "            " + szControlTag +
                                        " = ^<input name='^ + " + szControlTag + "Value + ^' id='^ + " + szControlTag +
                                        "Value + ^' value='Y' type='checkbox'  CHECKED " +
                                        szDisabled + szTitleHTML + "> ^;"
                        //szWriteBuffer = "            " + szControlTag + " = ^<input name='^ + " + szControlTag +
                        //                "Value + ^' value='Y' type='checkbox' CHECKED " + szDisabled + szTitleHTML + "> ^;"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "         }"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "         else"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "         {"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "            " + szControlTag + "Value = ^" + vDialog.Control.Tag +
                                        "^ + strEntityKey;"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "            " + szControlTag +
                                        " = ^<input name='^ + " + szControlTag + "Value + ^' id='^ + " + szControlTag +
                                        "Value + ^' value='Y' type='checkbox' " +
                                        szDisabled + szTitleHTML + "> ^;"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "         }"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                     ELSE
                        IF vDialog.Control.WebCtrlType = "Edit" OR szWCP_Edit = "Y" OR szCtrlCtrlType = "Calendar" OR
                           szCtrlCtrlType = "ComboBox" OR szCtrlCtrlType = "GridComboCtl"
                           szWriteBuffer = "            " + szControlTag + " = ^^;"
                        ELSE
                           szWriteBuffer = "            " + szControlTag + " = ^&nbsp^;"
                        END
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                     END

                     // If the Grid entry requests URL Mapping, generate the code here.
                     SET CURSOR FIRST vDialog.CtrlMap WHERE vDialog.CtrlMap.Tag = "Hyperlink URL"
                     IF RESULT >= zCURSOR_SET
                        szControlTag = "str" + vDialog.Control.Tag + "_URL"
                        szWriteBuffer = "         " + szControlTag + " = ^^;"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "         nRC = " + szGridView +
                                     ".cursor( ^" + vDialog.CtrlMapRelatedEntity.Name + "^ ).checkExistenceOfEntity();"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "         if ( nRC >= 0 )"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        IF vDialog.CtrlMapER_Domain.MaxStringLth > 200
                           lMaxStringLength = vDialog.CtrlMapER_Domain.MaxStringLth
                           szMaxStringLength = lMaxStringLength
                        ELSE
                           szMaxStringLength = "200"
                        END
                        IF vDialog.CtrlMapContext EXISTS
                           szContextName = vDialog.CtrlMapContext.Name
                        ELSE
                           szContextName = ""
                        END
                        szWriteBuffer = "            " + szControlTag + " = " + szGridView +
                                        ".cursor( ^" + vDialog.CtrlMapRelatedEntity.Name +
                                        "^ ).getStringFromAttribute( ^" + vDialog.CtrlMapER_Attribute.Name + "^, ^" + szContextName + "^ );"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                     END

                  END

                  IF bResetToPlaceHolder = 1
                     ResetViewFromSubobject( vDialog )
                  END
               END

               ResetViewFromSubobject( vDialog )

               szWriteBuffer = "%>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

               // Create the table entries with values.
               szWriteBuffer = "<tr<%=strOdd%>>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

               OrderEntityForView( vDialog, "CtrlCtrl", "PSDLG_X A" )

               SetViewToSubobject( vDialog, "CtrlCtrl" )
               lCol = 0
               // Loop to create table columns.
               FOR EACH vDialog.Control

                  szCtrlCtrlType = vDialog.ControlDef.Tag
                  IF szCtrlCtrlType = "GridSubCtl" AND vDialog.CtrlCtrl EXISTS
                     SetViewToSubobject( vDialog, "CtrlCtrl" )
                     bResetToPlaceHolder = 1
                     szCtrlCtrlType = vDialog.ControlDef.Tag
                  ELSE
                     bResetToPlaceHolder = 0
                  END

                  // Set up "<td" constant with optional Class.
                  // !!! KJS 01/16/09
                  
                  // KJS 01/16/09 - I am putting in "WRAP" as a Web Control Property because I think it's confusing
                  // to have the Wrap option on a different screen (under "Common" button).  I would think you would
                  // choose, "Absolute Width" and then choose "WRAP" if you want your field to wrap.  Should I instead
                  // have a web property of "Absolute Width Wrap"??  so you only have to add one property instead of
                  // two?
                  SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "WRAP"
                  IF RESULT >= zCURSOR_SET
                     szItemTableHeader = "<td"
                  ELSE
                     // Under the "Common" button there is a checkbox for "Wrap".  Need to check this as well as
                     // the webcontrol property.
                     IF vDialog.Control.WebWrap = "Y"
                        szItemTableHeader = "<td"
                     ELSE
                        szItemTableHeader = "<td nowrap"
                     END

                  END


                  CreateDisabledString( vDialog, szDisabled )

                  //KJS 2/12/2008 - If this control is a hidden control, then we do not care what other web controls
                  //properties there might be.  Create this as a hidden field. This does not have
                  //<td> tags.
                  SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Hidden"
                  IF RESULT >= zCURSOR_SET
                     szListCtrlTag = vDialog.Control.Tag
                     szWriteBuffer = "<input type=^hidden^ value=^<%=str" + szListCtrlTag + "%>^ " +
                                            "name=^@" + szListCtrlTag + "#<%=strEntityKey%>^ id=^@" + szListCtrlTag + "#<%=strEntityKey%>^>"

                  ELSE
                     //Not a hidden control.

                     //KJS 7/25/07 - Look for values in the WebControlProperties.
                     SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Edit"
                     IF RESULT >= zCURSOR_SET
                        szWCP_Edit = "Y"
                     ELSE
                        szWCP_Edit = "N"
                     END

                     SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Multiline"
                     IF RESULT >= zCURSOR_SET
                        szWCP_Multiline = "Y"
                     ELSE
                        szWCP_Multiline = "N"
                     END

                     SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "EmailAddress"
                     IF RESULT >= zCURSOR_SET
                        szWCP_EmailAddress = "Y"
                     ELSE
                        szWCP_EmailAddress = "N"
                     END

                     SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Absolute Width"
                     IF RESULT >= zCURSOR_SET
                        szWCP_AbsoluteWidth = "Y"
                     ELSE
                        szWCP_AbsoluteWidth = "N"
                     END

                     // If Absolute Width is requested, add Width to szItemTableHeader.
                     IF szWCP_AbsoluteWidth = "Y"
                        PIX_PER_DU( vDialog, DLUnits )
                        zIntegerToString( szWidth, 10, vDialog.Control.SZDLG_X * DLUnits )
                        szItemTableHeader = szItemTableHeader + " style=^width:" + szWidth + "px;^"
                     END

                     //If we put a title on the control, when the mouse is hovered over the control, this text will display.
                     szTitleHTML = ""
                     szTitle = vDialog.Control.DIL_Text
                     IF szTitle != ""
                        szTitleHTML = " title=^" + szTitle + "^ "
                     END

                     szClass = vDialog.Control.CSS_Class
                     IF szClass != "" AND szCtrlCtrlType != "PushBtn"  // Don't add Class here for Push Button.
                        szItemTableHeader = szItemTableHeader + " class=^" + szClass + "^"
                     END


                     //KJS 10/19/07 - Added title
                     IF szTitle != "" AND szCtrlCtrlType != "PushBtn"  // Don't add title here for Push Button.
                        szItemTableHeader = szItemTableHeader + szTitleHTML
                     END

                     IF szCtrlCtrlType = "PushBtn"
                        IF szWriteBuffer = "   }"
                           // The last entry was a variable text, so create the "%>" statement.
                           szWriteBuffer = "%>"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        END

                        // Push Button
                        szActionName = ""
                        IF vDialog.EventAct EXISTS
                           szActionName = vDialog.EventAct.Tag
                        END

                        // Set Class as either null or with Class value.
                        IF vDialog.Control.CSS_Class = ""
                           szClass = ""
                        ELSE
                           szClass = "class=^" + vDialog.Control.CSS_Class + "^ "
                        END

                        //KJS 7/26/07 - Added DISABLED option.
                        //KJS 10/19/07 - Added title

                        // KJS 06/22/09 - I am noticing that there is no width for a push button
                        // in a grid.  I'm thinking there should be so I am going to get the
                        // width here (buttons don't have a WebControlProperty of Absolute Width).
                        PIX_PER_DU( vDialog, DLUnits )
                        zIntegerToString( szWidth, 10, vDialog.Control.SZDLG_X * DLUnits )
                        szStyle = " style=^width:" + szWidth + "px;^ "

                        //szWriteBuffer = "   " + szItemTableHeader + "><input type=^submit^ " + szTitleHTML + szClass + "name=<%=strButtonName%> onclick=^" + szActionName +
                        //                "( this.id )^ id=^<%=strEntityKey%>^ value=^" + vDialog.Control.Text + "^" + szDisabled + "></td>"
                        szWriteBuffer = "   " + szItemTableHeader + "><button type=^button^ " + szTitleHTML + szClass + "name=<%=strButtonName%> onclick=^" + szActionName +
                                        "( this.id )^ id=^<%=strEntityKey%>^ " + szStyle + szDisabled + ">"+
                                        vDialog.Control.Text + "</button></td>"
                     ELSE
                        szListCtrlTag = vDialog.Control.Tag

                        // If Title is variable mapping, only create entries for columns with titles.
                        CreateViewFromView( vDialog2, vDialog )
                        //SET CURSOR NEXT vDialog2.CtrlMap WHERE vDialog2.CtrlMap.Tag = "Variable Header"
                        //IF RESULT >= zCURSOR_SET AND vDialog2.CtrlMapLOD_Attribute EXISTS
                        //   szWriteBuffer = "   " + szItemTableHeader + "><%=str" + szListCtrlTag + "%></td>"
                        //   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        //ELSE
                           IF szCtrlCtrlType = "ComboBox" OR szCtrlCtrlType = "GridComboCtl"
                           
                              //IF szWCP_AbsoluteWidth = "Y"
                                 PIX_PER_DU( vDialog, DLUnits )
                                 zIntegerToString( szWidth, 10, vDialog.Control.SZDLG_X * DLUnits )
                                 //szItemTableHeader = szItemTableHeader + " style=^width:" + szWidth + "px;^"
                              //END
                                    
                              //szViewName = vDialog.CtrlMapView.Name
                              szViewName = szGridView
                              szMapEntityName = vDialog.CtrlMapRelatedEntity.Name
                              szMapAttributeName = vDialog.CtrlMapER_Attribute.Name

                              szWriteBuffer = "   " + szItemTableHeader + ">" // <td nowrap>

                              IF vDialog.Event EXISTS
                                 IF vDialog.Event.Type = 1
                                    szSelectAction   = "onchange"
                                    szSelectFunction = "OnChange"
                                 ELSE
                                    szSelectAction   = "onblur"
                                    szSelectFunction = "OnBlur"
                                 END
                              ELSE
                                 szSelectAction   = "onchange"
                                 szSelectFunction = "OnChange"
                              END

                              //Can be a domain combo box or a table combo box
                              lSubtype = vDialog.Control.Subtype
                              nRC = AreBitsSetInFlag( lSubtype, 61440 ) // 0x0000F000
                              IF nRC = 0   // IF vDialog.Control.Subtype < 12000  ==> Domain Combobox

                                 //Domain combo box

                                 //szWriteBuffer = szWriteBuffer + "<input name=^h" + szListCtrlTag + "<%=strEntityKey%>^ id=^h" + szListCtrlTag + "<%=strEntityKey%>^ type=^hidden^ value=^<%=str" + szListCtrlTag + "%>^ >"
                                 //WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                                 //KELLY - Do I need to add DISABLED here?
                                 
                                 //032609

                                 IF szClass = ""
                                    //szWriteBuffer = szWriteBuffer + "<select name=^" + szListCtrlTag + "<%=strEntityKey%>^ id=^" + szListCtrlTag + "<%=strEntityKey%>^ size=^1^" + szTitleHTML + " style=^width:152px;height:20px;^ " + 
                                    szWriteBuffer = szWriteBuffer + "<select name=^" + szListCtrlTag + "<%=strEntityKey%>^ id=^" + szListCtrlTag + "<%=strEntityKey%>^ size=^1^" + szTitleHTML + " style=^width:" + szWidth + "px;^ " + 
                                                    szDisabled + szSelectAction + "=^" +
                                                    szListCtrlTag + szSelectFunction + "( h" + szListCtrlTag + "<%=strEntityKey%>," + szListCtrlTag + "<%=strEntityKey%>, <%=strEntityKey%> )^>"
                                 ELSE
                                    szWriteBuffer = szWriteBuffer + "<select class=^" + szClass + "^ name=^" + szListCtrlTag + "<%=strEntityKey%>^ id=^" + szListCtrlTag + "<%=strEntityKey%>^ size=^1^" + szTitleHTML + 
                                                   " style=^width:" + szWidth + "px;^ " + szDisabled + szSelectAction + "=^" +szListCtrlTag + szSelectFunction + "( h" + szListCtrlTag + "<%=strEntityKey%>," + szListCtrlTag + 
                                                   "<%=strEntityKey%>, <%=strEntityKey%> )^>"
                                                   //" style=^width:152px;height:20px;^ " + szDisabled + szSelectAction + "=^" +szListCtrlTag + szSelectFunction + "( h" + szListCtrlTag + "<%=strEntityKey%>," + szListCtrlTag + "<%=strEntityKey%> )^>"
                                 END

                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "<%"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                                 // This view should be the same as the view we are getting for the grid so we don't need to retrieve
                                 // it again.  Set nRC = 1 so that we go into the IF statement (should really take that out).
                                 szWriteBuffer = "      nRC = 1;"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "      if ( nRC > 0 )"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "      {"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "         int    nRowCnt= 0;"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "         Vector ComboVector;"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

                                 IF vDialog.CtrlMapER_Domain.MaxStringLth > 200
                                    lMaxStringLength = vDialog.CtrlMapER_Domain.MaxStringLth
                                    szMaxStringLength = lMaxStringLength
                                 ELSE
                                    szMaxStringLength = "200"
                                 END

                                 szWriteBuffer = "         strComboCurrentValue = " + szViewName + ".cursor( ^" + szMapEntityName + "^ ).getStringFromAttribute( ^" +
                                                 szMapAttributeName + "^ );"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "         ComboVector = " + szViewName + ".GetTableListForAttribute( ^" + szMapEntityName + "^, ^" + szMapAttributeName + "^, ^^ );"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "         nRowCnt = (int) ComboVector.size( );"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "         int k;"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "         int nFirst;"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "         if ( nRowCnt > 0 ) "
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "         { "
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

                                 IF vDialog.CtrlMapER_Attribute.NotNull = "Y"
                                    // Generate code when attribute IS required.
                                    szWriteBuffer = "      // Code for required attribute, which doesn't allow a blank entry."
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "         nFirst = (ComboVector.elementAt( 0 ) == ^^) ? 1 : 0;"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                                 ELSE
                                    // Generate code when attribute is NOT required.
                                    szWriteBuffer = "      // Code for NOT required attribute, which makes sure a blank entry exists."
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "      if ( ComboVector.elementAt( 0 ) != ^^ )"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "      {"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "            if ( strComboCurrentValue == ^^ )"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "            {"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "%>"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "            <option selected=^selected^ value=^^></option>"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "<%"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "            }"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "            else"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "            {"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "%>"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "            <option value=^^></option>"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "<%"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "            }"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "         }"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

                                    szWriteBuffer = "         nFirst = 0;"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 END

                                 szWriteBuffer = "            for ( k = nFirst; k < nRowCnt; k++ )"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "            {"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "               strErrorMapValue = (String) ComboVector.elementAt( k );"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "               if ( strErrorMapValue.length( ) != 0 )"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "               {"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "                  if ( strComboCurrentValue.equals( strErrorMapValue ) )"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "                  {"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "%>"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "                     <option selected=^selected^ value=^<%=strErrorMapValue%>^><%=strErrorMapValue%></option>"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "<%"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "                  }"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "                  else"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "                  {"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "%>"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "                     <option value=^<%=strErrorMapValue%>^><%=strErrorMapValue%></option>"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "<%"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "                  }"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "               }"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "            }"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "         }"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "      } //if ( nRowCnt > 0 )"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "%>"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                                 szWriteBuffer = "   </select>"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                                 //szWriteBuffer = szWriteBuffer + "<input name=^h" + szListCtrlTag + "<%=strEntityKey%>^ id=^h" + szListCtrlTag + "<%=strEntityKey%>^ type=^hidden^ value=^<%=str" + szListCtrlTag + "%>^ >"
                                 szWriteBuffer = "<input name=^h" + szListCtrlTag + "<%=strEntityKey%>^ id=^h" + szListCtrlTag + "<%=strEntityKey%>^ type=^hidden^ value=^<%=strComboCurrentValue%>^ >"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                              ELSE

                                 // Select type combo box
                                 CreateViewFromViewForTask( vList, vDialog, 0 )
                                 SET CURSOR NEXT vList.CtrlMap
                                 CreateViewFromViewForTask( vEntity, vList, 0 )
                                 SET CURSOR NEXT vEntity.CtrlMap
                                 CreateViewFromViewForTask( vScope, vEntity, 0 )
                                 SET CURSOR NEXT vScope.CtrlMap

                                 // The Select Action is either onblur or onchange depending on the following.
                                 // 1. If no Action, use onchange because this allows using keystrokes in the control.
                                 // 2. If Action is SelectChange, use onchange.
                                 // 3. If Action is SelectEnd, use onfocusout.
                                 IF vDialog.Event EXISTS
                                    IF vDialog.Event.Type = 1
                                       szSelectAction   = "onchange"
                                       szSelectFunction = "OnChange"
                                    ELSE
                                       szSelectAction   = "onblur"
                                       szSelectFunction = "OnBlur"
                                    END
                                 ELSE
                                    szSelectAction = "onchange"
                                    szSelectFunction = "OnChange"
                                 END


                                 szWriteBuffer = "   " + szItemTableHeader + ">" // <td nowrap>

                                 IF szClass = ""
                                    //szWriteBuffer = szWriteBuffer + "<select name=^" + szListCtrlTag + "<%=strEntityKey%>^ id=^" + szListCtrlTag + "<%=strEntityKey%>^ size=^1^" + szTitleHTML + " style=^width:152px;height:20px;^ " + 
                                    szWriteBuffer = szWriteBuffer + "<select name=^" + szListCtrlTag + "<%=strEntityKey%>^ id=^" + szListCtrlTag + "<%=strEntityKey%>^ size=^1^" + szTitleHTML + " style=^width:" + szWidth + "px;^ " + 
                                                    szDisabled + szSelectAction + "=^" +
                                                    szListCtrlTag + szSelectFunction + "( h" + szListCtrlTag + "<%=strEntityKey%>," + szListCtrlTag + "<%=strEntityKey%>, <%=strEntityKey%> )^>"
                                 ELSE
                                    szWriteBuffer = szWriteBuffer + "<select class=^" + szClass + "^ name=^" + szListCtrlTag + "<%=strEntityKey%>^ id=^" + szListCtrlTag + "<%=strEntityKey%>^ size=^1^" + szTitleHTML + 
                                                   " style=^width:" + szWidth + "px;^ " + szDisabled + szSelectAction + "=^" +szListCtrlTag + szSelectFunction + "( h" + szListCtrlTag + "<%=strEntityKey%>," + szListCtrlTag + 
                                                   "<%=strEntityKey%>, <%=strEntityKey%> )^>"
                                                   //" style=^width:152px;height:20px;^ " + szDisabled + szSelectAction + "=^" +szListCtrlTag + szSelectFunction + "( h" + szListCtrlTag + "<%=strEntityKey%>," + szListCtrlTag + "<%=strEntityKey%> )^>"
                                 END
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

                                 szWriteBuffer = "<%"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 IF vDialog.CtrlMapView EXISTS
                                    szWriteBuffer = "   " + vList.CtrlMapView.Name + " = " +
                                                    "task.getViewByName( ^" + vList.CtrlMapView.Name + "^ );"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "   if ( " + vList.CtrlMapView.Name + " == null )"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "   {"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "         strComboCurrentValue = ^^;"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "      View v" + szListCtrlTag + ";"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                                    // If mapping is specified, set up the value to be used in selecting
                                    // the correct entry.
                                    IF vDialog.CtrlMapLOD_Attribute EXISTS
                                       IF vDialog.CtrlMapView.Name = szGridOrigViewName
                                          szWriteBuffer = "      nRC = 1;"
                                          szViewName = szGridView
                                       ELSE
                                          szWriteBuffer = "      " + vDialog.CtrlMapView.Name + " = " +
                                                          "task.getViewByName( ^" + vDialog.CtrlMapView.Name +
                                                          "^ );"
                                          szViewName = vDialog.CtrlMapView.Name
                                       END
                                       WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                       szWriteBuffer = "      if ( " + vDialog.CtrlMapView.Name + " == null )"
                                       WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                       szWriteBuffer = "      {"
                                       WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                       szWriteBuffer = "         nRC = " + szViewName + ".cursor( ^" +
                                                       vDialog.CtrlMapRelatedEntity.Name + "^ ).checkExistenceOfEntity();"
                                       WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                       szWriteBuffer = "         if ( nRC >= 0 )"
                                       WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                       IF vDialog.CtrlMapContext EXISTS
                                          szContextName = vDialog.CtrlMapContext.Name
                                       ELSE
                                          szContextName = ""
                                       END

                                       IF vDialog.CtrlMapER_Domain.MaxStringLth > 200
                                          lMaxStringLength = vDialog.CtrlMapER_Domain.MaxStringLth
                                          szMaxStringLength = lMaxStringLength
                                       ELSE
                                          szMaxStringLength = "200"
                                       END

                                       szWriteBuffer = "            strComboCurrentValue = " + szViewName +
                                                ".cursor( ^" +
                                                vDialog.CtrlMapRelatedEntity.Name + "^ ).getStringFromAttribute( ^" +
                                                vDialog.CtrlMapER_Attribute.Name + "^, ^" + szContextName + "^ );"
                                       WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                       szWriteBuffer = "      }"
                                    ELSE
                                       szWriteBuffer = "      strComboCurrentValue = ^^;"
                                    END
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                                    // See if a list entity has been specified, and if so, use it.
                                    IF vEntity.CtrlMapLOD_Entity EXISTS
                                       szListEntityName = vEntity.CtrlMapLOD_Entity.Name
                                    ELSE
                                       szListEntityName = vList.CtrlMapRelatedEntity.Name
                                    END

                                    // See if a scoping entity has been specified, and if so, use it.
                                    lSubtype = vDialog.Control.Subtype
                                    lSubtype = IsFlagSequenceSet( lSubtype, zCOMBOBOX_SCOPE_OI )
                                    IF lSubtype = 0
                                       IF vScope.CtrlMapLOD_Entity EXISTS
                                          szScopingEntityName = "^" + vScope.CtrlMapLOD_Entity.Name + "^"
                                       ELSE
                                          szScopingEntityName = ""
                                       END
                                    END

                                    szWriteBuffer = "      v" + szListCtrlTag + " = " + vList.CtrlMapView.Name + ".newView();"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "      ComboCount = 0;"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "      strComboCountCurrentValue = ^0^;"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                                    // Auto Include
                                    IF vDialog.Control.Subtype >= 20480 AND vDialog.Control.Subtype <= 21252   // IF Auto Include
                                       szWriteBuffer = ""
                                       WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                       szWriteBuffer = "      // For Auto Include, process null entry."
                                       WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                       szWriteBuffer = "      ComboCount++;"
                                       WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                       szWriteBuffer = "      if ( strComboCurrentValue == null )"
                                       WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                       szWriteBuffer = "      {"
                                       WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                       szWriteBuffer = "%>"
                                       WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                       szWriteBuffer = "         <option selected=^selected^></option>"
                                       WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                       szWriteBuffer = "<%"
                                       WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                       szWriteBuffer = "      }"
                                       WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                       szWriteBuffer = "      else"
                                       WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                       szWriteBuffer = "      {"
                                       WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                       szWriteBuffer = "%>"
                                       WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                       szWriteBuffer = "         <option></option>"
                                       WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                       szWriteBuffer = "<%"
                                       WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                       szWriteBuffer = "      }"
                                       WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                                    END

                                    IF lSubtype = 0
                                       szWriteBuffer = "      nRC = v" + szListCtrlTag + ".cursor( ^" +
                                                                    szListEntityName + "^).setFirst( " + szScopingEntityName + " );"
                                    ELSE
                                       szWriteBuffer = "      nRC = v" + szListCtrlTag + ".SetCursorScopeOI( ^" +
                                                                    szListEntityName + "^, 1 ); // first" // zPOS_FIRST
                                    END

                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "      while ( nRC >= 0 )"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "      {"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    IF vList.CtrlMapLOD_Attribute EXISTS
                                       IF vList.CtrlMapContext EXISTS
                                          szContextName = vList.CtrlMapContext.Name
                                       ELSE
                                          szContextName = ""
                                       END


                                       IF vList.CtrlMapER_Domain.MaxStringLth > 200
                                          lMaxStringLength = vList.CtrlMapER_Domain.MaxStringLth
                                          szMaxStringLength = lMaxStringLength
                                       ELSE
                                          szMaxStringLength = "200"
                                       END

                                       szWriteBuffer = "         strErrorMapValue = v" + szListCtrlTag +
                                                       ".cursor( ^" +
                                                       vList.CtrlMapRelatedEntity.Name + "^ ).getStringFromAttribute( ^" +
                                                       vList.CtrlMapER_Attribute.Name + "^, ^" +
                                                       szContextName + "^ );"
                                       WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    END

                                    szWriteBuffer = "         if ( strComboCurrentValue.equals( strErrorMapValue ) )"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "         {"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "%>"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "            <option selected=^selected^><%=strErrorMapValue%></option>"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "<%"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "            strComboCountCurrentValue = Integer.toString( ComboCount );"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "         }"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "         else"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "         {"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "%>"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "            <option><%=strErrorMapValue%></option>"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "<%"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "         }"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                                    szWriteBuffer = "         ComboCount++;"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    IF lSubtype = 0
                                       szWriteBuffer = "         nRC =  v" + szListCtrlTag +
                                                       ".cursor( ^" + szListEntityName +
                                                       "^ ).setNextContinue( " + szScopingEntityName + " );"
                                    ELSE
                                       szWriteBuffer = "         nRC =  v" + szListCtrlTag +
                                                       ".SetCursorScopeOI( ^" + szListEntityName + "^, 3 ); // next" // zPOS_NEXT
                                    END

                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    DropView( vList )
                                    DropView( vEntity )
                                    DropView( vScope )
                                 END

                                 szWriteBuffer = "      }"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                                 szWriteBuffer = "      v" + szListCtrlTag + ".drop();"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

                                 szWriteBuffer = "   }"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "%>"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                                 szWriteBuffer = "   </select>"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                                 szWriteBuffer = "<input name=^h" + szListCtrlTag + "<%=strEntityKey%>^ id=^h" + szListCtrlTag + "<%=strEntityKey%>^ type=^hidden^ value=^<%=strComboCountCurrentValue%>^ >"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                              END  //IF vDialog.Control.Subtype < 12000 (domain combobox)
                              szWriteBuffer = "   </td>"

                           ELSE
                           IF szCtrlCtrlType = "Calendar"
                              szWriteBuffer = "   " + szItemTableHeader + ">"
                              //KJS 7/26/07 - Added DISABLED option.
                              szWriteBuffer = szWriteBuffer + "<input name=^" + szListCtrlTag + "<%=strEntityKey%>^ id=^" + szListCtrlTag + "<%=strEntityKey%>^ "
                              szWriteBuffer = szWriteBuffer + "style=^width:80px^ type=^text^" + szDisabled + " value=^<%=str" + szListCtrlTag + "%>^ />"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "              <img src=^images/scw.gif^ title=^Select Date^ alt=^Select Date^ " + szDisabled + " "
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "              onclick=^scwShow( document.getElementById( '" + szListCtrlTag + "<%=strEntityKey%>' ), this );^ /></td>"
                           ELSE
                           IF vDialog.Control.WebCtrlType = "Edit" OR szWCP_Edit = "Y"
                              X_Size = vDialog.Control.SZDLG_X
                              Size = X_Size / 3
                              zIntegerToString( szSize, 10, Size )
                              //KJS 7/26/07 - Added DISABLED option.
                              //KJS 10/19/07 - Added title
                              szWriteBuffer = "   " + szItemTableHeader + "><input size=^" + szSize + "^ value=^<%=str" + szListCtrlTag + "%>^<%=str" + szListCtrlTag +
                                                     "ErrorColor%> name=^@" + szListCtrlTag + "#<%=strEntityKey%>^ id=^@" + szListCtrlTag + "#<%=strEntityKey%>^ " + szTitleHTML + szDisabled + "></td>"
                           ELSE
                           IF vDialog.Control.WebCtrlType = "Multiline" OR szWCP_Multiline = "Y"
                              // KJS 09/26/2008 - Taking out the <pre> because it makes the grid too large (can't do a "WRAP" on the
                              // <td>.  I don't think in a grid that we would want that.
                              szWriteBuffer = "   " + szItemTableHeader + "><%=str" + szListCtrlTag + "%></td>"
                              //szWriteBuffer = "   " + szItemTableHeader + "><pre><%=str" + szListCtrlTag + "%></pre></td>"
                           ELSE
                           IF vDialog.Control.WebCtrlType = "EmailAddress" OR szWCP_EmailAddress = "Y"
                              szWriteBuffer = "   " + szItemTableHeader + " class=^Email^><%=str" + szListCtrlTag + "%></td>"
                           ELSE
                           //KJS 11/18/2007 - Adding Bitmap as a grid control
                           IF szCtrlCtrlType = "Bitmap"

                              szText = ""
                              IF vDialog.Control.Text != ""
                                 szText = " alt=^" + vDialog.Control.Text + "^ "
                              END
                              IF vDialog.EventAct EXISTS
                                 szWriteBuffer = "   " + szItemTableHeader + "><a href=^#^ name=^" + szCtrlTag + "^ id=^<%=strEntityKey%>^ ^onclick=^" +
                                                 vDialog.EventAct.Tag + "( this.id )^><img src=^" + vDialog.Control.WebFileName + "^ " + szTitleHTML + szText + "></a></td>"
                              ELSE
                                 szWriteBuffer = "   " + szItemTableHeader + "><a href=^#^ name=^" + szCtrlTag + "^ id=^<%=strEntityKey%>^ ><img src=^" +
                                    vDialog.Control.WebFileName + "^ " + szTitleHTML + szText + "></a></td>"
                              END
                           ELSE
                           //DKS 02/01/2008 - Adding BitmapBtn as a grid control
                           IF szCtrlCtrlType = "BitmapBtn"

                              IF vDialog.Control.Text != ""
                                 szText = " alt=^" + vDialog.Control.Text + "^ /"
                              ELSE
                                 szText = "/"
                              END

                              IF vDialog.EventAct EXISTS
                                 szWriteBuffer = "   " + szItemTableHeader + "><a href=^#^  name=^" + szCtrlTag + "^ onclick=^" + vDialog.EventAct.Tag +
                                                 "( this.id )^ id=^<%=strEntityKey%>^><img src=^" + vDialog.Control.WebFileName + "^ " + szTitleHTML + szText + "></td>"
                              ELSE
                                 szWriteBuffer = "   " + szItemTableHeader + "><a href=^#^  name=^" + szCtrlTag +
                                                 "^ id=^<%=strEntityKey%>^ ><img src=^" + vDialog.Control.WebFileName + "^ " + szTitleHTML + szText + "></td>"
                              END

                           ELSE
                              IF vDialog.EventAct EXISTS
                                 // Right now the only EventAct on a regular grid subcontrol is HotText (now there is Bitmap and BitmapBtn)
                                 // Process HotText Action the same as for the Text Control.
                                 //KJS 10/19/07 - added title
                                 IF vDialog.EventAct.Type = 45    // Type 45 is Hyperlink Action.
                                    // For a Hyperlink in a Grid, we assume there is ALWAYS both "Displayed Text" mapping and
                                    // "Hyperlink URL" mapping, which have been set above.
                                    szWriteBuffer = "   " + szItemTableHeader + "><a href=^<%=str" + szListCtrlTag + "_URL%>^ " + szTitleHTML + "><%=str" + szListCtrlTag + "%></a>"
                                 ELSE
                                    // This is HotText mapping to an Action.
                                    szWriteBuffer = "   " + szItemTableHeader + "><a href=^#^ onclick=^" + vDialog.EventAct.Tag + "( this.id )^ id=^<%=strEntityKey%>^" + szTitleHTML + "><%=str" + szListCtrlTag + "%></a>"
                                 END
                              ELSE
                                 // Regular default Grid subcontrol.
                                 szWriteBuffer = "   " + szItemTableHeader + "><%=str" + szListCtrlTag + "%></td>"
                              END
                           END // WebCtrlType = "EmailAddress"
                           END // WebCtrlType = "BitmapBtn"
                           END // WebCtrlType = "Multiline"
                           END // WebCtrlType = "Edit"
                           END // szCtrlCtrlType = "Calendar"
                           END // szCtrlCtrlType = "ComboBox"
                           END
                        //END
                        DropView( vDialog2)
                     END
                  END //End of checking if this is a hidden field
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                  IF bResetToPlaceHolder = 1
                     ResetViewFromSubobject( vDialog )
                  END
               END

               ResetViewFromSubobject( vDialog )

               // If the last entry was a variable text, create the "<%" statement.
               IF szWriteBuffer = "   }"
                  szWriteBuffer = "%>"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
               ELSE
                  szWriteBuffer = ""
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               END

               szWriteBuffer = "</tr>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
               szWriteBuffer = "<%"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               
               //If on this table we are filtering rows, we need to add the closing bracket for the "if ( strFilter.length == 0 ) statement
               IF  szFilterTable = "Y" 

                  szWriteBuffer = "         }"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               END


               IF lSubtypeX = 0
                  szWriteBuffer = "         nRC2 = " + szGridView +
                                  ".cursor( ^" + vDialog.CtrlMapLOD_Entity.Name +
                                  "^ ).setNextContinue( " + szScopingEntityName + " );"
               ELSE
                  szWriteBuffer = "         nRC2 = " + szGridView +
                                  ".SetCursorScopeOI( ^" + vDialog.CtrlMapLOD_Entity.Name + "^,  3 ); // next" // zPOS_NEXT
               END

               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      " + szGridView + ".drop();"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            END

            szWriteBuffer = "%>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "</tbody>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "</table>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            // Put ending div for the scrollable table with stationary headings
            IF  szScrollingTable = "Y"
               szWriteBuffer = "</div>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            END
            
            // If the user has entered a WebGridNoDataMessage for this grid, then create
            // code to check if there was no data and if so, display this message to the
            // user in a <span>.
            // I believe I would need to know if there is a spacer in front of the grid, if
            // so, then I would assume I would put that spacer in front of this message
            // as well. 
            // What if I put this message as part of the table?  Do a colspan and then
            // put this message in?  But then I wouldn't have the class.
            IF vDialog.Control.WebNoGridDataMessage != "" 
            
               szWriteBuffer = "      <%"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      if ( iTableRowCnt == 0 )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      %>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               
               IF vDialog.Control.WebNoGridDataMsgClass = "" 
                  szWriteBuffer = "<span style=^^>" + vDialog.Control.WebNoGridDataMessage + "</span>"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               ELSE
                  szWriteBuffer = "<span class=^" + vDialog.Control.WebNoGridDataMsgClass + "^ style=^^>" + 
                                   vDialog.Control.WebNoGridDataMessage + "</span>"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               END
                              
               szWriteBuffer = "      <%"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      %>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            
               // KJS 05/06/09 - I am putting a div with style float:left around the tables so that if there
               // is a message to display if the table has no data, then this message will line up with the
               // table.  Not sure if placing this div will affect how the tables are painted but I hope not.
               szWriteBuffer = "</div>  <!-- End of div around table -->"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            END
            

         END  // IF szControlType = "Grid"

//********************** END OF GRID ***********************************

         IF szControlType = "MLEdit"  // MLEDIT
            SET CURSOR FIRST vDialog.CtrlMapLOD_Attribute WITHIN vDialog.Control
            IF RESULT >= zCURSOR_SET
               szWriteBuffer = "<%"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   // " + szControlType + ": " + szCtrlTag
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   strErrorMapValue = ^^;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   " + vDialog.CtrlMapView.Name + " = " + "task.getViewByName( ^" +
                               vDialog.CtrlMapView.Name + "^ );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   if ( " + vDialog.CtrlMapView.Name + " == null )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      " + vDialog.CtrlMapView.Name +
                               ".log().debug( ^Invalid View: ^, ^" + szCtrlTag + "^ );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   else"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      nRC = " + vDialog.CtrlMapView.Name +
                               ".cursor( ^" +
                               vDialog.CtrlMapRelatedEntity.Name + "^ ).checkExistenceOfEntity();"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      if ( nRC >= 0 )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               szContextName = ""
               IF vDialog.CtrlMapContext EXISTS
                  szContextName = vDialog.CtrlMapContext.Name
               END

               IF vDialog.CtrlMapER_Domain.MaxStringLth > 200
                  lMaxStringLength = vDialog.CtrlMapER_Domain.MaxStringLth
                  szMaxStringLength = lMaxStringLength
               ELSE
                  szMaxStringLength = "200"
               END

               szWriteBuffer = "         strErrorMapValue = " +
                               vDialog.CtrlMapView.Name +
                               ".cursor( ^" +
                               vDialog.CtrlMapRelatedEntity.Name + "^ ).getStringFromAttribute( ^" +
                               vDialog.CtrlMapER_Attribute.Name + "^, ^" +
                               szContextName + "^ );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   }"

               lStyleX = vDialog.Control.ExtendedStyle
               lTemp = IsFlagSequenceSet( lStyleX, zCONTROLX_PREFILL )
               IF lTemp != 0
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                  szWriteBuffer = "      if ( strErrorMapValue.length( ) == 0 )"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "         strErrorMapValue = ^" + vDialog.Control.Text + "^;"
               END

               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               szWriteBuffer = "%>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
               X_Size = vDialog.Control.SZDLG_X
               Size = X_Size / 4
               zIntegerToString( szSize, 10, Size )
               Y_Size = vDialog.Control.SZDLG_Y
               Size = Y_Size / 12
               zIntegerToString( szHeight, 10, Size )

               IF vDialog.Control.VisibleBorder = "Y"
                  zAppendQuotedString( szAbsoluteStyle, "border:'4px solid';border-style:'groove';", "style=", "^" )
               ELSE
                  zAppendQuotedString( szAbsoluteStyle, "border:'2px solid';border-style:'groove';", "style=", "^" )
               END

               IF vDialog.Control.WebCtrlType = "wysiwygEditor"

               // CreateTabIndexString( vDialog, szTabIndex )
               // CreateAbsolStyleString( vDialog, szAbsoluteStyle, lOffsetX, lOffsetY, "" )
               // szAbsoluteStyle = szAbsoluteStyle + szTabIndex

                  szClass = vDialog.Control.CSS_Class
                  IF szClass = ""
                     szClass = "widgEditor nothing"   // szClass = "mceSimple" TinyMCE default
                  END

                  szWriteBuffer = "<textarea name=^" + szCtrlTag + "^ id=^" + szCtrlTag +
                                  "^ class=^" + szClass + "^ " + szTitleHTML +
                                  szAbsoluteStyle + "^>" +
                               // "^ rows="15" cols="80" style="width: 80%">" +
                                  "<%=strErrorMapValue%></textarea>"

               ELSE

                  CreateTabIndexString( vDialog, szTabIndex )
                  szWriteBuffer = "<textarea name=^" + szCtrlTag + "^ id=^" + szCtrlTag + "^ " + szTitleHTML +
                                  szAbsoluteStyle + szTabIndex + " wrap=^wrap^>" +
                                  "<%=strErrorMapValue%></textarea>"

               END
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            END
         END   //IF szControlType = "MLEdit"
      END
   END
   // I am creating a div for every new y position.  Need to close this.  This
   // will not be correct if there was no controls.
   // If szFirstTimeThrough = "Y" then that means we were on a groupbox that doesn't have
   // any controls inside it.  If that's true, we didn't create the beginning <div so don't create
   // the closing div.
   // Only do this if we are positioning with relative positioning.
   IF  szNoPositioning = "Y" 
      IF szFirstTimeThrough = "" 
         szWriteBuffer = "</div>  <!-- End of a new line -->"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )   
      END
   END

   // szIndent = szIndentHold
END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: GenJSPJ_CrteEditBox
//
/////////////////////////////////////////////////////////////////////////////
GLOBAL OPERATION
GenJSPJ_CrteEditBox( VIEW vDialog BASED ON LOD TZWDLGSO,
                    INTEGER          lFile,
                    STRING ( 10000 ) szWriteBuffer,
                    STRING ( 50 )    szIndent,
                    STRING ( 32 )    szCtrlTag,
                    STRING ( 1 )     szTableRowFlag,
                    STRING ( 20 )    szJustify,
                    STRING ( 1 )     szNoPositioning,
                    INTEGER          lOffsetX,
                    INTEGER          lOffsetY )

   // Format an EDITBOX control.

   VIEW vDialogRoot BASED ON LOD TZWDLGSO
   STRING ( 32 )  szContextName
   STRING ( 300 ) szValue
   STRING ( 256 ) szStyle
   STRING ( 256 ) szClass
   STRING ( 256 ) szTitle
   STRING ( 256 ) szTitleHTML
   STRING ( 64 )  szType
   STRING ( 64 )  szWidget
   STRING ( 16 )  szTabIndex
   STRING ( 50 )  szEditActionCode
   STRING ( 32 )  szActionName
   STRING ( 10 )  szMaxStringLength
   STRING ( 10 )  szDisabled
   STRING ( 1 )   szWCP_Hidden
   INTEGER        lMaxStringLength
   INTEGER        lStyleX
   INTEGER        lTemp
   SHORT          bMapping
   SHORT          nRC
   
   // For testing no height on input boxes
   STRING ( 10 )  szWidth
   DECIMAL        DLUnits
   STRING ( 100 )  szSize
   STRING ( 100 )  szPosition

   CreateTabIndexString( vDialog, szTabIndex )
   //CreateAbsolStyleString( vDialog, szStyle, lOffsetX, lOffsetY, "<%=strErrorColor%>" )
   // KJS 07/08 - We placed DOCTYPE at the top of our html pages now.  For some reason, because of this
   // even though the pixel height is exactly the same as before, it shows up higher in the browser.
   // Because of this we have taken out the height for now and the input height will be determined in the
   // CSS.
   PIX_PER_DU( vDialog, DLUnits )
   zIntegerToString( szWidth, 10, vDialog.Control.SZDLG_X * DLUnits )
   szSize = "width:" + szWidth + "px;"
   // If zNoPositioning is null then we are using absolute positioning for controls
   IF  szNoPositioning = ""
      CreateAbsolPosString( vDialog, szPosition, lOffsetX, lOffsetY )
   END

   FixStyleString( szStyle, szSize, szPosition,  "<%=strErrorColor%>"  )
 
   
   szStyle = szStyle + szTabIndex

// szWriteBuffer = "<% strErrorMapValue = ^^; %>"  extraneous???
// WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )           dks 2005.01.11

   SET CURSOR FIRST vDialog.CtrlMapLOD_Attribute WITHIN vDialog.Control
   IF RESULT >= zCURSOR_SET
      bMapping = 1
      szWriteBuffer = "<%"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   //strErrorMapValue = task.CheckError( ^" + szCtrlTag + "^, strErrorTitle );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   strErrorMapValue = ^^;"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   if ( strErrorMapValue.length( ) > 0 )"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   {"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      strErrorColor = ^color: red;^;"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   }"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   else"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   {"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      strErrorColor = ^^;"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      " + vDialog.CtrlMapView.Name + " = " + "task.getViewByName( ^" +
                      vDialog.CtrlMapView.Name + "^ );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      if ( " + vDialog.CtrlMapView.Name + " == null )"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         " + vDialog.CtrlMapView.Name +
                      ".log().debug( ^Invalid View: ^, ^" + szCtrlTag + "^ );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      else"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      {"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         nRC = " + vDialog.CtrlMapView.Name +
                      ".cursor( ^" +
                      vDialog.CtrlMapRelatedEntity.Name + "^ ).checkExistenceOfEntity();"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         if ( nRC >= 0 )"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         {"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      IF vDialog.CtrlMapContext EXISTS
         szContextName = vDialog.CtrlMapContext.Name
      ELSE
         szContextName = ""
      END

      IF vDialog.CtrlMapER_Domain.MaxStringLth > 200
         lMaxStringLength = vDialog.CtrlMapER_Domain.MaxStringLth
         szMaxStringLength = lMaxStringLength
      ELSE
         szMaxStringLength = "200"
      END
      szWriteBuffer = "            strErrorMapValue = " +
                      vDialog.CtrlMapView.Name + ".cursor( ^" +
                      vDialog.CtrlMapRelatedEntity.Name + "^ ).getStringFromAttribute( ^" +
                      vDialog.CtrlMapER_Attribute.Name + "^, ^" +
                      szContextName + "^ );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "            " + vDialog.CtrlMapView.Name +
                      ".log().debug( ^" + vDialog.CtrlMapRelatedEntity.Name + "." +
                      vDialog.CtrlMapER_Attribute.Name + ": ^, strErrorMapValue );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         }"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         else"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "            " + vDialog.CtrlMapView.Name +
                      ".log().debug( ^Entity does not exist: ^, ^" +
                      vDialog.CtrlMapView.Name +
                      "." + vDialog.CtrlMapRelatedEntity.Name + "^ );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      }"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   }"

      lStyleX = vDialog.Control.ExtendedStyle
      lTemp = IsFlagSequenceSet( lStyleX, zCONTROLX_PREFILL )
      IF lTemp != 0
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
         szWriteBuffer = "      if ( strErrorMapValue.length( ) == 0 )"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         strErrorMapValue = ^" + vDialog.Control.Text + "^;"
      END
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

      szWriteBuffer = "%>"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
   ELSE
      bMapping = 0
   END

   //KJS 07/25/07
   //See if there is a WebControlProperty for "Hidden"
   //I don't think "hidden" is a webcontrolproperty for the editbox yet
   //but since I don't think this hurts I'm going to keep it in.
   SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Hidden"
   IF RESULT >= zCURSOR_SET
      szWCP_Hidden = "Y"
   ELSE
      szWCP_Hidden = "N"
   END


   IF vDialog.Control.WebCtrlType = "Hidden" OR szWCP_Hidden = "Y"
      szType = " type=^hidden^ "
   ELSE
   //IF vDialog.CtrlMapER_Domain EXISTS AND vDialog.CtrlMapER_Domain.Name = "Password"
   IF vDialog.CtrlMapER_Domain EXISTS AND vDialog.Control.Subtype = 4
      szType = " type=^password^ "
   ELSE
      szType = " type=^text^ "
   END
   END

   // If there is an Event for the EditBox, build code to insert in <input statement.
   szEditActionCode = ""
   IF vDialog.EventAct EXISTS
      szActionName = vDialog.EventAct.Tag
      IF vDialog.Event.Type = 16
         szEditActionCode = " onfocus=^" + szActionName + "()^ "
      ELSE
      IF vDialog.Event.Type = 17
         szEditActionCode = " onblur=^" + szActionName + "()^ "
      ELSE
      IF vDialog.Event.Type = 18
         szEditActionCode = " onchange=^" + szActionName + "()^ "
      ELSE
      IF vDialog.Event.Type = 21
         szEditActionCode = " onkeydown=^" + szActionName + "()^ "
      ELSE
      IF vDialog.Event.Type = 22
         szEditActionCode = " onkeyup=^" + szActionName + "()^ "
      ELSE
      IF vDialog.Event.Type = 24
         szEditActionCode = " onclick=^" + szActionName + "()^ "
      END
      END
      END
      END
      END
      END
   ELSE
      // If there is a Default button for the window, we must add some characters
      // to the end of the input statement.
      CreateViewFromView( vDialogRoot, vDialog )
      nRC = ResetViewFromSubobject( vDialogRoot )
      LOOP WHILE nRC = 0
         nRC = ResetViewFromSubobject( vDialogRoot )
      END
      IF vDialogRoot.Window.DfltButton != ""
         szEditActionCode = " onKeyPress=^return _OnEnter( event )^"
      ELSE
         szEditActionCode = ""
      END
      DropView( vDialogRoot )
   END

   lStyleX = vDialog.Control.ExtendedStyle
   lTemp = IsFlagSequenceSet( lStyleX, zCONTROLX_PREFILL )
   IF lTemp != 0 AND bMapping = 0
      szValue = "value=^" + vDialog.Control.Text + "^"
   ELSE
      szValue = "value=^<%=strErrorMapValue%>^"
   END

   //KJS 10/19/07 - Added title.
   //If we put a title on the control, when the mouse is hovered over the control, this text will display.
   szTitleHTML = ""
   szTitle = vDialog.Control.DIL_Text
   IF szTitle != ""
      szTitleHTML = " title=^" + szTitle + "^ "
   END

   CreateDisabledString( vDialog, szDisabled )
   szClass = vDialog.Control.CSS_Class
   IF szClass = ""
      szWriteBuffer = "<input name=^" + szCtrlTag + "^ id=^" + szCtrlTag + "^ " + szDisabled + szTitleHTML + szStyle + szType +
                      szValue + szEditActionCode + " >"
   ELSE
      szWriteBuffer = "<input class=^" + szClass + "^ name=^" + szCtrlTag + "^ id=^" + szCtrlTag + "^ " + szDisabled +
                      szTitleHTML + szStyle + szType + szValue + szEditActionCode + " >"
   END
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: GenJSPJ_CrteText
//
/////////////////////////////////////////////////////////////////////////////
GLOBAL OPERATION
GenJSPJ_CrteText( VIEW vDialog      BASED ON LOD TZWDLGSO,
                 VIEW vGroupParent BASED ON LOD TZWDLGSO,
                 VIEW vDialogRoot  BASED ON LOD TZWDLGSO,
                 INTEGER          lFile,
                 STRING ( 10000 ) szWriteBuffer,
                 STRING ( 50 )    szIndent,
                 STRING ( 32 )    szCtrlTag,
                 STRING ( 20 )    szJustify,
                 STRING ( 1 )     szNoPositioning,
                 INTEGER          lOffsetX,
                 INTEGER          lOffsetY )

   // Format a TEXT control.

   STRING ( 32 )  szContextName
   STRING ( 256 ) szStyle
   STRING ( 256 ) szClass
   STRING ( 256 ) szTitle
   STRING ( 256 ) szTitleHTML
   STRING ( 1000 ) szText
   STRING ( 16 )  szTabIndex
   STRING ( 10 )  szMaxStringLength
   STRING ( 20 )  szGroupParentType
   STRING ( 85 )  szHTMLCtrlID
   INTEGER        lMaxStringLength
   INTEGER        lSubtypeX
   INTEGER        lSubtype
   INTEGER        lTemp
   SHORT          nMultiLineFlag
   SHORT          nBoldFlag
   SHORT          nItalicFlag
   SHORT          nStrikeoutFlag
   SHORT          nUnderlineFlag
   INTEGER        lJustify
   INTEGER        lFontSize
   INTEGER        lTextColor
   INTEGER        lTextBkColor
   INTEGER        lBorderStyle
   INTEGER        lBorderColor
   INTEGER        lEscapement
   INTEGER        lType
   STRING ( 32 )  szFaceName
   STRING ( 256 ) szDecoration
   SHORT          nRC

   szText = vDialog.Control.Text
   CreateTabIndexString( vDialog, szTabIndex )
   
   szHTMLCtrlID = " id=^" + szCtrlTag + "^ name=^" + szCtrlTag + "^ "
   
   
   IF  szNoPositioning = "Y"
      CreateNoPosStyleString( vDialog, szStyle, "" )
   ELSE 
      CreateAbsolStyleString( vDialog, szStyle, lOffsetX, lOffsetY, "" )
   END   

   nRC = TX_GetTextRptCtrlBOI( vDialog, nMultiLineFlag, nBoldFlag,
                               nItalicFlag, nStrikeoutFlag,
                               nUnderlineFlag, lJustify,
                               lFontSize, lTextColor, lTextBkColor,
                               lBorderStyle, lBorderColor,
                               lEscapement, lType, szFaceName )

   // If the return code is <= 0, the CtrlBOI is null.
   szDecoration = ""
   IF nRC > 0

      IF nItalicFlag != 0
         szDecoration = szDecoration + "font-style:italic;"
      END

      IF nBoldFlag != 0
         szDecoration = szDecoration + "font-weight:bold;"
      END

      IF lJustify != 0
         nRC = IsFlagSequenceSet( lJustify, 2 )
         IF nRC != 0
            szDecoration = szDecoration + "text-align:center;"
         ELSE
            nRC = IsFlagSequenceSet( lJustify, 4 )
            IF nRC != 0
               szDecoration = szDecoration + "text-align:right;"
            END
         END
      END

      IF nUnderlineFlag != 0 AND nStrikeoutFlag != 0
         szDecoration = szDecoration + "text-decoration:underline line-through;"
      ELSE
         IF nUnderlineFlag != 0
            szDecoration = szDecoration + "text-decoration:underline;"
         END

         IF nStrikeoutFlag != 0
            szDecoration = szDecoration + "text-decoration:line-through;"
         END
      END
   END

   //KJS 10/19/07 - Added title.
   //If we put a title on the control, when the mouse is hovered over the control, this text will display.
   szTitleHTML = ""
   szTitle = vDialog.Control.DIL_Text
   IF szTitle != ""
      szTitleHTML = " title=^" + szTitle + "^ "
   END

   zAppendQuotedString( szStyle, szDecoration, "style=", "^" )
   szStyle = szStyle + szTabIndex
   szClass = vDialog.Control.CSS_Class

   // Check if a Group control as parent of this control requests relative postioning either through the
   // older "Span" setting or the newer "RelativePos" request.
   szGroupParentType = ""
   IF vGroupParent != 0
      // Override Style if parent group requests relative positioning
      SET CURSOR FIRST vGroupParent.WebControlProperty WHERE vGroupParent.WebControlProperty.Name = "Relative Positioning"
      IF RESULT >= zCURSOR_SET
         szGroupParentType = "RelativePos"
      ELSE
         szGroupParentType = vGroupParent.Control.WebCtrlType
      END
      IF szGroupParentType = "RelativePos" OR szGroupParentType = "Span"
         szStyle = "style=^position:relative;^"
      END
   END

   // Process variable Text mapping.
   SET CURSOR FIRST vDialog.CtrlMap WHERE vDialog.CtrlMap.Tag = "Displayed Text"
   IF RESULT < zCURSOR_SET
      SET CURSOR FIRST vDialog.CtrlMapLOD_Attribute WITHIN vDialog.Control
                 WHERE vDialog.CtrlMap.Tag = ""
   END
   IF RESULT >= zCURSOR_SET
      // There is mapping of the Display Text value.
      szWriteBuffer = "<% strTextDisplayValue = ^^;"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   " + vDialog.CtrlMapView.Name + " = " +
                      "task.getViewByName( ^" + vDialog.CtrlMapView.Name + "^ );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   if ( " + vDialog.CtrlMapView.Name + " == null )"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      " + vDialog.CtrlMapView.Name +
               ".log().debug( ^Invalid View: ^, ^" + szCtrlTag + "^ );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   else"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   {"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      nRC = " + vDialog.CtrlMapView.Name + ".cursor( ^" +
                      vDialog.CtrlMapRelatedEntity.Name + "^ ).checkExistenceOfEntity();"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      if ( nRC >= 0 )"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      IF vDialog.CtrlMapContext EXISTS
         szContextName = vDialog.CtrlMapContext.Name
      ELSE
         szContextName = ""
      END

      IF vDialog.CtrlMapER_Domain.DataType = "T" OR vDialog.CtrlMapER_Domain.DataType = "D"
         szWriteBuffer = "         strTextDisplayValue = " +
                         vDialog.CtrlMapView.Name +
                         ".cursor( ^" +
                         vDialog.CtrlMapRelatedEntity.Name + "^ ).getStringFromAttribute( ^" +
                         vDialog.CtrlMapER_Attribute.Name + "^, ^" +
                         szContextName + "^ );"
      ELSE
         IF vDialog.CtrlMapER_Domain.MaxStringLth > 200
            lMaxStringLength = vDialog.CtrlMapER_Domain.MaxStringLth
            szMaxStringLength = lMaxStringLength
         ELSE
            szMaxStringLength = "200"
         END

         szWriteBuffer = "         strTextDisplayValue = " +
                         vDialog.CtrlMapView.Name +
                         ".cursor( ^" +
                         vDialog.CtrlMapRelatedEntity.Name + "^ ).getStringFromAttribute( ^" +
                         vDialog.CtrlMapER_Attribute.Name + "^, ^" +
                         szContextName + "^ );"
      END

      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   }"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "%>"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

      szText = "<%=strTextDisplayValue%>"

   END

   IF vDialog.EventAct EXISTS    // There is only one EventAct, which is HotText.
      IF vDialog.EventAct.Type = 45    // Type 45 is Hyperlink Action.
         // The Text triggers a Hyperlink to a constant or variable URL address
         SET CURSOR FIRST vDialog.CtrlMap WHERE vDialog.CtrlMap.Tag = "Hyperlink URL"
         IF RESULT >= zCURSOR_SET
            // There is mapping of the Hyperlink URL value.
            szWriteBuffer = "<% strTextURL_Value = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   " + vDialog.CtrlMapView.Name + " = " +
                            "task.getViewByName( ^" + vDialog.CtrlMapView.Name + "^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   if ( " + vDialog.CtrlMapView.Name + " == null )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      " + vDialog.CtrlMapView.Name +
                     ".log().debug( ^Invalid View: ^, ^" + szCtrlTag + "^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   else"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      nRC = " + vDialog.CtrlMapView.Name + ".cursor( ^" +
                            vDialog.CtrlMapRelatedEntity.Name + "^ ).checkExistenceOfEntity();"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      if ( nRC >= 0 )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            IF vDialog.CtrlMapContext EXISTS
               szContextName = vDialog.CtrlMapContext.Name
            ELSE
               szContextName = ""
            END

            IF vDialog.CtrlMapER_Domain.DataType = "T" OR vDialog.CtrlMapER_Domain.DataType = "D"
               szWriteBuffer = "         strTextURL_Value = " +
                               vDialog.CtrlMapView.Name +
                               ".cursor( ^" +
                               vDialog.CtrlMapRelatedEntity.Name + "^ ).getStringFromAttribute( ^" +
                               vDialog.CtrlMapER_Attribute.Name + "^, ^" +
                               szContextName + "^ );"
            ELSE
               IF vDialog.CtrlMapER_Domain.MaxStringLth > 200
                  lMaxStringLength = vDialog.CtrlMapER_Domain.MaxStringLth
                  szMaxStringLength = lMaxStringLength
               ELSE
                  szMaxStringLength = "200"
               END

               szWriteBuffer = "         strTextURL_Value = " +
                               vDialog.CtrlMapView.Name +
                               ".cursor( ^" +
                               vDialog.CtrlMapRelatedEntity.Name + "^ ).getStringFromAttribute( ^" +
                               vDialog.CtrlMapER_Attribute.Name + "^, ^" +
                               szContextName + "^ );"
            END

            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "%>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            //KJS 10/19/07 - Added title.

            // The Hyperlink URL value is a variable.
            IF szClass = ""
               szWriteBuffer = "<a href=^<%=strTextURL_Value%>^ " + szTitleHTML + szStyle + " target=^_blank^>" + szText + "</a>"
            ELSE
               szWriteBuffer = "<a href=^<%=strTextURL_Value%>^  class=^" + szClass + "^ " + szTitleHTML + szStyle + " target=^_blank^>" + szText + "</a>"
            END

         ELSE

            // The Hyperlink URL value is a constant in the Action.
            SET CURSOR FIRST vDialogRoot.Action WHERE vDialogRoot.Action.ZKey = vDialog.EventAct.ZKey
            IF vDialogRoot.Action.WebHTML_TransferAddress = ""
               MessageSend( vDialog, "", "XSL Generation",
                            "A Hyperlink Action without URL mapping requires a 'Link to HTML Address' value.",
                            zMSGQ_OBJECT_CONSTRAINT_WARNING, 0 )
            END

            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            //KJS 10/19/07 - Added title.
            IF szClass = ""
               szWriteBuffer = "<a href=^" + vDialogRoot.Action.WebHTML_TransferAddress + "^ " + szTitleHTML + szStyle + " target=^_blank^>" + szText + "</a>"
            ELSE
               szWriteBuffer = "<a href=^" + vDialogRoot.Action.WebHTML_TransferAddress + "^  class=^" + szClass + "^ " + szTitleHTML + szStyle + " target=^_blank^>" + szText + "</a>"
            END

         END
      ELSE
         // This is HotText with regular Action, rather than HyperLink.
         szWriteBuffer = ""
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         //KJS 10/17/2007 Jeff says we need "javascript:" before the action name for href actions.  I think this
         //is the place to put it but I confess I'm not exactly sure...
         //KJS 10/19/07 - Added title.
         IF szClass = ""
            szWriteBuffer = "<a href=^javascript:" + vDialog.EventAct.Tag + "( );^ " + szTitleHTML + szStyle + ">" + szText + "</a>"
         ELSE
            szWriteBuffer = "<a href=^javascript:" + vDialog.EventAct.Tag + "( );^ class=^" + szClass + "^ " + szTitleHTML + szStyle + ">" + szText + "</a>"
         END
      END
   ELSE
      // Regular Text Control (No HotText)
      szWriteBuffer = ""
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      IF szClass = ""
         zAppendQuotedString( szStyle, szDecoration, "style=", "^" )
         szWriteBuffer = "<span " + szHTMLCtrlID + szTitleHTML + szStyle + ">" + szText + "</span>"
      ELSE
         szWriteBuffer = "<span class=^" + szClass + "^ "  + szHTMLCtrlID + szTitleHTML + szStyle + ">" + szText + "</span>"
      END
   END

   WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: GenJSPJ_InputMapRecurs
//
/////////////////////////////////////////////////////////////////////////////
GLOBAL OPERATION
GenJSPJ_InputMapRecurs( VIEW vDialog BASED ON LOD TZWDLGSO,
                       STRING ( 32 )    ViewName,
                       INTEGER          lFile,
                       STRING ( 10000 ) szWriteBuffer,
                       INTEGER          TableRowCnt )

   VIEW vDialog2 BASED ON LOD TZWDLGSO
   VIEW vDialog3 BASED ON LOD TZWDLGSO
   STRING ( 32 ) szContextName
   STRING ( 32 ) szScopingEntityName
   STRING ( 32 ) szListMappingEntityName
   STRING ( 50 ) szViewName
   STRING ( 50 ) szControlType
   STRING ( 50 ) szCtrlCtrlType
   STRING ( 50 ) szCtrlTag
   STRING ( 50 ) szCheckBoxValue
   STRING ( 2 )  szSuffix
   STRING ( 10 ) szMaxStringLength
   STRING ( 1 )  szWCP_Edit
   STRING ( 1 )  szhFlag
   INTEGER       lEditBox
   INTEGER       lSubtype
   INTEGER       lSubtypeX
   INTEGER       lTemp
   INTEGER       lMaxStringLength
   SHORT         nViewNameLth
   SHORT         bResetToPlaceHolder
   SHORT         nRC

   // Handle mapping for the named view (ViewName) that was passed in.
   // Note that Control.SubType is an integer composed of multiple values,
   // but is always less than 12,000 for Domain Combos.  // not true!!!! // dks 2008.04.04
   FOR EACH vDialog.Control

      lSubtype = vDialog.Control.Subtype
      lTemp = IsFlagSequenceSet( lSubtype, zCONTROL_DISABLED )
      IF lTemp != 0
         // Disabled entries are skipped.
      ELSE
         szCtrlTag = vDialog.Control.Tag
         // On 6/25/07, DonC eliminated the code that kept hidden fields from being mapped on input. Thus, hidden
         // fields are being mapped on both output and input.
         SET CURSOR FIRST vDialog.CtrlMapView WITHIN vDialog.Control
                    WHERE vDialog.CtrlMapView.Name = ViewName
         IF RESULT >= zCURSOR_SET //AND vDialog.Control.WebCtrlType != "Hidden"

            szControlType = vDialog.ControlDef.Tag

            IF szControlType = "EditBox"  OR
               szControlType = "CheckBox" OR
               szControlType = "MLEdit"   OR
               szControlType = "RadioGrp"

               SET CURSOR FIRST vDialog.CtrlMapLOD_Attribute WITHIN vDialog.Control
               IF RESULT >= zCURSOR_SET
                  IF vDialog.CtrlMapContext EXISTS
                     szContextName = vDialog.CtrlMapContext.Name
                  ELSE
                     szContextName = ""
                  END                  

                  szViewName = vDialog.CtrlMapView.Name
                  nViewNameLth = zstrlen( szViewName )

                  szWriteBuffer = "      // " + szControlType + ": " + szCtrlTag
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "      nRC = " + szViewName +
                                                  ".cursor( ^" +
                                                  vDialog.CtrlMapRelatedEntity.Name + "^ ).checkExistenceOfEntity();"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "      if ( nRC >= 0 ) // CursorResult.SET"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "      {"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "         strValue = request.getParameter( ^" +
                                  szCtrlTag + "^ );"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  // try
                  szWriteBuffer = "         try"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "         {"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 ) 
                  szWriteBuffer = "            " + szViewName +
                                                  ".cursor( ^" + vDialog.CtrlMapRelatedEntity.Name +
                                                  "^ ).setAttribute( ^" +
                                                  vDialog.CtrlMapER_Attribute.Name + "^, strValue, " +
                                                  "^" + szContextName + "^ );"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "         }"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  // catch
                  szWriteBuffer = "         catch ( InvalidAttributeValueException e)"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "         {"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "            nMapError = -16;"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "            strError += ^" + szCtrlTag +
                                  "^ + ^\t^ + strValue + ^\t^ +  e.getReason();"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                 
                  // Create an entity in the message queue object. kkk
                  szWriteBuffer = "            // Create an entity in the message queue object."
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "            vMsgQ = task.getViewByName( ^__MSGQ^);"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "            if ( vMsgQ != null )"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "            {"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "            vMsgQ.cursor(^WebMsg^).createEntity( CursorPosition.NEXT );"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "            vMsgQ.cursor(^WebMsg^).setAttribute( ^ControlTag^, ^" + szCtrlTag + "^ );"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "            vMsgQ.cursor(^WebMsg^).setAttribute( ^ErrorMsg^, strError );"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "            }"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                  
                  
                  szWriteBuffer = "         }"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  
                  
                  szWriteBuffer = "      }"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

               END
            ELSE
            IF szControlType = "ComboBox"

               nRC = AreBitsSetInFlag( lSubtype, 61440 ) // 0x0000F000
               IF nRC = 0   // IF vDialog.Control.Subtype < 12000  ==> Domain Combobox

                  // This is currently the same as Editbox above.
                  SET CURSOR FIRST vDialog.CtrlMapLOD_Attribute WITHIN vDialog.Control
                  IF RESULT >= zCURSOR_SET
                     IF vDialog.CtrlMapContext EXISTS
                        szContextName = vDialog.CtrlMapContext.Name
                     ELSE
                        szContextName = ""
                     END

                     szViewName = vDialog.CtrlMapView.Name
                     nViewNameLth = zstrlen( szViewName )

                     szWriteBuffer = "      // " + szControlType + ": " + szCtrlTag
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "      nRC = " + szViewName +
                                                  ".cursor( ^" +
                                                  vDialog.CtrlMapRelatedEntity.Name + "^ ).checkExistenceOfEntity();"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "      if ( nRC >= 0 )"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "      {"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "         strValue = request.getParameter( ^h" +
                                     szCtrlTag + "^ );"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                        
                     // try
                     szWriteBuffer = "         try"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "         {"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     
                     szWriteBuffer = "         " + szViewName +
                                                     ".cursor( ^" +
                                                     vDialog.CtrlMapRelatedEntity.Name +
                                                     "^ ).setAttribute( ^" +
                                                     vDialog.CtrlMapER_Attribute.Name + "^, strValue, ^" + szContextName + "^ );"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        
                     szWriteBuffer = "         }"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     // catch
                     szWriteBuffer = "         catch ( InvalidAttributeValueException e)"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "         {"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "            nMapError = -16;"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "            strError += ^" + szCtrlTag +
                                     "^ + ^\t^ + strValue + ^\t^ + e.getReason();"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                    
                     // Create an entity in the message queue object.
                     szWriteBuffer = "            // Create an entity in the message queue object."
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "            vMsgQ = task.getViewByName( ^__MSGQ^);"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "            if ( vMsgQ != null )"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "            {"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "            vMsgQ.cursor(^WebMsg^).createEntity( CursorPosition.NEXT );"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "            vMsgQ.cursor(^WebMsg^).setAttribute( ^ControlTag^, ^" + szCtrlTag + "^ );"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "            vMsgQ.cursor(^WebMsg^).setAttribute( ^ErrorMsg^, strError );"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "            }"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                  
                     szWriteBuffer = "         }"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     // end of try/catch
                  
                     szWriteBuffer = "      }"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

                  END
               ELSE
                  // Combobox with Auto Include or Set Position Only
                  // Note that this code is not executed if the view being
                  // passed is for the list mapping, instead of the edit
                  // mapping. Otherwise, the code would be generated twice,
                  // once when this routine is called for the edit view and
                  // once for the list view.
                  CreateViewFromView( vDialog2, vDialog )
                  SET CURSOR PREVIOUS vDialog2.CtrlMap
                  IF RESULT < zCURSOR_SET
                     // We were positioned on the first CtrlMap, which means we
                     // were being called for the edit view.
                     szWriteBuffer = "      // " + szControlType + ": " + szCtrlTag
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                     // Position on second CtrlMap, which is for list mapping Attribute.
                     SET CURSOR NEXT vDialog2.CtrlMap

                     // Position on third CtrlMap, which is for list mapping Entity.
                     // If it is null, the list mapping entity is from the prior CtrlMap.
                     CreateViewFromView( vDialog3, vDialog2 )
                     SET CURSOR NEXT vDialog3.CtrlMap
                     IF vDialog3.CtrlMapLOD_Entity EXISTS
                        szListMappingEntityName = vDialog3.CtrlMapLOD_Entity.Name
                     ELSE
                        szListMappingEntityName = vDialog2.CtrlMapRelatedEntity.Name
                     END

                     // Position on fourth CtrlMap, which is for scoping Entity.
                     SET CURSOR NEXT vDialog3.CtrlMap
                     IF vDialog3.CtrlMapLOD_Entity EXISTS
                        szScopingEntityName = "^" + vDialog3.CtrlMapLOD_Entity.Name + "^"
                     ELSE
                        szScopingEntityName = ""
                     END

                     DropView( vDialog3 )

                     IF vDialog2.CtrlMapView EXISTS
                        szWriteBuffer = "      " + vDialog2.CtrlMapView.Name + " = " +
                                        "task.getViewByName( ^" + vDialog2.CtrlMapView.Name + "^ );"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "      if ( " + vDialog2.CtrlMapView.Name + " == null )"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "      {"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                        szWriteBuffer = "         strValue = request.getParameter( ^h" + szCtrlTag + "^ );"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "         if ( strValue != null )"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "         {"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "            nRelPos = java.lang.Integer.parseInt( strValue );"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                        IF vDialog.Control.Subtype >= 20480 AND vDialog.Control.Subtype <= 21252   // IF Auto Include
                           // For Auto Include, we must decrement nRelPos for blank entry.
                           szWriteBuffer = "         nRelPos--;    // For Auto Include combos, we need to decrement for the blank entry."
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        END

                        szWriteBuffer = "            " + vDialog2.CtrlMapView.Name +
                                        ".setPosition( ^" + szListMappingEntityName + "^, nRelPos, " + szScopingEntityName + " );"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "         }"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                        IF vDialog.Control.Subtype >= 36864 AND vDialog.Control.Subtype <= 45056   // IF Set Foreign Key
                           //Set Foreign Key
                           szWriteBuffer = " "
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "         // Set Foreign Key Code "
                           //Check the existence of the edit mapping entity
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "         nRC = " + vDialog.CtrlMapView.Name +
                                           ".cursor( ^" +
                                           vDialog.CtrlMapRelatedEntity.Name + "^ ).checkExistenceOfEntity();"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "         if ( nRC >= 0 )"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "         {"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                           IF vDialog2.CtrlMapContext EXISTS
                              szContextName = vDialog2.CtrlMapContext.Name
                           ELSE
                              szContextName = ""
                           END

                           IF vDialog2.CtrlMapER_Domain.MaxStringLth > 200
                              lMaxStringLength = vDialog2.CtrlMapER_Domain.MaxStringLth
                              szMaxStringLength = lMaxStringLength
                           ELSE
                              szMaxStringLength = "200"
                           END

                           szWriteBuffer = "            strValue = " + vDialog2.CtrlMapView.Name +
                           ".cursor( ^" +
                           vDialog2.CtrlMapRelatedEntity.Name + "^ ).getStringFromAttribute( ^" +
                           vDialog2.CtrlMapER_Attribute.Name + "^, ^" + szContextName + "^ );"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )


                           IF vDialog.CtrlMapContext EXISTS
                              szContextName = vDialog.CtrlMapContext.Name
                           ELSE
                              szContextName = ""
                           END
                           
                           // try
                           szWriteBuffer = "         try"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "         {"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           
                           szWriteBuffer = "            " + vDialog.CtrlMapView.Name + ".cursor(^" +
                           vDialog.CtrlMapRelatedEntity.Name + "^ ).setAttribute( ^" +
                           vDialog.CtrlMapER_Attribute.Name + "^, strValue, ^" + szContextName + "^ );"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              
                           szWriteBuffer = "         }"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           // catch
                           szWriteBuffer = "         catch ( InvalidAttributeValueException e)"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "         {"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "            nMapError = -16;"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "            strError += ^" + szCtrlTag +
                                           "^ + ^\t^ + strValue + ^\t^ + e.getReason();"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                          
                           // Create an entity in the message queue object. 
                           szWriteBuffer = "            // Create an entity in the message queue object."
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "            vMsgQ = task.getViewByName( ^__MSGQ^);"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "            if ( vMsgQ != null )"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "            {"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "            vMsgQ.cursor(^WebMsg^).createEntity( CursorPosition.NEXT );"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "            vMsgQ.cursor(^WebMsg^).setAttribute( ^ControlTag^, ^" + szCtrlTag + "^ );"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "            vMsgQ.cursor(^WebMsg^).setAttribute( ^ErrorMsg^, strError );"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "            }"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                  
                           szWriteBuffer = "         }"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           // end of try/catch
                                 

                           szWriteBuffer = "         }"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        END

                        // IF Auto Include
                        IF vDialog.Control.Subtype >= 20480 AND vDialog.Control.Subtype <= 21252   
                           // Auto Include only.
                           szWriteBuffer = " "
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "         // Auto Include Code "
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "         // If the value is ^0^ then the user has selected the null entry, we do not want to do an include."
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "         // If there is an entity, we want to exclude it. "
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                           szWriteBuffer = "         if ( !strValue.equals(^0^))"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "         {"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           
                           szWriteBuffer = "            nRC = " + vDialog.CtrlMapView.Name +
                                           ".cursor( ^" +
                                           vDialog.CtrlMapRelatedEntity.Name + "^ ).checkExistenceOfEntity();"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "            if ( nRC >= 0 )"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "            {"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                           //KJS 12/11/07 - Adding code to check if we are already positioned on the correct
                           //Entity, so then we would not want to exclude and include.  Seems like this is only
                           //going to matter if this combo box is in a grid.
                           //KELLY121008
                           szWriteBuffer = "               // Only do the automatic include if this is a different entity"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "               strTemp = " + vDialog.CtrlMapView.Name + ".cursor( ^" +
                                           vDialog.CtrlMapRelatedEntity.Name + "^ ).getStringFromAttribute( ^" + vDialog.CtrlMapER_Attribute.Name + "^ );"

                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                           szWriteBuffer = "               if ( !strTemp.equals( " + vDialog2.CtrlMapView.Name +
                                           ".cursor( ^" + vDialog2.CtrlMapRelatedEntity.Name + 
                                           "^ ).getStringFromAttribute( ^" + vDialog2.CtrlMapER_Attribute.Name + "^ ))) "

                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "               {"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "                  " + vDialog.CtrlMapView.Name +
                                           ".cursor( ^" +
                                           vDialog.CtrlMapRelatedEntity.Name +
                                           "^).exclude( CursorPosition.NONE );"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                                      
                           szWriteBuffer = "                  " + vDialog.CtrlMapView.Name +
                                           ".cursor( ^" +
                                           vDialog.CtrlMapRelatedEntity.Name + "^ ).includeSubobject( " +
                                           vDialog2.CtrlMapView.Name + ".cursor( ^" +
                                           vDialog2.CtrlMapRelatedEntity.Name +
                                           "^ ), CursorPosition.NEXT ); "
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "               }"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                           szWriteBuffer = "            }"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "            else"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "                  " + vDialog.CtrlMapView.Name +
                                           ".cursor( ^" +
                                           vDialog.CtrlMapRelatedEntity.Name + "^).includeSubobject( " +
                                           vDialog2.CtrlMapView.Name + ".cursor( ^" +
                                           vDialog2.CtrlMapRelatedEntity.Name +
                                           "^, CursorPosition.NEXT );"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )


                           szWriteBuffer = "         }"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "         else"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "         {"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "            nRC = " + vDialog.CtrlMapView.Name +
                                           ".cursor( ^" +
                                           vDialog.CtrlMapRelatedEntity.Name + "^ ).checkExistenceOfEntity();"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "            if ( nRC >= 0 )"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "            {"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "                  " + vDialog.CtrlMapView.Name +
                                           ".cursor( ^" +
                                           vDialog.CtrlMapRelatedEntity.Name +
                                           "^).exclude( CursorPosition.NONE );"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "            }"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "         }"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                        END

                        szWriteBuffer = "      }"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

                     ELSE
                        MessageSend( vDialog, "", "XSL Generation",
                                     "Missing List Mapping.",
                                     zMSGQ_OBJECT_CONSTRAINT_WARNING, 0 )
                     END
                  END

                  DropView( vDialog2 )

               END
            ELSE
            IF szControlType = "ListBox"
               szScopingEntityName = ""
               CreateViewFromView( vDialog2, vDialog )
               SET CURSOR NEXT vDialog2.CtrlMap
               IF vDialog2.CtrlMapLOD_Entity EXISTS
                  szScopingEntityName = "^" + vDialog2.CtrlMapLOD_Entity.Name + "^"
               END

               szWriteBuffer = "      // " + szControlType + ": " + szCtrlTag
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               szWriteBuffer = "      strValue = request.getParameter( ^h" + szCtrlTag + "^ );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      if ( strValue != null )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         nRelPos = java.lang.Integer.parseInt( strValue );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               szWriteBuffer = "            " + vDialog.CtrlMapView.Name + ".cursor( ^" + vDialog.CtrlMapLOD_Entity.Name + "^ )" +
                               ".setPosition( " + 
                               "nRelPos, " + szScopingEntityName + " );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               szWriteBuffer = "      }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               DropView( vDialog2 )

            ELSE
            IF szControlType = "Calendar"
               SET CURSOR FIRST vDialog.CtrlMapLOD_Attribute WITHIN vDialog.Control
               IF RESULT >= zCURSOR_SET
                  szWriteBuffer = "      // " + szControlType + ": " + szCtrlTag
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szViewName = vDialog.CtrlMapView.Name
                  szWriteBuffer = "      nRC = " + szViewName +
                                         ".cursor( ^" +
                                         vDialog.CtrlMapRelatedEntity.Name + "^ ).checkExistenceOfEntity();"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "      if ( nRC >= 0 )"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "      {"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "         strValue = request.getParameter( ^" + szCtrlTag + "^ );"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "         strDateFormat = request.getParameter( ^zDateFormat^ );"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  
                  
                     // try
                     szWriteBuffer = "         try"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "         {"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     
                     szWriteBuffer = "            " + vDialog.CtrlMapView.Name +
                                     ".cursor( ^" +
                                     vDialog.CtrlMapRelatedEntity.Name +
                                     "^ ).setAttribute( ^" + vDialog.CtrlMapER_Attribute.Name + "^, strValue, strDateFormat );"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        
                        
                     szWriteBuffer = "         }"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     // catch
                     szWriteBuffer = "         catch ( InvalidAttributeValueException e)"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "         {"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "            nMapError = -16;"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "            strError += ^" + szCtrlTag +
                                     "^ + ^\t^ + strValue + ^\t^ + e.getReason();"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                    
                     // Create an entity in the message queue object. kkk
                     szWriteBuffer = "            // Create an entity in the message queue object."
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "            vMsgQ = task.getViewByName( ^__MSGQ^);"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "            if ( vMsgQ != null )"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "            {"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "            vMsgQ.cursor(^WebMsg^).createEntity( CursorPosition.NEXT );"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "            vMsgQ.cursor(^WebMsg^).setAttribute( ^ControlTag^, ^" + szCtrlTag + "^ );"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "            vMsgQ.cursor(^WebMsg^).setAttribute( ^ErrorMsg^, strError );"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "            }"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                  
                     szWriteBuffer = "         }"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     // end of try/catch


                  szWriteBuffer = "      }"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                  WL_QC( vDialog, lFile, "", "^", 0 )

               END
            ELSE
            IF szControlType = "Grid"

               szCtrlTag = vDialog.Control.Tag
               szWriteBuffer = "      // " + szControlType + ": " + szCtrlTag
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      iTableRowCnt = 0;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

               // KJS 5/1/08 - Create a temp view to the grid view and loop through that creating the mapping.
               // That way, if there are other grids on the page using the same view, we have not messed up
               // the positioning for their mapping.
               szWriteBuffer = "      // We are creating a temp view to the grid view so that if there are "
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      // grids on the same window with the same view we do not mess up the "
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      // entity positions. "
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      vGridTmp = " + vDialog.CtrlMapView.Name + ".newView();"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               // See if a scoping entity has been specified, and if so, use it.
               lSubtypeX = vDialog.Control.ExtendedStyle
               lSubtypeX = IsFlagSequenceSet( lSubtypeX, zSS_SCOPE_OI )
               IF lSubtypeX = 0
                  CreateViewFromView( vDialog2, vDialog )
                  SET CURSOR NEXT vDialog2.CtrlMap
                  IF vDialog2.CtrlMapLOD_Entity EXISTS
                     szScopingEntityName = "^" + vDialog2.CtrlMapLOD_Entity.Name + "^"
                  ELSE
                     szScopingEntityName = ""
                  END

                  DropView( vDialog2 )
                  szWriteBuffer = "      nRC = vGridTmp.cursor( ^" +
                           vDialog.CtrlMapLOD_Entity.Name + "^).setFirst( " + szScopingEntityName + " );"
               ELSE
                  szWriteBuffer = "      nRC = vGridTmp.SetCursorScopeOI( ^" +
                           vDialog.CtrlMapLOD_Entity.Name + "^, 1 ); // first" // zPOS_FIRST
               END

               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      while ( nRC >= 0 )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         lEntityKey = " +
                                         "vGridTmp.cursor( ^" + vDialog.CtrlMapLOD_Entity.Name + "^ ).getEntityKey();"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         strEntityKey = Long.toString( lEntityKey );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         iTableRowCnt++;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

               // Process each subcontrol.
               SetViewToSubobject( vDialog, "CtrlCtrl" )
               FOR EACH vDialog.Control

                  szCtrlCtrlType = vDialog.ControlDef.Tag

                  IF szCtrlCtrlType = "GridSubCtl" AND vDialog.CtrlCtrl EXISTS
                     SetViewToSubobject( vDialog, "CtrlCtrl" )
                     bResetToPlaceHolder = 1
                     szCtrlCtrlType = vDialog.ControlDef.Tag
                  ELSE
                     bResetToPlaceHolder = 0
                  END

                  szCtrlTag = vDialog.Control.Tag

                  IF szCtrlCtrlType = "ComboBox" OR szCtrlCtrlType = "GridComboCtl"
                     //If this is a combobox, then we get our request.GetParameter from the
                     //hidden field (ex: hComboBox1)
                     szhFlag = "h"
                  ELSE
                     szhFlag = ""
                  END

                  //KELLY - Would I want to make an "IF" statement here to check if this control id
                  //is disabled.  If so, I assume I don't want to create any of the mapping code.

                  IF  vDialog.Control.Disabled != "Y"

                  //KJS 7/25/07 - Check if this control should be an edit control
                  SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Edit"
                  IF RESULT >= zCURSOR_SET
                     szWCP_Edit = "Y"
                  ELSE
                     szWCP_Edit = "N"
                  END

                  // If this is an edit box, then set the mapping code.
                  IF vDialog.Control.WebCtrlType = "Edit" OR szWCP_Edit = "Y"
                  
                     lEditBox = 1
                     
                     szContextName = ""
                     SET CURSOR FIRST vDialog.CtrlMapLOD_Attribute WITHIN vDialog.Control
                     IF RESULT >= zCURSOR_SET
                        IF vDialog.CtrlMapContext EXISTS
                           szContextName = vDialog.CtrlMapContext.Name
                        ELSE
                           szContextName = ""
                        END
                     END
                     

                     szWriteBuffer = "         strTag = ^@" + szCtrlTag + "#^ + strEntityKey;"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "         strValue = request.getParameter( strTag );"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     // If strValue is null, then that means that this row of the grid is being hidden and so
                     // no value was assigned.  If this is the case, then we do not want to process this row so ignore.
                     szWriteBuffer = "         if ( strValue != null ) "
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "         { "
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                     IF vDialog.CtrlMapER_Domain.MaxStringLth > 200
                        lMaxStringLength = vDialog.CtrlMapER_Domain.MaxStringLth
                        szMaxStringLength = lMaxStringLength
                     ELSE
                        szMaxStringLength = "200"
                     END
                     
                     
                     // try
                     szWriteBuffer = "            try"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "            {"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     
                     szWriteBuffer = "               vGridTmp.cursor( ^" + vDialog.CtrlMapRelatedEntity.Name +
                                                           "^ ).setAttribute( ^" + vDialog.CtrlMapER_Attribute.Name +
                                                           "^, strValue, ^" + szContextName + "^ );"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        
                     szWriteBuffer = "            }"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     // catch
                     szWriteBuffer = "            catch ( InvalidAttributeValueException e)"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "            {"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "               nMapError = -16;"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "               strError += ^" + szCtrlTag +
                                     "^ + ^\t^ + strValue + ^\t^ + e.getReason();"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                    
                     // Create an entity in the message queue object. kkk
                     szWriteBuffer = "            // Create an entity in the message queue object."
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "            vMsgQ = task.getViewByName( ^__MSGQ^);"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "            if ( vMsgQ != null )"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "            {"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "            vMsgQ.cursor(^WebMsg^).createEntity( CursorPosition.NEXT );"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "            vMsgQ.cursor(^WebMsg^).setAttribute( ^ControlTag^, ^" + szCtrlTag + "^ );"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "            vMsgQ.cursor(^WebMsg^).setAttribute( ^ErrorMsg^, strError );"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "            }"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                  
                     szWriteBuffer = "            }"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     // end of try/catch
                     
                     
                     szWriteBuffer = "         } "
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )


                  ELSE
                     lEditBox = 0
                  END


                  IF szCtrlCtrlType = "GridCheckCtl" AND vDialog.Control.Disabled != "Y" //DonC added 7/25/07

                     szWriteBuffer = "         strTag = ^" + szCtrlTag + "^ + strEntityKey;"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "         strValue" + szSuffix + " = request.getParameter( strTag );"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szCheckBoxValue = vDialog.Control.RadioOrCheckboxValue
                     
                     // try
                     szWriteBuffer = "         try"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "         {"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     
                     szWriteBuffer = "            if ( strValue" + szSuffix + " != null )"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "               vGridTmp.cursor( ^" +
                                  vDialog.CtrlMapRelatedEntity.Name +
                                  "^).setAttribute( ^" + vDialog.CtrlMapER_Attribute.Name +
                                  "^, ^" + szCheckBoxValue + "^, ^^, 0 );"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "            else"
                     WL_QC( vDialog, lFile, szWriteBuffer, "'", 0 )
                     szWriteBuffer = "               vGridTmp.cursor( ^" +
                                  vDialog.CtrlMapRelatedEntity.Name +
                                  "^ ).setAttribute( ^" + vDialog.CtrlMapER_Attribute.Name +
                                  "^, ^^, ^^, 0 );"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                        
                     szWriteBuffer = "         }"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     // catch
                     szWriteBuffer = "         catch ( InvalidAttributeValueException e)"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "         {"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "            nMapError = -16;"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "            strError += ^" + szCtrlTag +
                                     "^ + ^\t^ + strValue + ^\t^ + e.getReason();"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                    
                     // Create an entity in the message queue object. kkk
                     szWriteBuffer = "            // Create an entity in the message queue object."
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "            vMsgQ = task.getViewByName( ^__MSGQ^);"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "            if ( vMsgQ != null )"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "            {"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "            vMsgQ.cursor(^WebMsg^).createEntity( CursorPosition.NEXT );"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "            vMsgQ.cursor(^WebMsg^).setAttribute( ^ControlTag^, ^" + szCtrlTag + "^ );"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "            vMsgQ.cursor(^WebMsg^).setAttribute( ^ErrorMsg^, strError );"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "            }"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                  
                     szWriteBuffer = "         }"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                     // end of try/catch
                  END

                  IF szCtrlCtrlType = "ComboBox" OR
                     szCtrlCtrlType = "GridComboCtl"

                     lSubtype = vDialog.Control.Subtype
                     lTemp = IsFlagSequenceSet( lSubtype, zCONTROL_DISABLED )
                     IF lTemp = 0
                        IF vDialog.CtrlMapContext EXISTS
                           szContextName = vDialog.CtrlMapContext.Name
                        ELSE
                           szContextName = ""
                        END

                        lSubtype = vDialog.Control.Subtype
                        nRC = AreBitsSetInFlag( lSubtype, 61440 ) // 0x0000F000
                        IF nRC = 0   // IF vDialog.Control.Subtype < 12000  ==> Domain Combobox

                           szWriteBuffer = "         strTag = ^" + szhFlag + szCtrlTag + "^ + strEntityKey;"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "         strValue = request.getParameter( strTag );"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           
                           szWriteBuffer = "         if ( strValue != null ) "
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "         { "
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      
                           // try
                           szWriteBuffer = "            try"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "            {"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           
                           IF szCtrlCtrlType = "Calendar"
                              szWriteBuffer = "               strDateFormat = request.getParameter( ^zDateFormat^ );"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "               vGridTmp" +
                                        ".cursor( ^" +
                                        vDialog.CtrlMapRelatedEntity.Name +
                                        "^ ).setAttribute( ^" + vDialog.CtrlMapER_Attribute.Name +
                                        "^, strValue, strDateFormat, 0 );"
                           ELSE
                              szWriteBuffer = "               vGridTmp" +
                                        ".cursor( ^" +
                                        vDialog.CtrlMapRelatedEntity.Name +
                                        "^ ).setAttribute( ^" + vDialog.CtrlMapER_Attribute.Name +
                                        "^, strValue, " +
                                        "^" + szContextName + "^ );"
                           END
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

      
                              
                           szWriteBuffer = "            }"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           // catch
                           szWriteBuffer = "            catch ( InvalidAttributeValueException e)"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "            {"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "               nMapError = -16;"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "               strError += ^" + szCtrlTag +
                                           "^ + ^\t^ + strValue + ^\t^ + e.getReason();"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                          
                           // Create an entity in the message queue object. kkk
                           szWriteBuffer = "            // Create an entity in the message queue object."
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "            vMsgQ = task.getViewByName( ^__MSGQ^);"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "            if ( vMsgQ != null )"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "            {"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "            vMsgQ.cursor(^WebMsg^).createEntity( CursorPosition.NEXT );"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "            vMsgQ.cursor(^WebMsg^).setAttribute( ^ControlTag^, ^" + szCtrlTag + "^ );"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "            vMsgQ.cursor(^WebMsg^).setAttribute( ^ErrorMsg^, strError );"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "            }"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                  
                           szWriteBuffer = "            }"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                           // end of try/catch
                                 
                           
                           szWriteBuffer = "         }"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                           // WL_QC( vDialog, lFile, "", "^", 0 )
                        ELSE

                           // Combobox with Auto Include or Set Position Only
                           // Note that this code is not executed if the view being
                           // passed is for the list mapping, instead of the edit
                           // mapping. Otherwise, the code would be generated twice,
                           // once when this routine is called for the edit view and
                           // once for the list view.
                           CreateViewFromView( vDialog2, vDialog )
                           SET CURSOR PREVIOUS vDialog2.CtrlMap
                           IF RESULT < zCURSOR_SET
                              // We were positioned on the first CtrlMap, which means we
                              // were being called for the edit view.
                              szWriteBuffer = "         // " + szControlType + ": " + szCtrlTag
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                              // Position on second CtrlMap, which is for list mapping Attribute.
                              SET CURSOR NEXT vDialog2.CtrlMap

                              // Position on third CtrlMap, which is for list mapping Entity.
                              // If it is null, the list mapping entity is from the prior CtrlMap.
                              CreateViewFromView( vDialog3, vDialog2 )
                              SET CURSOR NEXT vDialog3.CtrlMap
                              IF vDialog3.CtrlMapLOD_Entity EXISTS
                                 szListMappingEntityName = vDialog3.CtrlMapLOD_Entity.Name
                              ELSE
                                 szListMappingEntityName = vDialog2.CtrlMapRelatedEntity.Name
                              END

                              // Position on fourth CtrlMap, which is for scoping Entity.
                              SET CURSOR NEXT vDialog3.CtrlMap
                              IF vDialog3.CtrlMapLOD_Entity EXISTS
                                 szScopingEntityName = "^" + vDialog3.CtrlMapLOD_Entity.Name + "^"
                              ELSE
                                 szScopingEntityName = ""
                              END

                              DropView( vDialog3 )

                              IF vDialog2.CtrlMapView EXISTS
                                 szWriteBuffer = "         " + vDialog2.CtrlMapView.Name + " = " +
                                                 "task.getViewByName( ^" + vDialog2.CtrlMapView.Name + "^ );"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "         if ( " + vDialog2.CtrlMapView.Name + " == null )"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "         {"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                                 //szWriteBuffer = "      // " + vDialog2.CtrlMapView.Name +
                                 //                ".SetAllSelectStatesForEntity( ^" +
                                 //                vDialog2.CtrlMapRelatedEntity.Name +
                                 //                "^, (short) 0, ^" + szScopingEntityName + "^ );"
                                 //WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                                 szWriteBuffer = "            strTag = ^" + szhFlag + szCtrlTag + "^ + strEntityKey;"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "            strValue = request.getParameter( strTag );"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "            if ( strValue != null )"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "            {"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "               nRelPos = java.lang.Integer.parseInt( strValue );"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 IF vDialog.Control.Subtype >= 20480 AND vDialog.Control.Subtype <= 21252   // IF Auto Include
                                    // For Auto Include, we must decrement nRelPos for blank entry.
                                    szWriteBuffer = "                  nRelPos--;    // For Auto Include combos, we need to decrement for the blank entry."
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 END
                                 szWriteBuffer = "                  " + vDialog2.CtrlMapView.Name +
                                                 ".setPosition( ^" + szListMappingEntityName + "^, nRelPos, " + szScopingEntityName + " );"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "            }"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                                 IF vDialog.Control.Subtype >= 36864 AND vDialog.Control.Subtype <= 45056   // IF Set Foreign Key
                                    //Set Foreign Key
                                    szWriteBuffer = " "
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "            // Set Foreign Key Code "
                                    //Check the existence of the edit mapping entity
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "            nRC = vGridTmp" +
                                                    ".cursor( ^" +
                                                    vDialog.CtrlMapRelatedEntity.Name + "^ ).checkExistenceOfEntity();"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "            if ( nRC >= 0 )"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "            {"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                                    IF vDialog2.CtrlMapContext EXISTS
                                       szContextName = vDialog2.CtrlMapContext.Name
                                    ELSE
                                       szContextName = ""
                                    END

                                    IF vDialog2.CtrlMapER_Domain.MaxStringLth > 200
                                       lMaxStringLength = vDialog2.CtrlMapER_Domain.MaxStringLth
                                       szMaxStringLength = lMaxStringLength
                                    ELSE
                                       szMaxStringLength = "200"
                                    END

                                    szWriteBuffer = "               strValue = " + vDialog2.CtrlMapView.Name +
                                    ".cursor( ^" +
                                    vDialog2.CtrlMapRelatedEntity.Name + "^ ).getStringFromAttribute( ^" +
                                    vDialog2.CtrlMapER_Attribute.Name + "^, ^" + szContextName + "^ );"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )


                                    IF vDialog.CtrlMapContext EXISTS
                                       szContextName = vDialog.CtrlMapContext.Name
                                    ELSE
                                       szContextName = ""
                                    END
                                                   
                                    // try
                                    szWriteBuffer = "         try"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "         {"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                                    szWriteBuffer = "               vGridTmp" +
                                    ".cursor( ^" +
                                    vDialog.CtrlMapRelatedEntity.Name + "^ ).setAttribute( ^" +
                                    vDialog.CtrlMapER_Attribute.Name + "^, strValue, ^" + szContextName + "^ );"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    
                                       
                                    szWriteBuffer = "         }"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    // catch
                                    szWriteBuffer = "         catch ( InvalidAttributeValueException e)"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "         {"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "            nMapError = -16;"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "            strError += ^" + szCtrlTag +
                                                    "^ + ^\t^ + strValue + ^\t^ + e.getReason();"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                                   
                                    // Create an entity in the message queue object. kkk
                                    szWriteBuffer = "            // Create an entity in the message queue object."
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "            vMsgQ = task.getViewByName( ^__MSGQ^);"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "            if ( vMsgQ != null )"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "            {"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "            vMsgQ.cursor(^WebMsg^).createEntity( CursorPosition.NEXT );"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "            vMsgQ.cursor(^WebMsg^).setAttribute( ^ControlTag^, ^" + szCtrlTag + "^ );"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "            vMsgQ.cursor(^WebMsg^).setAttribute( ^ErrorMsg^, strError );"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "            }"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                  
                                    szWriteBuffer = "         }"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    // end of try/catch
                                    

                                    szWriteBuffer = "            }"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 END



                                 IF vDialog.Control.Subtype >= 20480 AND vDialog.Control.Subtype <= 21252   // IF Auto Include
                                    // Auto Include only.
                                    szWriteBuffer = " "
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "            // Auto Include Code "
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "            nRC = " + vDialog2.CtrlMapView.Name +
                                                    ".cursor( ^" +
                                                    vDialog.CtrlMapRelatedEntity.Name + "^ ).checkExistenceOfEntity();"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "            if ( nRC >= 0 )"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "            {"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    //KJS 12/11/07 - Adding code to check if we are already positioned on the correct
                                    //Entity, so then we would not want to exclude and include.  Seems like this is only
                                    //going to matter if this combo box is in a grid.
                                    szWriteBuffer = "               //Only do the automatic include if this is a different entity"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "               strTemp = vGridTmp.cursor( ^" +
                                                    vDialog.CtrlMapRelatedEntity.Name + "^ ).getStringFromAttribute( ^" + vDialog.CtrlMapER_Attribute.Name + "^ );"

                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                                    szWriteBuffer = "               if ( !strTemp.equals( " + vDialog2.CtrlMapView.Name +
                                                    ".cursor( ^" + vDialog2.CtrlMapRelatedEntity.Name + 
                                                    "^ ).getStringFromAttribute( ^" + vDialog2.CtrlMapER_Attribute.Name + "^ ))) "

                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "               {"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "                  vGridTmp" +
                                                    ".cursor( ^" +
                                                    vDialog.CtrlMapRelatedEntity.Name +
                                                    "^ ).exclude( CursorPosition.NONE );"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "                  vGridTmp" +
                                                    ".cursor( ^" +
                                                    vDialog.CtrlMapRelatedEntity.Name + "^).includeSubobject( " +
                                                    vDialog2.CtrlMapView.Name + ".cursor( ^" +
                                                    vDialog2.CtrlMapRelatedEntity.Name +
                                                    "^, CursorPostion.NEXT );"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "               }"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "            }"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 END

                                 szWriteBuffer = "         }"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                              ELSE  //IF vDialog2.CtrlMapView EXISTS
                                 MessageSend( vDialog, "", "XSL Generation",
                                              "Missing List Mapping.",
                                              zMSGQ_OBJECT_CONSTRAINT_WARNING, 0 )
                              END  //IF vDialog2.CtrlMapView EXISTS
                           END  //IF RESULT < zCURSOR_SET

                        END
                     END
                  END

                  IF szCtrlCtrlType = "GridEditBox"  OR
                     szCtrlCtrlType = "Calendar"

                     lSubtype = vDialog.Control.Subtype
                     lTemp = IsFlagSequenceSet( lSubtype, zCONTROL_DISABLED )
                     IF lTemp = 0
                        IF vDialog.CtrlMapContext EXISTS
                           szContextName = vDialog.CtrlMapContext.Name
                        ELSE
                           szContextName = ""
                        END

                        szWriteBuffer = "         strTag = ^" + szhFlag + szCtrlTag + "^ + strEntityKey;"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "         strValue = request.getParameter( strTag );"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                           
                        szWriteBuffer = "         if ( strValue != null ) "
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "         { "
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        
                        
                        // try
                        szWriteBuffer = "            try"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "            {"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        

                        IF szCtrlCtrlType = "Calendar"
                           szWriteBuffer = "               strDateFormat = request.getParameter( ^zDateFormat^ );"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "               vGridTmp" +
                                     ".cursor( ^" +
                                     vDialog.CtrlMapRelatedEntity.Name +
                                     "^ ).setAttribute( ^" + vDialog.CtrlMapER_Attribute.Name +
                                     "^, strValue, strDateFormat, 0 );"
                        ELSE
                           szWriteBuffer = "            vGridTmp" +
                                     ".cursor( ^" +
                                     vDialog.CtrlMapRelatedEntity.Name +
                                     "^ ).setAttribute( ^" + vDialog.CtrlMapER_Attribute.Name +
                                     "^, strValue, " +
                                     "^" + szContextName + "^ );"
                        END
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           
                        szWriteBuffer = "            }"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        // catch
                        szWriteBuffer = "            catch ( InvalidAttributeValueException e)"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "            {"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "               nMapError = -16;"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "               strError += ^" + szCtrlTag +
                                        "^ + ^\t^ + strValue + ^\t^ + e.getReason();"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                       
                        // Create an entity in the message queue object. kkk
                        szWriteBuffer = "            // Create an entity in the message queue object."
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "            vMsgQ = task.getViewByName( ^__MSGQ^);"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "            if ( vMsgQ != null )"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "            {"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "            vMsgQ.cursor(^WebMsg^).createEntity( CursorPosition.NEXT );"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "            vMsgQ.cursor(^WebMsg^).setAttribute( ^ControlTag^, ^" + szCtrlTag + "^ );"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "            vMsgQ.cursor(^WebMsg^).setAttribute( ^ErrorMsg^, strError );"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "            }"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                  
                        szWriteBuffer = "            }"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        // end of try/catch
   

                        szWriteBuffer = "         }"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                     // WL_QC( vDialog, lFile, "", "^", 0 )
                     END
                  END
                  END //IF vDialog.Control.Disabled != "Y"

                  IF bResetToPlaceHolder = 1
                     ResetViewFromSubobject( vDialog )
                  END
               END

               ResetViewFromSubobject( vDialog )

               IF lSubtypeX = 0
                  szWriteBuffer = "         nRC = " +
                                  "vGridTmp.cursor( ^" +
                                  vDialog.CtrlMapLOD_Entity.Name +
                                  "^).setNextContinue( " + szScopingEntityName + " );"
               ELSE
                  szWriteBuffer = "         nRC = " +
                                  "vGridTmp.SetCursorScopeOI( ^" +
                                  vDialog.CtrlMapLOD_Entity.Name + "^,  3 ); // next" // zPOS_NEXT
               END

               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      vGridTmp.drop();"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            END // IF szControlType = "Grid"
            END // IF szControlType = "Calendar"
            END // IF szControlType = "ListBox"
            END // IF szControlType = "ComboBox"
            END // IF szControlType = "EditBox" OR "CheckBox" OR "MLEdit" OR "RadioGrp"
         ELSE
            IF vDialog.CtrlCtrl EXISTS
               OrderEntityForView( vDialog, "CtrlCtrl", "PSDLG_Y A PSDLG_X A" )
               SetViewToSubobject( vDialog, "CtrlCtrl" )
               GenJSPJ_InputMapRecurs( vDialog, ViewName, lFile, szWriteBuffer, TableRowCnt )
               ResetViewFromSubobject( vDialog )
            END
         END
      END
   END
END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: GenJSPJ_OutputMapRecurs
//  
//  Comboboxes and listboxes need to do some mapping before the action
//  is called, so create separate javascript functions for actions that
//  are called from comboboxes or listboxes.
//
/////////////////////////////////////////////////////////////////////////////
GLOBAL OPERATION
GenJSPJ_OutputMapRecurs( VIEW vDialog BASED ON LOD TZWDLGSO,
                        INTEGER          lFile,
                        STRING ( 10000 ) szWriteBuffer,
                        STRING ( 255 )   szFormName )

   VIEW          vDialogParent
   STRING ( 50 ) szControlType
   STRING ( 50 ) szCtrlTag
   STRING ( 50 ) szActionName
   STRING ( 10 ) szSelectFunction
   STRING ( 10000 ) szJavaScript
   STRING ( 1 )  szCodeCreated
   SHORT         nGridParent
   INTEGER       lSubtype
   SHORT         nRC

   // "ONCHANGE" FUNCTION GENERATION FOR COMBOBOX CONTROLS

   // Identify if this Control is inside a Grid by setting nGridParent.
   // Note by DonC on 9/7/07: I don't see why the following code is necessary as we know the
   // combobox is in a Grid because its type is "GridComboCtl".
   /*nGridParent = 0
   nRC = 0
   CreateViewFromView( vDialogParent, vDialog )
   LOOP WHILE nGridParent = 0 AND nRC = 0
      nRC = ResetViewFromSubobject( vDialogParent )
      IF nRC = 0 AND vDialogParent.ControlDef EXISTS
         szControlType = vDialogParent.ControlDef.Tag
         IF szControlType = "Grid"
            nGridParent = 1
         END
      END
   END
   DropView( vDialogParent )*/

   // Note that Control.SubType is an integer composed of multiple values,
   // but is always less than 12,000 for Domain Combos.
   FOR EACH vDialog.Control
      szControlType = vDialog.ControlDef.Tag
      szCtrlTag = vDialog.Control.Tag

      // Set up Action data for combo boxes.
      IF vDialog.Event EXISTS
         IF vDialog.Event.Type = 1
            szSelectFunction = "OnChange"
         ELSE
            szSelectFunction = "OnBlur"
         END
      ELSE
         szSelectFunction = "OnChange"
      END

      // Process Combobox entries
      IF szControlType = "ComboBox" OR szControlType = "GridComboCtl"
         // The function statements for Combobox entries are primarily driven by:
         // 1. Whether the Combobox is Domain or select entity type.
         // 2. Whether there is an Action triggered by the combobox.
         // 3. Whether the Combobox is part of a Grid.

         //Is this combobox in a grid?  You'd think you could just tell by the name "GridComboCtl but
         //I can create a combobox outside the listbox and then move it into the grid and the type will
         //still be "ComboBox".
         nGridParent = 0
         nRC = 0
         CreateViewFromView( vDialogParent, vDialog )
         nRC = ResetViewFromSubobject( vDialogParent )
         IF nRC = 0 AND vDialogParent.ControlDef EXISTS
            szControlType = vDialogParent.ControlDef.Tag
            IF szControlType = "Grid"
               nGridParent = 1
            END
         END
         DropView( vDialogParent )

         //KJS 12/7/07 - We are going to add autoinclude and set foreign key comboboxes.
         //so we will need to change the below statements.

         // function statement
         lSubtype = vDialog.Control.Subtype
         nRC = AreBitsSetInFlag( lSubtype, 61440 ) // 0x0000F000
         IF nRC = 0   // IF vDialog.Control.Subtype < 12000  ==> Domain Combobox
            // Domain Combobox
            IF nGridParent = 0
               // Domain Combobox NOT in Grid.
               szWriteBuffer = "function " + szCtrlTag + szSelectFunction + "( )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            ELSE
               // Domain Combobox IN Grid.
               szWriteBuffer = "function " + szCtrlTag + szSelectFunction + "( hControl, Control )"
               szWriteBuffer = "function " + szCtrlTag + szSelectFunction + "( hControl, Control, strEntityKey )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            END
         ELSE
            // Select type Combobox
            IF nGridParent = 0
               // Select Combobox NOT in Grid.
               szWriteBuffer = "function " + szCtrlTag + szSelectFunction + "( )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            ELSE
               // Select Combobox IN Grid.
               szWriteBuffer = "function " + szCtrlTag + szSelectFunction + "( hControl, Control )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            END
         END

         szWriteBuffer = "{"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )


         szWriteBuffer = "      // This is for indicating whether the user hit the window close box."
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      isWindowClosing = false;"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

         // _IsDocDisabled code.
         szWriteBuffer = "   if ( _IsDocDisabled( ) == false )"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "   {"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )



         // If Action is SelectEnd, generate code to skip submit on tab.
         IF vDialog.EventAct EXISTS AND vDialog.Event.Type = 256
            szWriteBuffer = "   if (isChangedComboBox(document." + szFormName + "." + szCtrlTag + ") == false )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      return;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

         END

         // ACTION EXISTS
         lSubtype = vDialog.Control.Subtype
         nRC = AreBitsSetInFlag( lSubtype, 61440 ) // 0x0000F000
         IF nRC = 0   // IF vDialog.Control.Subtype < 12000  ==> Domain Combobox
            // Domain Combobox
            IF nGridParent = 0
               // Domain Combobox NOT in Grid.
               szWriteBuffer = "      document." + szFormName + ".h" + szCtrlTag + ".value = " +
                               "document." + szFormName + "." + szCtrlTag + ".value;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            ELSE
               // Domain Combobox IN Grid.
               szWriteBuffer = "      hControl.value = Control.value;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      document." + szFormName + ".zTableRowSelect.value = strEntityKey;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            END
         ELSE
            // Select type Combobox
            IF nGridParent = 0
               //NOT in Grid
               szWriteBuffer = "      document." + szFormName + ".h" + szCtrlTag + ".value = " +
                               "document." + szFormName + "." + szCtrlTag + ".selectedIndex;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            ELSE
               //IN Grid
               szWriteBuffer = "      hControl.value = Control.selectedIndex;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      document." + szFormName + ".zTableRowSelect.value = strEntityKey;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            END
         END

         // Action Processing
         IF vDialog.EventAct EXISTS
         
            // KJS 08/14/2009 - There may be times when we simply want to run the javascript code without submitting
            // this form.  The only problem is if this combobox is an auto include or a "set foreign key" then we have
            // to submit to allow this to happen.  If the combobox is not one of those and the action type is
            // zWAB_StayOnWindow and there is javascript code, then do not want to do the submit.

            szCodeCreated = "N"
            
            szJavaScript = vDialog.EventAct.WebJavaScript 
            
            IF (vDialog.Control.Subtype >= 20480 AND vDialog.Control.Subtype <= 21252)  OR
               (vDialog.Control.Subtype >= 36864 AND vDialog.Control.Subtype <= 45056)
               // "Auto include" or "set foreign key" combo box.  Do nothing.
            ELSE
               // Not an "auto include" or "set foreign key" combobox and there is javascript code for
               // the action.
               IF vDialog.EventAct.Type = zWAB_StayOnWindow AND szJavaScript != ""
                     // Create only the javascript code without the form submit.
                     
                  szCodeCreated = "Y"
                  szWriteBuffer = "      //Javascript code entered by user."
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                  szWriteBuffer = szJavaScript
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                  szWriteBuffer = "      //END of Javascript code entered by user."
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
               END
            END
            
            // The code for szWAB_StayOnWindow with Javascript code was not created so build this
            // the normal way with the action .submit.
            IF szCodeCreated = "N" 
               // Only generate the DisableFormElements statement if there is an Action tied to the combobox.
               szWriteBuffer = "      _DisableFormElements( true );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
      
               //KJS 11/16/2007 - We want to insert any javascript code that the
               //user has entered for this action.  This will be put before the action
               //generated code for submitting.  If the user wants to skip the
               //generated code, the inserted code should end with a return.
               IF  szJavaScript != ""
                  szWriteBuffer = "      //Javascript code entered by user."
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                  szWriteBuffer = szJavaScript
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                  szWriteBuffer = "      //END of Javascript code entered by user."
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
               END
      
               szActionName = vDialog.EventAct.Tag
               szWriteBuffer = "      document." + szFormName + ".zAction.value = ^" + szActionName + "^;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      document." + szFormName + ".submit( );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            END
         ELSE
            //There is no action but because this is an automatic include or a
            //set foreign key combobox, there should be an action and a submit.
            //We will call a generic one
            IF (vDialog.Control.Subtype >= 20480 AND vDialog.Control.Subtype <= 21252)  OR
               (vDialog.Control.Subtype >= 36864 AND vDialog.Control.Subtype <= 45056)
               
               szActionName = "ZEIDON_ComboBoxSubmit"
               szWriteBuffer = "      document." + szFormName + ".zAction.value = ^" + szActionName + "^;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      document." + szFormName + ".submit( );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            END
         END

         szWriteBuffer = "   }"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

         szWriteBuffer = "}"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

      ELSE
      IF szControlType = "ListBox"

         //szWriteBuffer = "function " + szCtrlTag + szSelectFunction + "( )"
         szWriteBuffer = "function " + szCtrlTag +  "OnClick( )"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "{"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

         // _IsDocDisabled code.
         szWriteBuffer = "   if ( _IsDocDisabled( ) == false )"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "   {"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

         szWriteBuffer = "      document." + szFormName + ".h" + szCtrlTag + ".value = " +
                         "document." + szFormName + "." + szCtrlTag + ".selectedIndex"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

         // Action Processing
         IF vDialog.EventAct EXISTS
         
            szJavaScript = vDialog.EventAct.WebJavaScript 
            
            IF vDialog.EventAct.Type = zWAB_StayOnWindow AND szJavaScript != ""
            
               szWriteBuffer = "      // Javascript code entered by user."
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
               szWriteBuffer = szJavaScript
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
               szWriteBuffer = "      // END of Javascript code entered by user."
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            ELSE
   
               // Only generate the DisableFormElements statement if there is an Action tied to the combobox.
               szWriteBuffer = "      _DisableFormElements( true );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
      
               szActionName = vDialog.EventAct.Tag
               szWriteBuffer = "      document." + szFormName + ".zAction.value = ^" + szActionName + "^;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      document." + szFormName + ".submit( );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            END
         END

         szWriteBuffer = "   }"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

         szWriteBuffer = "}"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )


      ELSE
         // This is not a combobox, so continue processing subobjects.
         IF vDialog.CtrlCtrl EXISTS

            SetViewToSubobject( vDialog, "CtrlCtrl" )
            GenJSPJ_OutputMapRecurs( vDialog, lFile, szWriteBuffer, szFormName )
            ResetViewFromSubobject( vDialog )

         END
      END  // End of checking if this is a listbox
      END  // End of checking if this is a combobox

   END // FOR EACH vDialog.Control
END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: GenJSPJ_Action
//
/////////////////////////////////////////////////////////////////////////////
GLOBAL OPERATION
GenJSPJ_Action( VIEW vDialog     BASED ON LOD TZWDLGSO,
               VIEW vDialogRoot BASED ON LOD TZWDLGSO,
               INTEGER          lFile,
               STRING ( 10000 ) szWriteBuffer,
               STRING ( 255 )   szFormName,
               STRING ( 34 )    szActionName,
               INTEGER          lTraceLevel )

   VIEW vDialogTemp BASED ON LOD TZWDLGSO
   VIEW vDialogCtrl BASED ON LOD TZWDLGSO
   STRING ( 32 )    szViewName
   STRING ( 32 )    szEntityName
   STRING ( 32 )    szContextName
   STRING ( 32 )    szCtrlTag
   STRING ( 32 )    szDownloadViewName
   STRING ( 32 )    szUploadViewName
   STRING ( 10 )    szMaxStringLength
   STRING ( 50 )    szPrivateKey
   STRING ( 50 )    szPublicKey
   STRING ( 1 )     InsertBlankFlag
   STRING ( 1 )     szCommentAdded
   STRING ( 1 )     szDialogClassCreated
   STRING ( 1 )     szUploadTransferFileFlag
   STRING ( 1 )     szPosDataCreated
   INTEGER          lControl
   INTEGER          lMaxStringLength
   SHORT            nViewNameLth
   SHORT            nGridParent
   SHORT            nRC

   InsertBlankFlag = "N"

   szWriteBuffer = "   while ( bDone == 0 && strActionToProcess.equals( ^" + szActionName + "^ ) )"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   {"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      bDone = 1;"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
   
   szDialogClassCreated = "N"
   
//**********************************

      // KJS 11/05/09
      // If we unregister zeidon at the end of building this window, then when the user clicks an action,
      // we need to call any Prebuild/Posbuild operations (that would build objects used on this page) before we
      // call the action selected.  
   IF vDialogRoot.Window.WEB_UnregisterZeidonWindow = "Y" 
      CreateViewFromViewForTask( vDialogTemp, vDialogRoot, 0 )
      szCommentAdded = "N"
      FOR EACH vDialogTemp.Action
         FOR EACH vDialogTemp.ActWndEvent
            IF vDialogTemp.ActWndEvent.Type = 1 OR
               vDialogTemp.ActWndEvent.Type = 2
   
               IF vDialogTemp.ActOper EXISTS

                  // Don't want to add this comment twice if there is an operation for both prebuild and posbuild.
                  IF szCommentAdded = "N" 
                     szWriteBuffer = "      // Prebuild/Posbuild Operations."
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "      // These are called because we Unregister Zeidon when this page is finished loading, so"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "      // these operations need to be called before any action code (for recreating objects etc)."
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szCommentAdded = "Y"
                  END

                  // In order to call a dialog operation we need to create an instance of the dialog class.  We
                  // only want to do this once.                                                       
                  IF szDialogClassCreated = "N"
                     szWriteBuffer = "      " +  vDialogTemp.Dialog.Tag + "_Dialog " + vDialogTemp.Dialog.Tag + " = new " + 
                                     vDialogTemp.Dialog.Tag + "_Dialog( task );"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     
                     szDialogClassCreated = "Y"
                  END 
                        
                  szWriteBuffer = "      nRC = " + vDialogTemp.Dialog.Tag + "." + vDialogTemp.ActOper.Name + "( new zVIEW ( vKZXMLPGO ) );"
                 
                  //szWriteBuffer = "      nOptRC = task.CallDialogOperation( ^" +
                  //                vDialogTemp.Dialog.Tag + "^, ^" +
                  //                vDialogTemp.ActOper.Name + "^, 1 );"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "      if ( nOptRC == 2 )"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "      {"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "         nRC = 2;  // do the ^error^ redirection"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "         break;"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "      }"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                
              END
               
            END
         END
      END
      DropView ( vDialogTemp )
   
   END

         
//***********************************   
   

   // Keep position on the Control that triggers the Action, if it exists.
   CreateViewFromView( vDialogCtrl, vDialog )
   NAME VIEW vDialogCtrl "vDialogCtrl"
   lControl = zQUAL_STRING + zPOS_FIRST + zRECURS
   nRC = SetEntityCursor( vDialogCtrl, "EventAct", "Tag", lControl, szActionName, "", "", 0, "Window", "" )
   IF nRC < zCURSOR_SET
      DropView( vDialogCtrl )
      vDialogCtrl = 0
   END

   IF vDialog.Action.Type = zWAB_StartBrowserHTML_Page
      szWriteBuffer = "      strURL = task.MakeWebFileName( strSessionId, 0 ) + ^.html^;"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

      szWriteBuffer = "      task.dropName( strURL );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
   ELSE
      IF vDialog.Action.Type = zWAB_ProcessDownloadFile
         // Download File constants
         szWriteBuffer = "      String sDownloadFile = null;"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      String sSourceFileNameOnly = null;"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      String sExtension = null;"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      int l;"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      int x;"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

         // Download File mapping view: Mapping must be specified for download processing.
         IF vDialogCtrl = 0
            MessageSend( vDialog, "", "Download File Generation",
                                     "The Control with 'Download File' action could not be located.",
                                     zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
         ELSE
            IF vDialogCtrl.CtrlMapER_Attribute DOES NOT EXIST
               MessageSend( vDialog, "", "Download File Generation",
                                        "The Control with 'Download File' action must specify mapping for the source file name.",
                                        zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
            ELSE
               szDownloadViewName = vDialogCtrl.CtrlMapView.Name
               szWriteBuffer = "      View " + szDownloadViewName + ";"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            END
         END
      END
   END

   // We need to determine if this Action is on a Group for File Transfer to Server, because we will not
   // generate the call to DoInputMapping in that case.
   szUploadTransferFileFlag = ""
   IF vDialogCtrl > 0
      CreateViewFromView( vDialogTemp, vDialogCtrl )
      ResetViewFromSubobject( vDialogTemp )
      SET CURSOR FIRST vDialogTemp.WebControlProperty WHERE vDialogTemp.WebControlProperty.Name = "File Transfer to Server"
      IF RESULT >= zCURSOR_SET
         szUploadTransferFileFlag = "Y"
      END
      DropView( vDialogTemp )
   END


   // If this Action is for an Upload to Server File Transfer, we won't do normal input mapping, but we will map in the full target file name so
   // that we can process it, since we may not know the suffix from the source or even the file name from the source.
   IF szUploadTransferFileFlag = "Y"

      //If there is mapping on the edit ("file") control, we want to put the
      //filename that is being uploaded into that mapping.

      CreateViewFromView( vDialogTemp, vDialogCtrl )
      //I wanted to do the "SET CURSOR..." but because Control doesn't really have a parent
      //the c code that gets generated is only looking for ControlDef under Control (not all controls) and so
      //it is not finding it.
      //SET CURSOR FIRST vDialogTemp.Control WHERE vDialogTemp.ControlDef.Tag = "EditBox"
      FOR EACH vDialogTemp.Control

         IF vDialogTemp.ControlDef.Tag = "EditBox"
                                        //256
           //Get the mapping
            SET CURSOR FIRST vDialogTemp.CtrlMapLOD_Attribute WITHIN vDialogTemp.Control
            IF RESULT >= zCURSOR_SET
               szUploadViewName = vDialogTemp.CtrlMapView.Name
               szWriteBuffer = "      View " + szUploadViewName + ";"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
               szWriteBuffer = "      " + vDialogTemp.CtrlMapView.Name + " = " +
                               "task.getViewByName( ^" + vDialogTemp.CtrlMapView.Name + "^ );"
               WL_QC( vDialogTemp, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      if ( " + vDialogTemp.CtrlMapView.Name + " == null )"
               WL_QC( vDialogTemp, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         " + vDialogTemp.CtrlMapView.Name +
                        ".log().debug( ^Invalid View: ^, ^" + szCtrlTag + "^ );"
               WL_QC( vDialogTemp, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      else"
               WL_QC( vDialogTemp, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      {"
               WL_QC( vDialogTemp, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         nRC = " + vDialogTemp.CtrlMapView.Name + ".cursor( ^" +
                               vDialogTemp.CtrlMapRelatedEntity.Name + "^ ).checkExistenceOfEntity();"
               WL_QC( vDialogTemp, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         if ( nRC >= 0 )"
               WL_QC( vDialogTemp, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         {"
               WL_QC( vDialogTemp, lFile, szWriteBuffer, "^", 0 )
               
         
               // try
               szWriteBuffer = "         try"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               
               szWriteBuffer = "            " +
                      vDialogTemp.CtrlMapView.Name +
                      ".cursor(^," + vDialogTemp.CtrlMapRelatedEntity.Name + "^).setAttribute( ^" +
                      "^, ^" +
                      vDialogTemp.CtrlMapER_Attribute.Name + "^, strInputFileName );"
               WL_QC( vDialogTemp, lFile, szWriteBuffer, "^", 0 )
                  
               szWriteBuffer = "         }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               // catch
               szWriteBuffer = "         catch ( InvalidAttributeValueException e)"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "            nMapError = -16;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "            strError += ^" + szCtrlTag +
                               "^ + ^\t^ + strValue + ^\t^ + e.getReason();"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
              
               // Create an entity in the message queue object. kkk
               szWriteBuffer = "            // Create an entity in the message queue object."
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "            vMsgQ = task.getViewByName( ^__MSGQ^);"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "            if ( vMsgQ != null )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "            {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "            vMsgQ.cursor(^WebMsg^).createEntity( CursorPosition.NEXT );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "            vMsgQ.cursor(^WebMsg^).setAttribute( ^ControlTag^, ^" + szCtrlTag + "^ );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "            vMsgQ.cursor(^WebMsg^).setAttribute( ^ErrorMsg^, strError );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "            }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                  
               szWriteBuffer = "         }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
               // end of try/catch
               
               szWriteBuffer = "         }"
               WL_QC( vDialogTemp, lFile, szWriteBuffer, "^", 0 )
               
               
               szWriteBuffer = "      }"
               WL_QC( vDialogTemp, lFile, szWriteBuffer, "^", 0 )

            END
         END
      END
      DropView( vDialogTemp )


   ELSE
      // Input Mapping Option
      IF vDialog.Action.NoMap != "Y"
         szWriteBuffer = "      // Input Mapping"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      nRC = DoInputMapping( request, session, application );"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      if ( nRC < 0 )"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         break;"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
      END
   END
   
   // Check if this is an action for reCAPTCHA.  If so, add the code...
   IF vDialog.Action.Type = 35 OR vDialog.Action.Type = 55
      // We need to get the control for this action so we can retrieve the private and public keys.
      CreateViewFromView( vDialogTemp, vDialog )
      lControl = zQUAL_STRING + zPOS_FIRST + zRECURS
      szCtrlTag = "reCAPTCHA"
      IF SetEntityCursor( vDialogTemp, "WebControlProperty", "Name", lControl,
                          szCtrlTag, "", "", 0, "Window", "" ) >= zCURSOR_SET 
         szPublicKey = vDialogTemp.Control.WebreCAPTCHAPublicKey
         szPrivateKey = vDialogTemp.Control.WebreCAPTCHAPrivateKey
   
      END
      DropView( vDialogTemp )
      
      // create recaptcha without <noscript> tags
      szWriteBuffer = "      ReCaptcha captcha = ReCaptchaFactory.newReCaptcha(^" + szPublicKey + "^, ^" + szPrivateKey + "^, false);"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      ReCaptchaResponse response2 = captcha.checkAnswer(request.getRemoteAddr(), request.getParameter(^recaptcha_challenge_field^), request.getParameter(^recaptcha_response_field^));"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = ""
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      if (response2.isValid())"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      {"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         task.log().debug(^reCAPTCHA Success^, ^^);"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      }"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      else"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      {"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         // The user has not entered in the correct response, do not go further."
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         strErrorTitle = ^INCORRECT RECAPTCHA^;"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         strErrorMsg = ^You typed the reCaptcha image incorrectly.  Please try again.^;"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         // No redirection, we are staying on this page."
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         nRC = 0;"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         break;"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      }"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
   END
  

   //KJS 11/15/07 - If there is a button or hottext on a grid, then we should position on the correct
   //entity whether or not there is an operation.

   //We don't want to create the code to position on the correct
   //list entity twice.  So keep track...
   szPosDataCreated = "N"

   //Loop through each ActCtrl to see if there is a button or hot text
   //on a grid that calls this action.  If so, then we need to
   //get position on the correct item in the list.  This is the
   //code to set position.  If there is more than one button/hottext
   //in this list that calls the same action, make sure we don't
   //create this code twice.
   FOR EACH vDialog.ActCtrl WITHIN vDialog.Action

      szCtrlTag = vDialog.ActCtrl.Tag
      CreateViewFromViewForTask( vDialogTemp, vDialogRoot, 0 )
      NAME VIEW vDialogTemp "vDialogTemp"

      lControl = zQUAL_STRING + zPOS_FIRST + zRECURS
      IF SetEntityCursor( vDialogTemp, "Control", "Tag", lControl,
                          szCtrlTag, "", "", 0,
                          "Window", "" ) >= zCURSOR_SET AND
         (vDialogTemp.ControlDef.Tag = "PushBtn" OR vDialogTemp.ControlDef.Tag = "GridEditCtl" OR
          vDialogTemp.ControlDef.Tag = "Bitmap" OR vDialogTemp.ControlDef.Tag = "BitmapBtn" OR
          vDialogTemp.ControlDef.Tag = "ComboBox" OR vDialogTemp.ControlDef.Tag = "GridComboCtl" )
          //032609
         //vDialogTemp.ControlDef.Key = 1020

         // Identify if this Control is inside a Grid.
         nRC = 0
         nGridParent = 0
         LOOP WHILE nRC = 0 AND nGridParent = 0
            nRC = ResetViewFromSubobject( vDialogTemp )
            IF nRC = 0 AND vDialogTemp.ControlDef EXISTS
               IF vDialogTemp.ControlDef.Tag = "Grid"
               // vDialogTemp.ControlDef.Key = 2010
                  // The parent of the this control is a Grid, so indicate for later.
                  nGridParent = 1
               END
            END
         END

         //If we successfully reset from the subcontrols and we are on a grid.
         IF nGridParent = 1

            IF vDialogTemp.CtrlMapView EXISTS AND
               vDialogTemp.CtrlMapLOD_Entity EXISTS AND szPosDataCreated = "N"

               szPosDataCreated = "Y"


               szWriteBuffer = "      // Position on the entity that was selected in the grid."
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )


               // We have a "select button" or HotText in a list, so we need to set
               // up the code to set position on the proper list item.
               szViewName = vDialogTemp.CtrlMapView.Name
               szEntityName = vDialogTemp.CtrlMapLOD_Entity.Name
               szWriteBuffer = "      String strEntityKey = (String) request.getParameter( ^zTableRowSelect^ );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               //If this action is for the download button or for the upload button, we may have already created
               //a view for this view name.  Don't create the view unless it's for a different view name.
               IF  ( szViewName != szDownloadViewName AND szViewName != szUploadViewName )
                  szWriteBuffer = "      View " + szViewName + ";"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               END

               szWriteBuffer = "      " + szViewName + " = " + "task.getViewByName( ^" + szViewName + "^ );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               szWriteBuffer = "      if ( " + szViewName + " == null )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               //KJS Trace
               IF (lTraceLevel = 1)
                  szWriteBuffer = "         task.log().debug( ^Got " + szViewName + " View Key: ^, strEntityKey );"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               END
               szWriteBuffer = "         nRC = " + szViewName + ".SetCursorEntityKey( ^" + szEntityName + "^, strEntityKey );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               szWriteBuffer = "         if ( nRC < 0 )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         // This is temp code because SetCursorEntityKey doesn't work on subobjects."
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "            nRCk = " + szViewName + ".cursor( ^" + szEntityName + "^ ).setFirst();"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "            while ( nRCk >= 0 )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "            {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "               lEKey = " + szViewName + ".cursor( ^" + szEntityName + "^ ).getEntityKey();"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "               strKey = Integer.toString( lEKey );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "               if ( strKey.equals( strEntityKey ) )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "               {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "                  // Stop while loop because we have positioned on the correct entity."
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "                  nRCk = -1;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "               }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "               else"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "                  nRCk = " + szViewName + ".cursor( ^" + szEntityName + "^ ).setNextContinue();"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "            }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )


               szWriteBuffer = "      }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
               //KJS Trace
               IF (lTraceLevel = 1)
                  szWriteBuffer = "      else"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "         task.log().debug( ^Did not get " + szViewName + " View Key: ^, strEntityKey );"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
               END
            END
         END
      END

      DropView( vDialogTemp )

   END  //FOR EACH vDialog.ActCtrl WITHIN vDialog.Action



   // Operation Option
   IF vDialog.ActOper EXISTS

      szWriteBuffer = "      // Action Operation"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )


      //FOR EACH Dialog.ActCtrl.Tag code from about was here.


      szWriteBuffer = "      nRC = 0;"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

      //KJS Trace
      IF (lTraceLevel = 1)
         szWriteBuffer = "      task.log().debug( ^CallDialogOperation: " + vDialog.Dialog.Tag + "." + vDialog.ActOper.Name + "  ^, ^^ );"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      END

      // In order to call a dialog operation we need to create an instance of the dialog class.  We
      // only want to do this once.                                           
      IF szDialogClassCreated = "N"
      
         szWriteBuffer = "      " +  vDialog.Dialog.Tag + "_Dialog " + vDialog.Dialog.Tag + " = new " + 
                         vDialog.Dialog.Tag + "_Dialog( task );"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         
         szDialogClassCreated = "Y"
      END 
      
      szWriteBuffer = "      nRC = " + vDialog.Dialog.Tag + "." + vDialog.ActOper.Name + "( new zVIEW ( vKZXMLPGO ) );"

      //szWriteBuffer = "      nOptRC = vAppSubtask.CallDialogOperation( ^" +
      //                vDialog.Dialog.Tag + "^, ^" +
      //                vDialog.ActOper.Name + "^, 0 );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      if ( nOptRC == 2 )"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      {"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         nRC = 2;  // do the ^error^ redirection"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         break;"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      }"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
      
      IF  vDialog.Action.Type = zWAB_StartBrowserPDF_Page 
         // If we are copying to pdf, then we need to have a wait routine, otherwise, the jsp tries to open
         // the pdf file before it's actually created.
         szWriteBuffer = "      try{ "
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         Thread.sleep(5000); "
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      }catch(InterruptedException ie){ "
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         out.println(^error^); "
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      } "
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
      END


      // I know that if we are starting a pdf or html window then we do not need to do this.
      // There are probably more like Popup windows...
      IF  vDialog.Action.Type != zWAB_StartBrowserHTML_Page AND vDialog.Action.Type != zWAB_StartBrowserPDF_Page
      
         // Handle any Next Window processing from Operation.
         szWriteBuffer = "      // Dynamic Next Window"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      nRC = vKZXMLPGO.cursor( ^NextDialogWindow^ ).checkExistenceOfEntity();"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      if ( nRC >= 0 )"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      {"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         strDialogName = vKZXMLPGO.cursor( ^NextDialogWindow^ ).getStringFromAttribute( ^DialogName^ );"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         strWindowName = vKZXMLPGO.cursor( ^NextDialogWindow^ ).getStringFromAttribute( ^WindowName^ );"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         strNextJSP_Name = strDialogName + strWindowName + ^.jsp^;"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         vKZXMLPGO.cursor( ^NextDialogWindow^ ).deleteEntity( CursorPosition.NEXT );"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         strURL = response.encodeRedirectURL( strNextJSP_Name );"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   
         //KJS Trace
         IF (lTraceLevel = 1)
            szWriteBuffer = "         task.log().debug( ^Next Window Redirect to: ^, strURL );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         END
   
         // Handle creation of return page for Function Call StartSubwindow.
         szWriteBuffer = "         nRC = vKZXMLPGO.cursor( ^NextDialogWindow^ ).checkExistenceOfEntity();"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         if ( nRC >= 0 )"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "            strFunctionCall = vKZXMLPGO.cursor( ^NextDialogWindow^ ).getStringFromAttribute( ^FunctionCall^ );"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         else"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "            strFunctionCall = ^^;"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
   
         szWriteBuffer = "         if ( strFunctionCall != null && strFunctionCall.equals( ^StartSubwindow^ ) )"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         {"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "            vKZXMLPGO.cursor( ^PagePath^).createEntity( CursorPosition.NEXT );"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "            vKZXMLPGO.cursor( ^PagePath^ ).setAttribute( ^LastPageName^, ^" +
                         szFormName + "^ );"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         }"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
   
         szWriteBuffer = "         nRC = 1;  // do the redirection"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         break;"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      }"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
      END

   END  //End of calling an operation
   
   IF vDialog.Action.Type = zWAB_StartBrowserHTML_Page  
         szWriteBuffer = "      task.setName( strURL );"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         // KJS 03/05/08 - This was "nRC = 2 //do the error redirection" and I'm not sure why.
         // That resubmitted the current page and I assume this was done thinking this was how
         // the report page would be called but since the report popup is determined in AfterPageLoaded, we
         // don't need to resubmit the page.  Just keep building this current page.
         szWriteBuffer = "      nRC = 0;  // Don't need to redirect for popup window"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   END
   
   IF vDialog.Action.Type = zWAB_StartBrowserPDF_Page  
         // KJS 03/05/08 - This was "nRC = 2 //do the error redirection" and I'm not sure why.
         // That resubmitted the current page and I assume this was done thinking this was how
         // the report page would be called but since the report popup is determined in AfterPageLoaded, we
         // don't need to resubmit the page.  Just keep building this current page.
         szWriteBuffer = "      nRC = 0;  // Don't need to redirect for popup window"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   END


   // Next Window Option
   IF vDialog.Action.Type = zWAB_StartModelessSubwindow          OR
      vDialog.Action.Type = zWAB_StartModalSubwindow             OR
      vDialog.Action.Type = zWAB_ReplaceWindowWithModelessWindow OR
      vDialog.Action.Type = zWAB_ReplaceWindowWithModalWindow    OR   
      vDialog.Action.Type = 35                                   OR  //reCAPTCHA StartModalSubwindow
      vDialog.Action.Type = 55  //reCAPTCHA ReplaceModalWindow  
      IF InsertBlankFlag = "Y"
         szWriteBuffer = ""
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         InsertBlankFlag = "N"
      END

      szWriteBuffer = "      // Next Window"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      
      IF vDialog.Action.Type = zWAB_StartBrowserHTML_Page
         szWriteBuffer = "      task.setName( strURL );"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      strURL = response.encodeRedirectURL( strURL );"
      ELSE
         szWriteBuffer = "      strURL = response.encodeRedirectURL( ^" +
                         vDialog.Action.DialogName + vDialog.Action.WindowName + ".jsp^ );"
      END
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

      //KJS Trace
      IF (lTraceLevel = 1)
         szWriteBuffer = "      task.log().debug( ^Next Window Redirect to: ^, strURL );"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      END

      IF vDialog.Action.Type = zWAB_StartModelessSubwindow OR
         vDialog.Action.Type = zWAB_StartModalSubwindow    OR
         vDialog.Action.Type = 35 //reCAPTCHA StartModalSubwindow
         // Next Window is subwindow. Set up current window for return.
         szWriteBuffer = "      vKZXMLPGO.cursor( ^PagePath^ ).createEntity( CursorPosition.NEXT );"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      vKZXMLPGO.cursor( ^PagePath^ ).setAttribute( ^LastPageName^, ^" +
                         szFormName + "^ );"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      END

      IF vDialog.Action.Type = zWAB_StartBrowserHTML_Page
         // KJS 03/05/08 - This was "nRC = 2 //do the error redirection" and I'm not sure why.
         // That resubmitted the current page and I assume this was done thinking this was how
         // the report page would be called but since the report popup is determined in AfterPageLoaded, we
         // don't need to resubmit the page.  Just keep building this current page.
         szWriteBuffer = "      nRC = 0;  // Don't need to redirect for popup window"
      ELSE
         szWriteBuffer = "      nRC = 1;  // do the redirection"
      END
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   END  //End of Next Window Option

   // This Action is Startup Web Popup WITH mapping, so set zOpenPopupWindow to the next page jsp.
   IF ( vDialog.Action.Type = zWAB_StartModalWebPopup OR vDialog.Action.Type = zWAB_StartModelessWebPopup ) AND vDialog.Action.NoMap = ""
      //This gets the value for the popup window so that in AfterPageLoaded, we can get this
      //value and pop up the window.
      szWriteBuffer = "      strOpenPopupWindow = request.getParameter( ^zOpenPopupWindow^ );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      strPopupWindowSZX = request.getParameter( ^zPopupWindowSZX^ );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      strPopupWindowSZY = request.getParameter( ^zPopupWindowSZY^ );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      nRC = 0;  // No redirection, we want to open the popup"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   END

   // Same Window Refresh option
   IF vDialog.Action.Type = zWAB_StayOnWindowWithRefresh
      szWriteBuffer = "      // Stay on Window with Refresh"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      strURL = response.encodeRedirectURL( ^" + vDialogRoot.Dialog.Tag + vDialogRoot.Window.Tag + ".jsp^ );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      nRC = 1;  // do the redirection"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   END

   // Return From Window Option
   IF vDialog.Action.Type = zWAB_ReturnToParent OR
      vDialog.Action.Type = zWAB_ReturnToParentWithRefresh

      IF InsertBlankFlag = "Y"
         szWriteBuffer = ""
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      END

      szWriteBuffer = "      // Return to Last Window"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      nRC = vKZXMLPGO.cursor( ^PagePath^ ).checkExistenceOfEntity();"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      if ( nRC >= 0 )"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      {"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         strLastPage = vKZXMLPGO.cursor( ^PagePath^ ).getStringFromAttribute( ^LastPageName^ );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         vKZXMLPGO.cursor( ^PagePath^ ).deleteEntity( CursorPosition.PREV );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         strLastPage = strLastPage + ^.jsp^;"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      }"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      else"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         strLastPage = ^" + szFormName + ".jsp^;"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

      szWriteBuffer = "      strURL = response.encodeRedirectURL( strLastPage );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

      //KJS Trace
      IF (lTraceLevel = 1)
         szWriteBuffer = "      task.log().debug( ^Return Redirect to: ^, strURL );"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      END
   // szWriteBuffer = "      return;"
      szWriteBuffer = "      nRC = 1;  // do the redirection"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   END

   // Download File option.
   IF vDialog.Action.Type = zWAB_ProcessDownloadFile

      // Note that we need vDialogCtrl to be positioned on Control that triggers the Action to get the attribute mapping from that Control.
      // This was evaluated earlier.

      IF vDialogCtrl > 0
         IF vDialogCtrl.CtrlMapER_Attribute EXISTS

            szWriteBuffer = "  "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      // Download File Processing"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            /*
            szWriteBuffer = "      sBrowser = request.getHeader(^User-Agent^);"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      boolean isFirefox = ( sBrowser != null && sBrowser.indexOf( ^Firefox/^ ) != -1 );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      boolean isMSIE = ( sBrowser != null && sBrowser.indexOf( ^MSIE^ ) != -1 );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      boolean isOpera = ( sBrowser != null && sBrowser.indexOf( ^Opera^ ) != -1 );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            */

            szWriteBuffer = "      " + vDialogCtrl.CtrlMapView.Name + " = " + "task.getViewByName( ^" + vDialogCtrl.CtrlMapView.Name + "^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      if ( " + vDialogCtrl.CtrlMapView.Name + " == null )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         nRC = " + vDialogCtrl.CtrlMapView.Name + ".cursor( ^" +
                                                vDialogCtrl.CtrlMapRelatedEntity.Name + "^ ).checkExistenceOfEntity();"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         if ( nRC >= 0 )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            IF vDialogCtrl.CtrlMapER_Domain.MaxStringLth > 200
               lMaxStringLength = vDialogCtrl.CtrlMapER_Domain.MaxStringLth
               szMaxStringLength = lMaxStringLength
            ELSE
               szMaxStringLength = "200"
            END

            szWriteBuffer = "            sDownloadFile = " + vDialogCtrl.CtrlMapView.Name + ".cursor( ^" + vDialogCtrl.CtrlMapRelatedEntity.Name + 
                            "^ ).getStringFromAttribute( ^" + vDialogCtrl.CtrlMapER_Attribute.Name + "^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            //KJS Trace
            IF (lTraceLevel = 1)
               szWriteBuffer = "            " + vDialogCtrl.CtrlMapView.Name + ".log().debug( ^Download File Name: ^, sDownloadFile );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            END

            szWriteBuffer = "         }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            //KJS Trace
            IF (lTraceLevel = 1)
               szWriteBuffer = "         else"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "            " + vDialogCtrl.CtrlMapView.Name + ".log().debug( ^Entity does not exist: ^, ^" +
                                                vDialogCtrl.CtrlMapView.Name + "." +
                                                vDialogCtrl.CtrlMapRelatedEntity.Name + "^ );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            END

            szWriteBuffer = "      }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            //KJS Trace
            IF (lTraceLevel = 1)
               szWriteBuffer = "      else"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         " + vDialogCtrl.CtrlMapView.Name + ".log().debug( ^Invalid View: ^, ^" + vDialogCtrl.CtrlMapView.Name + "^ );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            END

            szWriteBuffer = "         // Replace any quotes."
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            szWriteBuffer = "         sDownloadFile = sDownloadFile.replaceAll(^\^^,^^);"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            szWriteBuffer = "         l = sDownloadFile.lastIndexOf(^.^);"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         x = sDownloadFile.lastIndexOf(^\\^);"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            szWriteBuffer = "         // If x > l then the filename has no extension and"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         // there must be a period in the directory name."
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         // Right now we are not using sExtension but just"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         // in case we want to change the encType I want"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         // to capture this."
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         if (x > l)"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            sExtension = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         else"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            sExtension = sDownloadFile.substring(l+1);"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         // Get the filename only without directories."
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         sSourceFileNameOnly = sDownloadFile.substring(x + 1);"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            szWriteBuffer = "         File InputFile = new File(sDownloadFile);"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         FileInputStream fis = new FileInputStream(InputFile); "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         try"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            //KJS Trace
            IF (lTraceLevel = 1)
               szWriteBuffer = "            task.log().debug( ^Download File: ^, ^Setting outputStream and attaching file^ );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            END

            szWriteBuffer = "            String contenttype = ^application/octet-stream^;  "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            response.setContentType(contenttype);"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            response.setHeader(^Content-Disposition^, ^attachment; filename=^ + sSourceFileNameOnly + ^;^);"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            ServletOutputStream outStream = response.getOutputStream();"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            int c = 0;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            while ((c=fis.read())!=-1)"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               outStream.write(c); "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            } "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            outStream.flush(); "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            outStream.close();"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         catch (Exception e) "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         { "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            if (InputFile!=null && InputFile.exists()) "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            { "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               //TraceLine"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               task.log().debug( ^Error downloading file: ^, sDownloadFile );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            } "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            szWriteBuffer = "            fis.close();"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            // The end of the Action is the same as "Same Window Refresh" above.
            szWriteBuffer = "         // Stay on Window with Refresh"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         strURL = response.encodeRedirectURL( ^" + vDialogRoot.Dialog.Tag + vDialogRoot.Window.Tag + ".jsp^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         nRC = 1;  // do the redirection"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            //szWriteBuffer = "      } "
            //WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
         END
      END
   END // Download File option.

   szWriteBuffer = "      break;"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   }"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
   IF vDialogCtrl > 0
      DropView( vDialogCtrl )
   END

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: GenJSPJ_CrteJPG
//
/////////////////////////////////////////////////////////////////////////////
GLOBAL OPERATION
GenJSPJ_CrteJPG( VIEW vDialog BASED ON LOD TZWDLGSO,
                INTEGER          lFile,
                STRING ( 10000 ) szWriteBuffer,
                STRING ( 50 )    szIndent,
                STRING ( 32 )    szCtrlTag,
                STRING ( 1 )     szNoPositioning,
                INTEGER          lOffsetX,
                INTEGER          lOffsetY )

   // Format a BITMAP or JPG control.

   STRING ( 32 )  szContextName
   STRING ( 256 ) szClass
   STRING ( 256 ) szStyle
   STRING ( 16 )  szTabIndex
   STRING ( 256 ) szTitle
   STRING ( 256 ) szTitleHTML
   STRING ( 256 ) szText
   STRING ( 32 )  szActionName
   INTEGER        nRC

   CreateTabIndexString( vDialog, szTabIndex )
   
   // If this window is being generated with no positioning then
   // do not create the position in the style.
   IF  szNoPositioning = "Y"
      CreateNoPosStyleString( vDialog, szStyle, "" )
   ELSE 
      CreateAbsolStyleString( vDialog, szStyle, lOffsetX, lOffsetY, "" )
   END
   
   //CreateAbsolStyleString( vDialog, szStyle, lOffsetX, lOffsetY, "" )
   szStyle = szStyle + szTabIndex

   szActionName = ""
   IF vDialog.EventAct EXISTS
      szActionName = vDialog.EventAct.Tag
      nRC = zstrcmpi( szActionName, "alt-f4" )
      IF nRC = 0
         szActionName = "AltF4"
      END
   END
   
   szClass = ""
   IF vDialog.Control.CSS_Class != ""
      szClass = " class=^" + vDialog.Control.CSS_Class + "^ "
   END
   

   //If we put a title on the control, when the mouse is hovered over the control, this text will display.
   szTitleHTML = ""
   szTitle = vDialog.Control.DIL_Text
   IF szTitle != ""
      szTitleHTML = " title=^" + szTitle + "^ "
   END
   szText = ""
   IF  vDialog.Control.Text != ""
      szText = " alt=^" + vDialog.Control.Text + "^ "
   END

   //There might be mapping for this control which means we should get the
   //image from the mapping, or there might be an image file name, so we wouldn't
   //use the mapping.
   SET CURSOR FIRST vDialog.CtrlMapLOD_Attribute WITHIN vDialog.Control
   IF RESULT >= zCURSOR_SET

      szWriteBuffer = "<% strErrorMapValue = ^^;"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

      szWriteBuffer = "   " + vDialog.CtrlMapView.Name + " = " +
                      "task.getViewByName( ^" + vDialog.CtrlMapView.Name + "^ );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   if ( " + vDialog.CtrlMapView.Name + " == null )"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      " + vDialog.CtrlMapView.Name +
               ".log().debug( ^Invalid View: ^, ^" + szCtrlTag + "^ );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   else"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   {"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      nRC = " + vDialog.CtrlMapView.Name + ".cursor( ^" +
                      vDialog.CtrlMapRelatedEntity.Name + "^ ).checkExistenceOfEntity();"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      if ( nRC >= 0 )"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         strErrorMapValue = " +
                      vDialog.CtrlMapView.Name +
                      ".cursor( ^" +
                      vDialog.CtrlMapRelatedEntity.Name + "^ ).getStringFromAttribute( ^" +
                      vDialog.CtrlMapER_Attribute.Name + "^, ^" +
                      szContextName + "^ );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   }"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "%>"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
      IF  szActionName = ""
         szWriteBuffer = "<img src=^<%=strErrorMapValue%>^ " + szStyle + szTitleHTML + szClass + szText + ">"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
      ELSE
         szWriteBuffer = "<img src=^<%=strErrorMapValue%>^ onclick=^" + szActionName + "()^ " + szStyle + szTitleHTML + szClass + szText + ">"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
      END
   ELSE
      //Not getting image from mapping, a file name has been specified.
      IF vDialog.Control.WebFileName != ""
         IF szActionName = ""
            //szWriteBuffer = "<a href=^#^ name=^" + szCtrlTag + "^ id=^" + szCtrlTag + "^ ><img src=^" +
            //   vDialog.Control.WebFileName + "^ " + szStyle + szTitleHTML + "></a>"
            szWriteBuffer = "<img src=^" + vDialog.Control.WebFileName + "^  name=^" + szCtrlTag + "^ id=^" + szCtrlTag + "^ " +
                              szStyle + szTitleHTML + szClass + szText + ">"
         ELSE
            szWriteBuffer = "<img src=^" + vDialog.Control.WebFileName + "^ name=^" + szCtrlTag + "^ id=^" + szCtrlTag + "^ onclick=^" +
                            szActionName + "( )^ " + szStyle + szTitleHTML + szClass + szText + ">"
            //szWriteBuffer = "<a href=^#^ name=^" + szCtrlTag + "^ id=^" + szCtrlTag + "^ ^onclick=^" +
            //                szActionName + "( )^><img src=^" + vDialog.Control.WebFileName + "^ " + szStyle + szTitleHTML + "></a>"
         END
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
      ELSE
         //Neither mapping nor filename was specified.
         szWriteBuffer = "//There was no information on where to get the image.  Nothing created."
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
      END
  END

END


/*************************************************************************************************
**
**    OPERATION: GenJSPJ_CrteListBox
**
*************************************************************************************************/
GLOBAL OPERATION
GenJSPJ_CrteListBox( VIEW vDialog,
                    INTEGER lFile,
                    STRING ( 10000 ) szWriteBuffer,
                    STRING ( 50 )    szIndent,
                    STRING ( 32 )    szCtrlTag,
                    STRING ( 1 )     szNoPositioning,
                    INTEGER lOffsetX,
                    INTEGER lOffsetY )

   VIEW vScope  BASED ON LOD TZWDLGSO  // identifies scoping entity for list entries
   STRING ( 32 )  szContextName
   STRING ( 32 )  szScopingEntityName
   STRING ( 32 )  szListEntityName
   STRING ( 32 )  szAttributeName
   STRING ( 32 )  szEntityName
   STRING ( 256 ) szStyle
   STRING ( 256 ) szClass
   STRING ( 256 ) szTitle
   STRING ( 256 ) szTitleHTML
   STRING ( 256 ) ListBoxDoubleClickAction
   STRING ( 16 )  szTabIndex
   STRING ( 10 )  szMaxStringLength
   STRING ( 10 )  szWidth
   STRING ( 10 )  szSelectAction
   STRING ( 10 )  szSelectFunction
   STRING ( 10 )  szHeight
   STRING ( 10 )  szX_Pos
   STRING ( 10 )  szY_Pos
   STRING ( 10 )  szDisabled
   DECIMAL        DLUnits
   INTEGER        lSubtype
   INTEGER        lMaxStringLength

   szStyle = "width:" + szWidth + "px; height:" + szHeight + "px;"
   szClass = vDialog.Control.CSS_Class

   //If we put a title on the control, when the mouse is hovered over the control, this text will display.
   szTitleHTML = ""
   szTitle = vDialog.Control.DIL_Text
   IF szTitle != ""
      szTitleHTML = " title=^" + szTitle + "^ "
   END

   CreateTabIndexString( vDialog, szTabIndex )
   // We will set the height to the constant 20 px.
   PIX_PER_DU( vDialog, DLUnits )
   zIntegerToString( szWidth, 10, vDialog.Control.SZDLG_X * DLUnits )
   zIntegerToString( szHeight, 10, vDialog.Control.SZDLG_Y * DLUnits )
   szStyle = "style=^width:" + szWidth + "px;height:" + szHeight + "px;"
   
   // If szNoPositioning is null then we are using absolute positioning on controls.
   IF  szNoPositioning = "" 

      zIntegerToString( szX_Pos, 10, vDialog.Control.PSDLG_X * DLUnits )
      zIntegerToString( szY_Pos, 10, vDialog.Control.PSDLG_Y * DLUnits )
      szStyle = szStyle + "position:absolute;" + "left:" + szX_Pos + "px;" + "top:" + szY_Pos + "px;"
      //CreateAbsolStyleString( vDialog, szStyle, lOffsetX, lOffsetY, "" )
   END
   
   szStyle = szStyle + "^ "

   szStyle = szStyle + szTabIndex

   szWriteBuffer = "<% strErrorMapValue = ^^;  %>"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

   szSelectFunction = "OnClick"


      // Check if DoubleClick Event and Action exist and handle accordingly.
      ListBoxDoubleClickAction = ""
      SET CURSOR FIRST vDialog.Event WHERE vDialog.Event.Type = 2
      IF RESULT >= zCURSOR_SET AND vDialog.EventAct EXISTS
         ListBoxDoubleClickAction = " ondblclick=^" + vDialog.EventAct.Tag + "( )^ "
      END


      // Set cursor to the scoping entity if one exists
      CreateViewFromViewForTask( vScope, vDialog, 0 )
      SET CURSOR NEXT vScope.CtrlMap

      IF szClass = ""
         szWriteBuffer = "<select name=^" + szCtrlTag + "^ id=^" + szCtrlTag + "^ size=^4^ " + szTitleHTML + szStyle + szDisabled + " onclick=^" +
                         szCtrlTag + szSelectFunction + "( )^" + ListBoxDoubleClickAction + ">"
      ELSE
         szWriteBuffer = "<select class=^" + szClass + "^ name=^" + szCtrlTag + "^ id=^" + szCtrlTag + "^ size=^4^ " + szTitleHTML + szStyle + szDisabled + " onclick=^" +
                         szCtrlTag + szSelectFunction + "( )^" + ListBoxDoubleClickAction + ">"
      END
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

      szWriteBuffer = "<%"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      IF vDialog.CtrlMapView EXISTS


         // See if a list entity has been specified, and if so, use it.
         // Since this is a listbox I believe this should always be specified.
         IF vDialog.CtrlMapLOD_Entity EXISTS
            szListEntityName = vDialog.CtrlMapLOD_Entity.Name
         END

         szWriteBuffer = "   " + vDialog.CtrlMapView.Name + " = " +
                         "task.getViewByName( ^" + vDialog.CtrlMapView.Name + "^ );"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "   if ( " + vDialog.CtrlMapView.Name + " == null )"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "   {"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      strComboCurrentValue = ^^;"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      View v" + szCtrlTag + ";"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

         szAttributeName = ""
         szEntityName = ""
         szContextName = ""

         // Set position on the text field inside the listbox.
         SetViewToSubobject( vDialog, "CtrlCtrl" )
         IF vDialog.CtrlMapLOD_Attribute EXISTS

            szAttributeName = vDialog.CtrlMapER_Attribute.Name
            szEntityName = vDialog.CtrlMapRelatedEntity.Name

            szWriteBuffer = "      nRC = " + vDialog.CtrlMapView.Name + ".cursor( ^" +
                            szEntityName + "^ ).checkExistenceOfEntity();"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      if ( nRC >= 0 )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            IF vDialog.CtrlMapContext EXISTS
               szContextName = vDialog.CtrlMapContext.Name
            END

            IF vDialog.CtrlMapER_Domain.MaxStringLth > 200
               lMaxStringLength = vDialog.CtrlMapER_Domain.MaxStringLth
               szMaxStringLength = lMaxStringLength
            ELSE
               szMaxStringLength = "200"
            END


            szWriteBuffer = "         strComboCurrentValue = " + vDialog.CtrlMapView.Name +
                     ".cursor( ^" +
                     szEntityName + "^ ).getStringFromAttribute( ^" +
                     szAttributeName + "^, ^" + szContextName + "^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
         ELSE
            szWriteBuffer = "      strComboCurrentValue = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
         END
         ResetViewFromSubobject( vDialog )

         // See if a scoping entity has been specified, and if so, use it.
         szScopingEntityName = ""
         lSubtype = vDialog.Control.Subtype
         lSubtype = IsFlagSequenceSet( lSubtype, zLISTBOX_SCOPE_OI )
         IF lSubtype = 0
            IF vScope.CtrlMapLOD_Entity EXISTS
               szScopingEntityName = "^" + vScope.CtrlMapLOD_Entity.Name + "^"
            END
         END

         szWriteBuffer = "      v" + szCtrlTag + " = " + vDialog.CtrlMapView.Name + ".newView();"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
         szWriteBuffer = "      ComboCount = 0;"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      strComboCountCurrentValue = ^0^;"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

         IF lSubtype = 0
            szWriteBuffer = "      nRC = v" + szCtrlTag + ".cursor( ^" +
                                         szListEntityName + "^).setFirst( " + szScopingEntityName + " );"
         ELSE
            szWriteBuffer = "      nRC = v" + szCtrlTag + ".SetCursorScopeOI( ^" +
                                         szListEntityName + "^, 1 ); // first" // zPOS_FIRST
         END

         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      while ( nRC >= 0 )"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      {"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

         IF szAttributeName != ""

            szWriteBuffer = "         strErrorMapValue = v" + szCtrlTag +
                            ".cursor( ^" +
                            szEntityName + "^ ).getStringFromAttribute( ^" +
                            szAttributeName + "^, ^" +
                            szContextName + "^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         END

         szWriteBuffer = "         if ( strComboCurrentValue.equals( strErrorMapValue ) )"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         {"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "%>"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "            <option selected=^selected^><%=strErrorMapValue%></option>"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "<%"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "            strComboCountCurrentValue = Integer.toString( ComboCount );"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         }"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         else"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         {"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "%>"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "            <option><%=strErrorMapValue%></option>"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "<%"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         }"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
         szWriteBuffer = "         ComboCount++;"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         IF lSubtype = 0
            szWriteBuffer = "         nRC =  v" + szCtrlTag +
                            ".cursor( ^" + szListEntityName +
                            "^ ).setNextContinue( " + szScopingEntityName + " );"
         ELSE
            szWriteBuffer = "         nRC =  v" + szCtrlTag +
                            ".SetCursorScopeOI( ^" + szListEntityName + "^, 3 ); // next" // zPOS_NEXT
         END

         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         DropView( vScope )
      END

      szWriteBuffer = "      }"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
      szWriteBuffer = "      v" + szCtrlTag + ".drop();"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

      szWriteBuffer = "   }"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "%>"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "<input name=^h" + szCtrlTag + "^ id=^h" + szCtrlTag + "^ type=^hidden^ value=^<%=strComboCountCurrentValue%>^ >"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

   szWriteBuffer = "</select>"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

END

