/////////////////////////////////////////////////////////////////////////////
// Project ePamms
//
// This is a part of the ePamms applications package.
// Copyright (c) 2007 - 2016 Arksoft, Inc.
// All Rights Reserved.
//
// SUBSYSTEM:    mMasLC        - Primary Registrant Label Content operations
// FILE:         mMasLC.vml
// AUTHOR:       Doug Sorensen
//
/////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: dEPA_RegistrationNbr
//
/////////////////////////////////////////////////////////////////////////////
DERIVED ATTRIBUTE OPERATION
dEPA_RegistrationNbr( VIEW mMasLC BASED ON LOD mMasLC,
                      STRING ( 32 ) InternalEntityStructure,
                      STRING ( 32 ) InternalAttribStructure,
                      SHORT GetOrSetFlag )

   STRING ( 1024 ) szString

   CASE GetOrSetFlag
   OF   zDERIVED_GET:

      IF mMasLC.PrimaryRegistrant EXISTS AND mMasLC.MasterProduct EXISTS
         szString = mMasLC.PrimaryRegistrant.EPA_CompanyNumber + "-" + mMasLC.MasterProduct.Number
      ELSE
         szString = "EPA Registration Number unknown"
      END


      // Store the calculated value in the object.
      StoreStringInRecord( mMasLC, InternalEntityStructure, InternalAttribStructure, szString )
      RETURN 0

        /* end zDERIVED_GET */
   OF   zDERIVED_SET:

        /* end zDERIVED_SET */
   END  /* case */

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: dIngredientName
//
/////////////////////////////////////////////////////////////////////////////
DERIVED ATTRIBUTE OPERATION
dIngredientName( VIEW mMasLC BASED ON LOD mMasLC,
                 STRING ( 32 ) InternalEntityStructure,
                 STRING ( 32 ) InternalAttribStructure,
                 SHORT GetOrSetFlag )

   STRING ( 1024 ) szString

   CASE GetOrSetFlag
   OF   zDERIVED_GET:

      IF mMasLC.M_IngredientsStatement EXISTS
         szString = mMasLC.M_IngredientsStatement.CommonName
         IF szString = ""
            szString = mMasLC.M_IngredientsStatement.ChemicalName
         END
      ELSE
         szString = ""
      END

      // Store the calculated value in the object.
      StoreStringInRecord( mMasLC, InternalEntityStructure, InternalAttribStructure, szString )
      RETURN 0

        /* end zDERIVED_GET */
   OF   zDERIVED_SET:

        /* end zDERIVED_SET */
   END  /* case */

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: dMasterProductNameNbr
//
/////////////////////////////////////////////////////////////////////////////
DERIVED ATTRIBUTE OPERATION
dMasterProductNameNbr( VIEW mMasLC BASED ON LOD mMasLC,
                       STRING ( 32 ) InternalEntityStructure,
                       STRING ( 32 ) InternalAttribStructure,
                       SHORT GetOrSetFlag )

   STRING ( 1024 ) szString

   CASE GetOrSetFlag
   OF   zDERIVED_GET:

      IF mMasLC.MasterProduct  EXISTS
         szString = mMasLC.MasterProduct.Name + " (" +
                    mMasLC.PrimaryRegistrant.EPA_CompanyNumber + "-" +
                    mMasLC.MasterProduct.Number + ")"
       ELSE
          szString = ""
       END

       // Store the calculated value in the object.
       StoreStringInRecord( mMasLC, InternalEntityStructure, InternalAttribStructure, szString )
       RETURN 0

        /* end zDERIVED_GET */
   OF   zDERIVED_SET:

        /* end zDERIVED_SET */
   END  /* case */

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: dRegistrantNameID
//  Registrant Name + EPA Registrant Number
//
/////////////////////////////////////////////////////////////////////////////
DERIVED ATTRIBUTE OPERATION
dRegistrantNameID( VIEW mMasLC BASED ON LOD mMasLC,
                   STRING ( 32 ) InternalEntityStructure,
                   STRING ( 32 ) InternalAttribStructure,
                   SHORT GetOrSetFlag )

   STRING ( 1024 ) szString

   CASE GetOrSetFlag
   OF   zDERIVED_GET:

      IF mMasLC.Organization  EXISTS
         szString = mMasLC.Organization.Name
         IF mMasLC.PrimaryRegistrant.EPA_CompanyNumber = ""
            szString = szString + " (Non EPA)"
         ELSE
            szString = szString + " (" + mMasLC.PrimaryRegistrant.EPA_CompanyNumber + ")"
         END
       ELSE
          szString = ""
       END

       // Store the calculated value in the object.
       StoreStringInRecord( mMasLC, InternalEntityStructure, InternalAttribStructure, szString )
       RETURN 0
        /* end zDERIVED_GET */
   OF   zDERIVED_SET:

        /* end zDERIVED_SET */
   END  /* case */

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: BuildNewMLC_Version
//
/////////////////////////////////////////////////////////////////////////////
TRANSFORMATION OPERATION
BuildNewMLC_Version( VIEW NewMLC      BASED ON LOD mMasLC,
                     VIEW PreviousMLC BASED ON LOD mMasLC )

   STRING ( 10 ) szVersion

   // Create a new MLC from a previous MLC, tieing the new back to the original.

   // Root and single includes
   CREATE ENTITY NewMLC.MasterLabelContent
   SetMatchingAttributesByName( NewMLC, "MasterLabelContent", PreviousMLC, "MasterLabelContent", zSET_NULL )
   SetAttributeFromCurrentDateTime( NewMLC, "MasterLabelContent", "RevisionDate" )
   szVersion = NewMLC.MasterLabelContent.RevisionDate
   NewMLC.MasterLabelContent.Version = szVersion
   INCLUDE NewMLC.MasterProduct FROM PreviousMLC.MasterProduct
   INCLUDE NewMLC.MP_MasterLabelContent FROM PreviousMLC.MasterLabelContent

   // M_Usage Subobject
   // Check to make sure we are not copying duplicates.
   FOR EACH PreviousMLC.M_Usage
      SET CURSOR FIRST NewMLC.M_Usage WHERE NewMLC.M_Usage.UsageType = PreviousMLC.M_Usage.UsageType
                                        AND NewMLC.M_Usage.Name = PreviousMLC.M_Usage.Name
      IF RESULT < zCURSOR_SET
         CREATE ENTITY NewMLC.M_Usage
         SetMatchingAttributesByName( NewMLC, "M_Usage", PreviousMLC, "M_Usage", zSET_NULL )
         INCLUDE NewMLC.MP_Usage FROM PreviousMLC.M_Usage
      END
   END

   // M_GeneralSection Subobject
   FOR EACH PreviousMLC.M_GeneralSection
      CREATE ENTITY NewMLC.M_GeneralSection
      SetMatchingAttributesByName( NewMLC, "M_GeneralSection", PreviousMLC, "M_GeneralSection", zSET_NULL )
      INCLUDE NewMLC.MP_GeneralSection FROM PreviousMLC.M_GeneralSection
      FOR EACH PreviousMLC.M_GeneralStatement
         CREATE ENTITY NewMLC.M_GeneralStatement
         SetMatchingAttributesByName( NewMLC, "M_GeneralStatement", PreviousMLC, "M_GeneralStatement", zSET_NULL )
         INCLUDE NewMLC.MP_GeneralStatement FROM PreviousMLC.M_GeneralStatement
      END
   END

   // M_IngredientsSection Subobject
   FOR EACH PreviousMLC.M_IngredientsSection
      CREATE ENTITY NewMLC.M_IngredientsSection
      SetMatchingAttributesByName( NewMLC, "M_IngredientsSection", PreviousMLC, "M_IngredientsSection", zSET_NULL )
      INCLUDE NewMLC.MP_IngredientsSection FROM PreviousMLC.M_IngredientsSection
      FOR EACH PreviousMLC.M_IngredientsStatement
         CREATE ENTITY NewMLC.M_IngredientsStatement
         SetMatchingAttributesByName( NewMLC, "M_IngredientsStatement", PreviousMLC, "M_IngredientsStatement", zSET_NULL )
         INCLUDE NewMLC.MP_IngredientsStatement FROM PreviousMLC.M_IngredientsStatement
      END
   END

   // M_StorageDisposalSection Subobject
   FOR EACH PreviousMLC.M_StorageDisposalSection
      CREATE ENTITY NewMLC.M_StorageDisposalSection
      SetMatchingAttributesByName( NewMLC, "M_StorageDisposalSection", PreviousMLC, "M_StorageDisposalSection", zSET_NULL )
      INCLUDE NewMLC.MP_StorageDisposalSection FROM PreviousMLC.M_StorageDisposalSection
      FOR EACH PreviousMLC.M_StorageDisposalStatement
         CREATE ENTITY NewMLC.M_StorageDisposalStatement
         SetMatchingAttributesByName( NewMLC, "M_StorageDisposalStatement", PreviousMLC, "M_StorageDisposalStatement", zSET_NULL )
         INCLUDE NewMLC.MP_StorageDisposalStatement FROM PreviousMLC.M_StorageDisposalStatement
      END
   END
TraceLineS( "!!! Commit 3", "" )
COMMIT NewMLC

   // M_DirectionsForUseSection Subobject
   FOR EACH PreviousMLC.M_DirectionsForUseSection
      CREATE ENTITY NewMLC.M_DirectionsForUseSection
      SetMatchingAttributesByName( NewMLC, "M_DirectionsForUseSection", PreviousMLC, "M_DirectionsForUseSection", zSET_NULL )
      INCLUDE NewMLC.MP_DirectionsForUseSection FROM PreviousMLC.M_DirectionsForUseSection
      FOR EACH PreviousMLC.M_DirectionsForUseStatement
         CREATE ENTITY NewMLC.M_DirectionsForUseStatement
         SetMatchingAttributesByName( NewMLC, "M_DirectionsForUseStatement", PreviousMLC, "M_DirectionsForUseStatement", zSET_NULL )
         INCLUDE NewMLC.MP_DirectionsForUseStatement FROM PreviousMLC.M_DirectionsForUseStatement
      END

      // Include appropriate Usage statements.
TraceLineS( "!!! Commit 4", "" )
COMMIT NewMLC
      /*FOR EACH PreviousMLC.M_DirectionsUsageOrdering
         // Check to see if the Usage already exists. This can happen if two Usages have the same name.
         SET CURSOR FIRST NewMLC.M_DirectionsUsage WHERE NewMLC.M_DirectionsUsage.Name                 = PreviousMLC.M_DirectionsUsage.Name
                                                     AND NewMLC.M_DirectionsUsage.UsageType            = PreviousMLC.M_DirectionsUsage.UsageType
                                                     AND NewMLC.M_DirectionsUsage.ClaimsClassification = PreviousMLC.M_DirectionsUsage.ClaimsClassification
         IF RESULT < zCURSOR_SET
            SET CURSOR FIRST NewMLC.M_Usage WHERE NewMLC.M_Usage.Name                 = PreviousMLC.M_DirectionsUsage.Name
                                              AND NewMLC.M_Usage.UsageType            = PreviousMLC.M_DirectionsUsage.UsageType
                                              AND NewMLC.M_Usage.ClaimsClassification = PreviousMLC.M_DirectionsUsage.ClaimsClassification
            IF RESULT >= zCURSOR_SET
               CREATE ENTITY NewMLC.M_DirectionsUsageOrdering
               INCLUDE NewMLC.M_DirectionsUsage FROM NewMLC.M_Usage
       TraceLineS( "!!! Commit 5", "" )
       COMMIT NewMLC
            END
         END
      END*/
   END
TraceLineS( "!!! Commit 6", "" )
COMMIT NewMLC

   // M_MarketingSection Subobject
   FOR EACH PreviousMLC.M_MarketingSection
      CREATE ENTITY NewMLC.M_MarketingSection
      SetMatchingAttributesByName( NewMLC, "M_MarketingSection", PreviousMLC, "M_MarketingSection", zSET_NULL )
      INCLUDE NewMLC.MP_MarketingSection FROM PreviousMLC.M_MarketingSection
      FOR EACH PreviousMLC.M_MarketingStatement
         CREATE ENTITY NewMLC.M_MarketingStatement
         SetMatchingAttributesByName( NewMLC, "M_MarketingStatement", PreviousMLC, "M_MarketingStatement", zSET_NULL )
         INCLUDE NewMLC.MP_MarketingStatement FROM PreviousMLC.M_MarketingStatement
      END

       // Include appropriate Usage statements.
      /*FOR EACH PreviousMLC.M_MarketingUsage WITHIN PreviousMLC.M_MarketingSection
         // Check to see if the Usage already exists. This can happen if two Usages have the same name.
         SET CURSOR FIRST NewMLC.M_MarketingUsage WHERE NewMLC.M_MarketingUsage.Name = PreviousMLC.M_MarketingUsage.Name
                                                    AND NewMLC.M_MarketingUsage.UsageType = PreviousMLC.M_MarketingUsage.UsageType
         IF RESULT < zCURSOR_SET
            SET CURSOR FIRST NewMLC.M_Usage WHERE NewMLC.M_Usage.Name = PreviousMLC.M_MarketingUsage.Name
                                              AND NewMLC.M_Usage.UsageType = PreviousMLC.M_MarketingUsage.UsageType
            CREATE ENTITY NewMLC.M_MarketingUsageOrdering
            INCLUDE NewMLC.M_MarketingUsage FROM NewMLC.M_Usage
         END
      END*/
   END
TraceLineS( "!!! Commit 7", "" )
COMMIT NewMLC

   // M_HumanHazardSection Subobject
   FOR EACH PreviousMLC.M_HumanHazardSection
      CREATE ENTITY NewMLC.M_HumanHazardSection
      SetMatchingAttributesByName( NewMLC, "M_HumanHazardSection", PreviousMLC, "M_HumanHazardSection", zSET_NULL )
      INCLUDE NewMLC.MP_HumanHazardSection FROM PreviousMLC.M_HumanHazardSection
   END
TraceLineS( "!!! Commit 8", "" )
COMMIT NewMLC

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: CopyMLCToNewProduct
//
/////////////////////////////////////////////////////////////////////////////
TRANSFORMATION OPERATION
CopyMLCToNewProduct( VIEW TargetMLC BASED ON LOD mMasLC,
                     VIEW SourceMLC BASED ON LOD mMasLC )

   VIEW TargetMLC2  BASED ON LOD mMasLC

   // Copy the Source MLC to the new Target MLC, which is for a new Product.
   // The root entity of the new Target MLC will have been created and linked to the appropriate Product
   // prior to entering this operation.

   // For root, only set attributes.
   SetMatchingAttributesByName( TargetMLC, "MasterLabelContent", SourceMLC, "MasterLabelContent", zSET_NULL )
   TargetMLC.MasterLabelContent.Finalized = "W"

   // Tie to previous version.
   INCLUDE TargetMLC.MP_MasterLabelContent FROM SourceMLC.MasterLabelContent

   // Usage Footnotes.
   FOR EACH SourceMLC.M_UsageFootnote
      CREATE ENTITY TargetMLC.M_UsageFootnote
      SetMatchingAttributesByName( TargetMLC, "M_UsageFootnote", SourceMLC, "M_UsageFootnote", zSET_NULL )
   END

   // M_Usage Subobject
   // Check to make sure we are not copying duplicates.
   FOR EACH SourceMLC.M_UsageType
      CREATE ENTITY TargetMLC.M_UsageType
      SetMatchingAttributesByName( TargetMLC, "M_UsageType", SourceMLC, "M_UsageType", zSET_NULL )
      FOR EACH SourceMLC.M_Usage
         SET CURSOR FIRST TargetMLC.M_Usage WHERE TargetMLC.M_Usage.UsageType = SourceMLC.M_Usage.UsageType
                                              AND TargetMLC.M_Usage.Name = SourceMLC.M_Usage.Name
         IF RESULT < zCURSOR_SET
            CREATE ENTITY TargetMLC.M_Usage
            SetMatchingAttributesByName( TargetMLC, "M_Usage", SourceMLC, "M_Usage", zSET_NULL )
            INCLUDE TargetMLC.MP_Usage FROM SourceMLC.M_Usage
            IF SourceMLC.M_UsageFootnoteUsed EXISTS
               SET CURSOR FIRST TargetMLC.M_UsageFootnote
                          WHERE TargetMLC.M_UsageFootnote.Text = SourceMLC.M_UsageFootnoteUsed.Text
               IF RESULT >= zCURSOR_SET
                  INCLUDE TargetMLC.M_UsageFootnoteUsed FROM TargetMLC.M_UsageFootnote
               END
            END
         END
      END
   END

   // General Section
   FOR EACH SourceMLC.M_GeneralSection
      CREATE ENTITY TargetMLC.M_GeneralSection
      SetMatchingAttributesByName( TargetMLC, "M_GeneralSection", SourceMLC, "M_GeneralSection", zSET_NULL )
      INCLUDE TargetMLC.MP_GeneralSection FROM SourceMLC.M_GeneralSection
      FOR EACH SourceMLC.M_GeneralStatement
         CREATE ENTITY TargetMLC.M_GeneralStatement
         SetMatchingAttributesByName( TargetMLC, "M_GeneralStatement", SourceMLC, "M_GeneralStatement", zSET_NULL )
         INCLUDE TargetMLC.MP_GeneralStatement FROM SourceMLC.M_GeneralStatement
      END

      // ReviewerNote
      FOR EACH SourceMLC.M_GeneralReviewerNote
         CREATE ENTITY TargetMLC.M_GeneralReviewerNote
         SetMatchingAttributesByName( TargetMLC, "M_GeneralReviewerNote", SourceMLC, "M_GeneralReviewerNote", zSET_NULL )
      END
   END

   // Ingredients Section
   FOR EACH SourceMLC.M_IngredientsSection
      CREATE ENTITY TargetMLC.M_IngredientsSection
      SetMatchingAttributesByName( TargetMLC, "M_IngredientsSection", SourceMLC, "M_IngredientsSection", zSET_NULL )
      INCLUDE TargetMLC.MP_IngredientsSection FROM SourceMLC.M_IngredientsSection
      FOR EACH SourceMLC.M_IngredientsStatement
         CREATE ENTITY TargetMLC.M_IngredientsStatement
         SetMatchingAttributesByName( TargetMLC, "M_IngredientsStatement", SourceMLC, "M_IngredientsStatement", zSET_NULL )
         INCLUDE TargetMLC.MP_IngredientsStatement FROM SourceMLC.M_IngredientsStatement
      END

      // ReviewerNote
      FOR EACH SourceMLC.M_IngredientsReviewerNote
         CREATE ENTITY TargetMLC.M_IngredientsReviewerNote
         SetMatchingAttributesByName( TargetMLC, "M_IngredientsReviewerNote", SourceMLC, "M_IngredientsReviewerNote", zSET_NULL )
      END
   END

   // StorageDisposal Section
   FOR EACH SourceMLC.M_StorageDisposalSection
      CREATE ENTITY TargetMLC.M_StorageDisposalSection
      SetMatchingAttributesByName( TargetMLC, "M_StorageDisposalSection", SourceMLC, "M_StorageDisposalSection", zSET_NULL )
      INCLUDE TargetMLC.MP_StorageDisposalSection FROM SourceMLC.M_StorageDisposalSection
      FOR EACH SourceMLC.M_StorageDisposalStatement
         CREATE ENTITY TargetMLC.M_StorageDisposalStatement
         SetMatchingAttributesByName( TargetMLC, "M_StorageDisposalStatement", SourceMLC, "M_StorageDisposalStatement", zSET_NULL )
         INCLUDE TargetMLC.MP_StorageDisposalStatement FROM SourceMLC.M_StorageDisposalStatement
      END
   END

   // DirectionsForUse Section
   FOR EACH SourceMLC.M_DirectionsForUseSection
      CREATE ENTITY TargetMLC.M_DirectionsForUseSection
      SetMatchingAttributesByName( TargetMLC, "M_DirectionsForUseSection", SourceMLC, "M_DirectionsForUseSection", zSET_NULL )
      INCLUDE TargetMLC.MP_DirectionsForUseSection FROM SourceMLC.M_DirectionsForUseSection
      FOR EACH SourceMLC.M_DirectionsForUseStatement
         CREATE ENTITY TargetMLC.M_DirectionsForUseStatement
         SetMatchingAttributesByName( TargetMLC, "M_DirectionsForUseStatement", SourceMLC, "M_DirectionsForUseStatement", zSET_NULL )
         INCLUDE TargetMLC.MP_DirectionsForUseStatement FROM SourceMLC.M_DirectionsForUseStatement

         // Statement Directions Usage
         FOR EACH SourceMLC.M_DirectionsUsageOrdering
            CREATE ENTITY TargetMLC.M_DirectionsUsageOrdering
            SetMatchingAttributesByName( TargetMLC, "M_DirectionsUsageOrdering", SourceMLC, "M_DirectionsUsageOrdering", zSET_NULL )
            SET CURSOR FIRST TargetMLC.MP_Usage WITHIN TargetMLC.MasterLabelContent
                       WHERE TargetMLC.MP_Usage.ID = SourceMLC.M_Usage.ID
            IF RESULT >= zCURSOR_SET
               INCLUDE TargetMLC.M_DirectionsUsage FROM TargetMLC.M_Usage
            ELSE
               TraceLineS( "Programming Error 1", "" )
               IssueError( TargetMLC,0,0, "Programming Error 1" )
            END
         END
      END

      // Driving Usage
      FOR EACH SourceMLC.M_DrivingUsage
         SET CURSOR FIRST TargetMLC.MP_Usage WITHIN TargetMLC.MasterLabelContent
                    WHERE TargetMLC.MP_Usage.ID = SourceMLC.M_DrivingUsage.ID
         IF RESULT >= zCURSOR_SET
            INCLUDE TargetMLC.M_DrivingUsage FROM TargetMLC.M_Usage
         ELSE
            TraceLineS( "Programming Error 2", "" )
            IssueError( TargetMLC,0,0, "Programming Error 2" )
         END
      END

      // Text Keyword
      /*FOR EACH SourceMLC.M_InsertTextKeywordSectionDU
         CREATE ENTITY TargetMLC.M_InsertTextKeywordSectionDU
         SetMatchingAttributesByName( TargetMLC, "M_InsertTextKeywordSectionDU", SourceMLC, "M_InsertTextKeywordSectionDU", zSET_NULL )
         FOR EACH SourceMLC.M_InsertTextSectionDU
            CREATE ENTITY TargetMLC.M_InsertTextSectionDU
            SetMatchingAttributesByName( TargetMLC, "M_InsertTextSectionDU", SourceMLC, "M_InsertTextSectionDU", zSET_NULL )
         END
      END*/

      // Reviewer Note
      FOR EACH SourceMLC.M_DirectionsForUseReviewerNote
         CREATE ENTITY TargetMLC.M_DirectionsForUseReviewerNote
         SetMatchingAttributesByName( TargetMLC, "M_DirectionsForUseReviewerNote", SourceMLC, "M_DirectionsForUseReviewerNote", zSET_NULL )
      END
   END

   // Marketing Section
   FOR EACH SourceMLC.M_MarketingSection
      CREATE ENTITY TargetMLC.M_MarketingSection
      SetMatchingAttributesByName( TargetMLC, "M_MarketingSection", SourceMLC, "M_MarketingSection", zSET_NULL )
      INCLUDE TargetMLC.MP_MarketingSection FROM SourceMLC.M_MarketingSection
      FOR EACH SourceMLC.M_MarketingStatement
         CREATE ENTITY TargetMLC.M_MarketingStatement
         SetMatchingAttributesByName( TargetMLC, "M_MarketingStatement", SourceMLC, "M_MarketingStatement", zSET_NULL )
         INCLUDE TargetMLC.MP_MarketingStatement FROM SourceMLC.M_MarketingStatement
         // Statement Marketing Usage
         FOR EACH SourceMLC.M_MarketingUsageOrdering
            IF SourceMLC.M_MarketingUsage EXISTS
               CREATE ENTITY TargetMLC.M_MarketingUsageOrdering
               SetMatchingAttributesByName( TargetMLC, "M_MarketingUsageOrdering", SourceMLC, "M_MarketingUsageOrdering", zSET_NULL )
               SET CURSOR FIRST TargetMLC.MP_Usage WITHIN TargetMLC.MasterLabelContent
                          WHERE TargetMLC.MP_Usage.ID = SourceMLC.M_MarketingUsage.ID
               IF RESULT >= zCURSOR_SET
                  INCLUDE TargetMLC.M_MarketingUsage FROM TargetMLC.M_Usage
               ELSE
                  TraceLineS( "Programming Error 3", "" )
                  IssueError( TargetMLC,0,0, "Programming Error 3" )
               END
            END
         END
      END

      // Reviewer Note
      FOR EACH SourceMLC.M_MarketingReviewerNote
         CREATE ENTITY TargetMLC.M_MarketingReviewerNote
         SetMatchingAttributesByName( TargetMLC, "M_MarketingReviewerNote", SourceMLC, "M_MarketingReviewerNote", zSET_NULL )
      END
   END

   // HumanHazard Section
   FOR EACH SourceMLC.M_HumanHazardSection
      CREATE ENTITY TargetMLC.M_HumanHazardSection
      SetMatchingAttributesByName( TargetMLC, "M_HumanHazardSection", SourceMLC, "M_HumanHazardSection", zSET_NULL )
      INCLUDE TargetMLC.MP_HumanHazardSection FROM SourceMLC.M_HumanHazardSection
   END

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: ObjectConstraints
//
/////////////////////////////////////////////////////////////////////////////
OBJECT CONSTRAINT OPERATION
ObjectConstraints( VIEW mMasLC BASED ON LOD mMasLC,
                   SHORT Event,
                   SHORT State )

   STRING ( 100 ) szCompositeLocation

   CASE Event
   OF   zOCE_ACTIVATE:

      // Go to build the flat display of all components subobject.
      //BuildCompositeEntries( mMasLC )

      // Build Usage Group Usages.
      BuildUsageGroupEntries( mMasLC )



        /* end zOCE_ACTIVATE */
   OF   zOCE_ACTIVATE_EMPTY:

        /* end zOCE_ACTIVATE_EMPTY */
   OF   zOCE_COMMIT:

        /* end zOCE_COMMIT */
   OF   zOCE_DROPOI:

        /* end zOCE_DROPOI */
   END  /* case */

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: dFullHazardStatement
//
/////////////////////////////////////////////////////////////////////////////
DERIVED ATTRIBUTE OPERATION
dFullHazardStatement( VIEW mMasLC BASED ON LOD mMasLC,
                      STRING ( 32 ) InternalEntityStructure,
                      STRING ( 32 ) InternalAttribStructure,
                      SHORT GetOrSetFlag )

   STRING ( 256 ) szString
   STRING ( 256 ) szReplaceString
   STRING ( 256 ) szLocation
   STRING ( 2 )   szSeparator
   STRING ( 1 )   szOpenSeparator
   STRING ( 1 )   szCloseSeparator
   STRING ( 1 )   szEncloseFirst
   SHORT nPosStart
   SHORT nPosEnd

   CASE GetOrSetFlag
   OF   zDERIVED_GET:

      IF mMasLC.M_HumanHazardSection  EXISTS

         szSeparator = mMasLC.M_HumanHazardSection.LocationSeparator
         szOpenSeparator = ""
         szCloseSeparator = ""
         nPosStart  = zstrlen( szSeparator )
         IF nPosStart > 0
            zstrncpy( szOpenSeparator, szSeparator, 1 )
            IF nPosStart > 1
               zstrncpyoffset( szCloseSeparator, szSeparator, 1, 1 )
            END
         END

         szEncloseFirst = mMasLC.M_HumanHazardSection.EncloseFirstLocation
         szString = mMasLC.M_HumanHazardSection.PrecautionaryStatement
         nPosStart  = zSearchSubString( szString, "{{Precautionary Panel Location}}", "f", 0 )
         IF nPosStart >= 0

            nPosEnd = nPosStart + 32 // length of "{{Precautionary Panel Location}}"
            szReplaceString = ""
            szLocation = mMasLC.M_HumanHazardSection.PanelLoc1
            IF szLocation != ""
               IF szEncloseFirst = "Y" AND szCloseSeparator != ""
                  szReplaceString = szReplaceString + szOpenSeparator + szLocation + szCloseSeparator
               ELSE
                  szReplaceString = szReplaceString + szLocation
               END
            END

            szLocation = mMasLC.M_HumanHazardSection.PanelLoc2
            IF szLocation != ""
               szReplaceString = szReplaceString + szOpenSeparator + szLocation + szCloseSeparator
            END

            szLocation = mMasLC.M_HumanHazardSection.PanelLoc3
            IF szLocation != ""
               szReplaceString = szReplaceString + szOpenSeparator + szLocation + szCloseSeparator
            END

            szLocation = mMasLC.M_HumanHazardSection.PanelLoc4
            IF szLocation != ""
               szReplaceString = szReplaceString + szOpenSeparator + szLocation + szCloseSeparator
            END

            szLocation = mMasLC.M_HumanHazardSection.PanelLoc5
            IF szLocation != ""
               szReplaceString = szReplaceString + szOpenSeparator + szLocation + szCloseSeparator
            END

            szLocation = mMasLC.M_HumanHazardSection.PanelLoc6
            IF szLocation != ""
               szReplaceString = szReplaceString + szOpenSeparator + szLocation + szCloseSeparator
            END

            szLocation = mMasLC.M_HumanHazardSection.PanelLoc7
            IF szLocation != ""
               szReplaceString = szReplaceString + szOpenSeparator + szLocation + szCloseSeparator
            END

            szLocation = mMasLC.M_HumanHazardSection.PanelLoc8
            IF szLocation != ""
               szReplaceString = szReplaceString + szOpenSeparator + szLocation + szCloseSeparator
            END

            szLocation = mMasLC.M_HumanHazardSection.PanelLoc9
            IF szLocation != ""
               szReplaceString = szReplaceString + szOpenSeparator + szLocation + szCloseSeparator
            END

            zReplaceSubString( szString, nPosStart, nPosEnd, szReplaceString )
         END

         nPosStart  = zSearchSubString( szString, "{{Precautionary Label Location}}", "f", 0 )
         IF nPosStart >= 0

            nPosEnd = nPosStart + 32 // length of "{{Precautionary Label Location}}"
            szReplaceString = ""
            szLocation = mMasLC.M_HumanHazardSection.LabelLoc1
            IF szLocation != ""
               IF szCloseSeparator != ""
                  szReplaceString = szReplaceString + szOpenSeparator + szLocation + szCloseSeparator
               ELSE
                  szReplaceString = szReplaceString + szLocation
               END
            END

            szLocation = mMasLC.M_HumanHazardSection.LabelLoc2
            IF szLocation != ""
               szReplaceString = szReplaceString + szOpenSeparator + szLocation + szCloseSeparator
            END

            szLocation = mMasLC.M_HumanHazardSection.LabelLoc3
            IF szLocation != ""
               szReplaceString = szReplaceString + szOpenSeparator + szLocation + szCloseSeparator
            END

            szLocation = mMasLC.M_HumanHazardSection.LabelLoc4
            IF szLocation != ""
               szReplaceString = szReplaceString + szOpenSeparator + szLocation + szCloseSeparator
            END

            szLocation = mMasLC.M_HumanHazardSection.LabelLoc5
            IF szLocation != ""
               szReplaceString = szReplaceString + szOpenSeparator + szLocation + szCloseSeparator
            END

            szLocation = mMasLC.M_HumanHazardSection.LabelLoc6
            IF szLocation != ""
               szReplaceString = szReplaceString + szOpenSeparator + szLocation + szCloseSeparator
            END

            szLocation = mMasLC.M_HumanHazardSection.LabelLoc7
            IF szLocation != ""
               szReplaceString = szReplaceString + szOpenSeparator + szLocation + szCloseSeparator
            END

            szLocation = mMasLC.M_HumanHazardSection.LabelLoc8
            IF szLocation != ""
               szReplaceString = szReplaceString + szOpenSeparator + szLocation + szCloseSeparator
            END

            szLocation = mMasLC.M_HumanHazardSection.LabelLoc9
            IF szLocation != ""
               szReplaceString = szReplaceString + szOpenSeparator + szLocation + szCloseSeparator
            END

            zReplaceSubString( szString, nPosStart, nPosEnd, szReplaceString )
         END

      ELSE
         szString = ""
      END

      // Store the calculated value in the object.
      StoreStringInRecord( mMasLC, InternalEntityStructure, InternalAttribStructure, szString )
      RETURN 0

      /* end zDERIVED_GET */
   OF   zDERIVED_SET:

      /* end zDERIVED_SET */
   END  /* case */

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: dUsgTextSubUsageNames
//  Display required text + optional atomic usages
//
/////////////////////////////////////////////////////////////////////////////
DERIVED ATTRIBUTE OPERATION
dUsgTextSubUsageNames( VIEW mMasLC BASED ON LOD mMasLC,
                       STRING ( 32 ) InternalEntityStructure,
                       STRING ( 32 ) InternalAttribStructure,
                       SHORT GetOrSetFlag )

   VIEW mMasLC2 BASED ON LOD mMasLC
   STRING ( 1024 ) szDisplayStatement
   STRING ( 100 ) szUsageName
   STRING ( 100 ) szUsageText

   CASE GetOrSetFlag
   OF   zDERIVED_GET:

      IF mMasLC.M_Usage EXISTS
         // Display required text combined with optional usage(s).
         szDisplayStatement = mMasLC.M_Usage.Name
         InsertOptionalSubUsages( mMasLC, szDisplayStatement, "M_SubUsage", 1 )

         IF mMasLC.M_InsertTextKeywordUsage EXISTS
            CreateViewFromView( mMasLC2, mMasLC )
            FOR EACH mMasLC2.M_InsertTextKeywordUsage
               szUsageName = "{" + mMasLC2.M_InsertTextKeywordUsage.Name + "}"
               szUsageText = "<b>" + mMasLC2.M_InsertTextUsage.Text + "</b>"
               zSearchAndReplace( szDisplayStatement, 1024, szUsageName, szUsageText )
            END
            DropView( mMasLC2 )
         END
      ELSE
         szDisplayStatement = ""
      END

      // Store the calculated value in the object.
      StoreStringInRecord( mMasLC, InternalEntityStructure, InternalAttribStructure, szDisplayStatement )

        /* end zDERIVED_GET */
   OF   zDERIVED_SET:

        /* end zDERIVED_SET */
   END  /* case */

END


/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: dMarkUsgTxtSubUsgNames
//  Display required text + optional atomic usages
//
/////////////////////////////////////////////////////////////////////////////
DERIVED ATTRIBUTE OPERATION
dMarkUsgTxtSubUsgNames( VIEW mMasLC BASED ON LOD mMasLC,
                        STRING ( 32 ) InternalEntityStructure,
                        STRING ( 32 ) InternalAttribStructure,
                        SHORT GetOrSetFlag )

   VIEW mMasLC2 BASED ON LOD mMasLC
   STRING ( 1024 ) szDisplayStatement
   STRING ( 100 ) szUsageName
   STRING ( 100 ) szUsageText

   CASE GetOrSetFlag
   OF   zDERIVED_GET:

      // Display required text combined with optional usage(s).
      szDisplayStatement = mMasLC.M_MarketingUsage.Name
      InsertOptionalSubUsages( mMasLC, szDisplayStatement, "M_MarketingSubUsage", 1 )

      IF mMasLC.M_InsertTextKeywordMarketUsage EXISTS
         CreateViewFromView( mMasLC2, mMasLC )
         FOR EACH mMasLC2.M_InsertTextKeywordMarketUsage
            szUsageName = "{" + mMasLC2.M_InsertTextKeywordMarketUsage.Name + "}"
            szUsageText = "<b>" + mMasLC2.M_InsertTextMarketUsage.Text + "</b>"
            zSearchAndReplace( szDisplayStatement, 1024, szUsageName, szUsageText )
         END
         DropView( mMasLC2 )
      END

      // Store the calculated value in the object.
      StoreStringInRecord( mMasLC, InternalEntityStructure, InternalAttribStructure, szDisplayStatement )

        /* end zDERIVED_GET */
   OF   zDERIVED_SET:

        /* end zDERIVED_SET */
   END  /* case */

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: dUsgFullEmbeddedName
//
/////////////////////////////////////////////////////////////////////////////
DERIVED ATTRIBUTE OPERATION
dUsgFullEmbeddedName( VIEW mMasLC BASED ON LOD mMasLC,
                      STRING ( 32 ) InternalEntityStructure,
                      STRING ( 32 ) InternalAttribStructure,
                      SHORT GetOrSetFlag )

   STRING ( 1024 ) szDisplayStatement

   CASE GetOrSetFlag
   OF   zDERIVED_GET:

      // Display required text combined with optional usage(s).
      szDisplayStatement = mMasLC.M_Usage.Name
      InsertOptionalSubUsages( mMasLC, szDisplayStatement, "M_SubUsage", 0 )
      SetFirstCharacterCase( szDisplayStatement, 1 )

      // Store the calculated value in the object.
      StoreStringInRecord( mMasLC, InternalEntityStructure, InternalAttribStructure, szDisplayStatement )

        /* end zDERIVED_GET */
   OF   zDERIVED_SET:

        /* end zDERIVED_SET */
   END  /* case */

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: dUsgListFullEmbedName
//
/////////////////////////////////////////////////////////////////////////////
DERIVED ATTRIBUTE OPERATION
dUsgListFullEmbedName( VIEW mMasLC BASED ON LOD mMasLC,
                       STRING ( 32 ) InternalEntityStructure,
                       STRING ( 32 ) InternalAttribStructure,
                       SHORT GetOrSetFlag )

   VIEW mMasLC2 BASED ON LOD mMasLC
   STRING ( 1024 ) szDisplayStatement

   CASE GetOrSetFlag
   OF   zDERIVED_GET:

      CreateViewFromView( mMasLC2, mMasLC )
      SetCursorFirstEntityByEntityCsr( mMasLC2, "M_Usage", mMasLC, "MI_UsageList", "" )
      szDisplayStatement = mMasLC2.M_Usage.Name

      // Display required text combined with optional usage(s).
      InsertOptionalSubUsages( mMasLC2, szDisplayStatement, "M_SubUsage", 0 )
      SetFirstCharacterCase( szDisplayStatement, 1 )

      // Store the calculated value in the object.
      StoreStringInRecord( mMasLC, InternalEntityStructure, InternalAttribStructure, szDisplayStatement )

        /* end zDERIVED_GET */
   OF   zDERIVED_SET:

        /* end zDERIVED_SET */
   END  /* case */

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: dUsgNonGroupSubUsages
//
/////////////////////////////////////////////////////////////////////////////
DERIVED ATTRIBUTE OPERATION
dUsgNonGroupSubUsages( VIEW mMasLC BASED ON LOD mMasLC,
                       STRING ( 32 ) InternalEntityStructure,
                       STRING ( 32 ) InternalAttribStructure,
                       SHORT GetOrSetFlag )

   VIEW mMasLC2 BASED ON LOD mMasLC
   STRING ( 1024 ) szDisplayStatement

   CASE GetOrSetFlag
   OF   zDERIVED_GET:

      CreateViewFromView( mMasLC2, mMasLC )
      SetCursorFirstEntityByEntityCsr( mMasLC2, "M_Usage", mMasLC, "M_UsageNonGroupUsage", "" )
      szDisplayStatement = mMasLC2.M_Usage.Name

      // Display required text combined with optional usage(s).
      InsertOptionalSubUsages( mMasLC2, szDisplayStatement, "M_SubUsage", 0 )
      SetFirstCharacterCase( szDisplayStatement, 1 )

      // Store the calculated value in the object.
      StoreStringInRecord( mMasLC, InternalEntityStructure, InternalAttribStructure, szDisplayStatement )

        /* end zDERIVED_GET */
   OF   zDERIVED_SET:

        /* end zDERIVED_SET */
   END  /* case */

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: dDU_SectTitleOrTxtKey
//
/////////////////////////////////////////////////////////////////////////////
DERIVED ATTRIBUTE OPERATION
dDU_SectTitleOrTxtKey( VIEW mMasLC BASED ON LOD mMasLC,
                       STRING ( 32 ) InternalEntityStructure,
                       STRING ( 32 ) InternalAttribStructure,
                       SHORT GetOrSetFlag )

   STRING ( 1024 ) szDisplayStatement

   CASE GetOrSetFlag
   OF   zDERIVED_GET:

      // Directions For Use Display Section Title embeds keywords into the Title.
      szDisplayStatement = mMasLC.M_DirectionsForUseSection.Title
      IF szDisplayStatement = ""
         szDisplayStatement = mMasLC.M_DirectionsForUseSection.Subtitle
      END

      IF szDisplayStatement != ""
         GenerateKeywordTextIntoString( mMasLC, szDisplayStatement,
                                        "M_InsertTextKeywordSectionDU", "M_InsertTextSectionDU", ", " )
      END

      // Store the calculated value in the object.
      StoreStringInRecord( mMasLC, InternalEntityStructure, InternalAttribStructure, szDisplayStatement )
      RETURN 0

        /* end zDERIVED_GET */
   OF   zDERIVED_SET:

        /* end zDERIVED_SET */
   END  /* case */

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: dDU_SectionTitleKeyword
//
/////////////////////////////////////////////////////////////////////////////
DERIVED ATTRIBUTE OPERATION
dDU_SectionTitleKeyword( VIEW mMasLC BASED ON LOD mMasLC,
                         STRING ( 32 ) InternalEntityStructure,
                         STRING ( 32 ) InternalAttribStructure,
                         SHORT GetOrSetFlag )

   STRING ( 1024 ) szDisplayStatement

   CASE GetOrSetFlag
   OF   zDERIVED_GET:

      // Directions For Use Display Section Title embeds keywords into the Title.
      szDisplayStatement = mMasLC.M_DirectionsForUseSection.Title

      IF szDisplayStatement != ""
         GenerateKeywordTextIntoString( mMasLC, szDisplayStatement,
                                        "M_InsertTextKeywordSectionDU", "M_InsertTextSectionDU", ", " )
      END

      // Store the calculated value in the object.
      StoreStringInRecord( mMasLC, InternalEntityStructure, InternalAttribStructure, szDisplayStatement )
      RETURN 0

        /* end zDERIVED_GET */
   OF   zDERIVED_SET:

        /* end zDERIVED_SET */
   END  /* case */

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: dDU_SectionTextKeyword
//
/////////////////////////////////////////////////////////////////////////////
DERIVED ATTRIBUTE OPERATION
dDU_SectionTextKeyword( VIEW mMasLC BASED ON LOD mMasLC,
                        STRING ( 32 ) InternalEntityStructure,
                        STRING ( 32 ) InternalAttribStructure,
                        SHORT GetOrSetFlag )

   STRING ( 1024 ) szDisplayStatement
   STRING ( 1024 ) szStatementText
   STRING ( 256 )  szTitle

   CASE GetOrSetFlag
   OF   zDERIVED_GET:

      // Directions For Use Display Section Text embeds keywords into the Text.
      szDisplayStatement = mMasLC.M_DirectionsForUseSection.Subtitle

      IF szDisplayStatement != ""
         GenerateKeywordTextIntoString( mMasLC, szDisplayStatement,
                                        "M_InsertTextKeywordSectionDU", "M_InsertTextSectionDU", ", " )
      END

      // Store the calculated value in the object.
      StoreStringInRecord( mMasLC, InternalEntityStructure, InternalAttribStructure, szDisplayStatement )
      RETURN 0

        /* end zDERIVED_GET */
   OF   zDERIVED_SET:

        /* end zDERIVED_SET */
   END  /* case */

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: dDU_StatementTitleText
//
/////////////////////////////////////////////////////////////////////////////
DERIVED ATTRIBUTE OPERATION
dDU_StatementTitleText( VIEW mMasLC BASED ON LOD mMasLC,
                        STRING ( 32 ) InternalEntityStructure,
                        STRING ( 32 ) InternalAttribStructure,
                        SHORT GetOrSetFlag )

   STRING ( 1024 ) szDisplayStatement
   STRING ( 1024 ) szStatementText
   STRING ( 256 )  szTitle

   CASE GetOrSetFlag
   OF   zDERIVED_GET:

      // Directions For Use Display Statement Text is a combination of Title and Text.
      szStatementText = mMasLC.M_DirectionsForUseStatement.Text
      szTitle = mMasLC.M_DirectionsForUseStatement.Title
      IF szTitle != ""
         szDisplayStatement = "<b>" + szTitle + "</b>"
         IF szStatementText != ""
            szDisplayStatement = szDisplayStatement + " --- " + szStatementText
         END
      ELSE
         szDisplayStatement = szStatementText
      END

      // Store the calculated value in the object.
      StoreStringInRecord( mMasLC, InternalEntityStructure, InternalAttribStructure, szDisplayStatement )

        /* end zDERIVED_GET */
   OF   zDERIVED_SET:

        /* end zDERIVED_SET */
   END  /* case */

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: dDU_StmtTitleTxtKey
//
/////////////////////////////////////////////////////////////////////////////
DERIVED ATTRIBUTE OPERATION
dDU_StmtTitleTxtKey( VIEW mMasLC BASED ON LOD mMasLC,
                     STRING ( 32 ) InternalEntityStructure,
                     STRING ( 32 ) InternalAttribStructure,
                     SHORT GetOrSetFlag )

   STRING ( 1024 ) szDisplayStatement
   STRING ( 256 )  szStatementTitle
   STRING ( 1024 ) szStatementText

   CASE GetOrSetFlag
   OF   zDERIVED_GET:

      // Directions For Use Display Statement Text is a combination of Title/Text/Keywords.
      szStatementText = mMasLC.M_DirectionsForUseStatement.Text
      IF szStatementText != ""
         GenerateKeywordTextIntoString( mMasLC, szStatementText,
                                        "M_InsertTextKeywordDU", "M_InsertTextDU", ", " )
      END

      szStatementTitle = mMasLC.M_DirectionsForUseStatement.Title
      IF szStatementTitle != ""
         GenerateKeywordTextIntoString( mMasLC, szStatementTitle,
                                        "M_InsertTextKeywordDU", "M_InsertTextDU", ", " )
      END

      IF szStatementTitle != ""
         szDisplayStatement = szStatementTitle
         IF szStatementText != ""
            szDisplayStatement = szDisplayStatement + " --- " + szStatementText
         END
      ELSE
         szDisplayStatement = szStatementText
      END

      // Store the calculated value in the object.
      StoreStringInRecord( mMasLC, InternalEntityStructure, InternalAttribStructure, szDisplayStatement )

        /* end zDERIVED_GET */
   OF   zDERIVED_SET:

        /* end zDERIVED_SET */
   END  /* case */

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: dDU_StmtTitleKeyword
//
/////////////////////////////////////////////////////////////////////////////
DERIVED ATTRIBUTE OPERATION
dDU_StmtTitleKeyword( VIEW mMasLC BASED ON LOD mMasLC,
                      STRING ( 32 ) InternalEntityStructure,
                      STRING ( 32 ) InternalAttribStructure,
                      SHORT GetOrSetFlag )

   STRING ( 1024 ) szDisplayStatement

   CASE GetOrSetFlag
   OF   zDERIVED_GET:

      // Directions For Use Display Section Title embeds keywords into the Title.
      szDisplayStatement = mMasLC.M_DirectionsForUseStatement.Title

      IF szDisplayStatement != ""
         GenerateKeywordTextIntoString( mMasLC, szDisplayStatement,
                                        "M_InsertTextKeywordDU", "M_InsertTextDU", ", " )
      END

      // Store the calculated value in the object.
      StoreStringInRecord( mMasLC, InternalEntityStructure, InternalAttribStructure, szDisplayStatement )
      RETURN 0

        /* end zDERIVED_GET */
   OF   zDERIVED_SET:

        /* end zDERIVED_SET */
   END  /* case */

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: dDU_StmtTextKeyword
//
/////////////////////////////////////////////////////////////////////////////
DERIVED ATTRIBUTE OPERATION
dDU_StmtTextKeyword( VIEW mMasLC BASED ON LOD mMasLC,
                     STRING ( 32 ) InternalEntityStructure,
                     STRING ( 32 ) InternalAttribStructure,
                     SHORT GetOrSetFlag )

   STRING ( 1024 ) szDisplayStatement
   STRING ( 1024 ) szStatementText
   STRING ( 256 )  szTitle

   CASE GetOrSetFlag
   OF   zDERIVED_GET:

      // Directions For Use Display Section Text embeds keywords into the Text.
      szDisplayStatement = mMasLC.M_DirectionsForUseStatement.Text

      IF szDisplayStatement != ""
         GenerateKeywordTextIntoString( mMasLC, szDisplayStatement,
                                        "M_InsertTextKeywordDU", "M_InsertTextDU", ", " )
      END

      // Store the calculated value in the object.
      StoreStringInRecord( mMasLC, InternalEntityStructure, InternalAttribStructure, szDisplayStatement )
      RETURN 0

        /* end zDERIVED_GET */
   OF   zDERIVED_SET:

        /* end zDERIVED_SET */
   END  /* case */

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: dDU_SubStmtTitleText
//
/////////////////////////////////////////////////////////////////////////////
DERIVED ATTRIBUTE OPERATION
dDU_SubStmtTitleText( VIEW mMasLC BASED ON LOD mMasLC,
                      STRING ( 32 ) InternalEntityStructure,
                      STRING ( 32 ) InternalAttribStructure,
                      SHORT GetOrSetFlag )

   STRING ( 1024 ) szDisplayStatement
   STRING ( 1024 ) szStatementText
   STRING ( 256 )  szTitle

   CASE GetOrSetFlag
   OF   zDERIVED_GET:

      // Directions For Use Display Statement Text is a combination of Title and Text.
      szTitle = mMasLC.M_DirectionsForUseSubStatement.Title
      szStatementText = mMasLC.M_DirectionsForUseSubStatement.Text
      IF szTitle != ""
         szDisplayStatement = szTitle + " --- " + szStatementText
      ELSE
         szDisplayStatement = szStatementText
      END

      // Store the calculated value in the object.
      StoreStringInRecord( mMasLC, InternalEntityStructure, InternalAttribStructure, szDisplayStatement )
      RETURN 0

        /* end zDERIVED_GET */
   OF   zDERIVED_SET:

        /* end zDERIVED_SET */
   END  /* case */

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: dDU_SubStmtTitleTxtKey
//
/////////////////////////////////////////////////////////////////////////////
DERIVED ATTRIBUTE OPERATION
dDU_SubStmtTitleTxtKey( VIEW mMasLC BASED ON LOD mMasLC,
                        STRING ( 32 ) InternalEntityStructure,
                        STRING ( 32 ) InternalAttribStructure,
                        SHORT GetOrSetFlag )

   STRING ( 1024 ) szDisplayStatement
   STRING ( 256 )  szStatementTitle
   STRING ( 1024 ) szStatementText

   CASE GetOrSetFlag
   OF   zDERIVED_GET:

      // Directions For Use Display Statement Text is a combination of Title/Text/Keywords.
      SetViewToSubobject( mMasLC, "M_DirectionsForUseSubStatement" )
      
      szStatementText = mMasLC.M_DirectionsForUseStatement.Text
      IF szStatementText != ""
         GenerateKeywordTextIntoString( mMasLC, szStatementText,
                                        "M_InsertTextKeywordDU", "M_InsertTextDU", ", " )
      END

      szStatementTitle = mMasLC.M_DirectionsForUseStatement.Title
      IF szStatementTitle != ""
         GenerateKeywordTextIntoString( mMasLC, szStatementTitle,
                                        "M_InsertTextKeywordDU", "M_InsertTextDU", ", " )
      END

      IF szStatementTitle != ""
         szDisplayStatement = szStatementTitle
         IF szStatementText != ""
            szDisplayStatement = szDisplayStatement + " --- " + szStatementText
         END
      ELSE
         szDisplayStatement = szStatementText
      END

      ResetViewFromSubobject( mMasLC )

      // Store the calculated value in the object.
      StoreStringInRecord( mMasLC, InternalEntityStructure, InternalAttribStructure, szDisplayStatement )

        /* end zDERIVED_GET */
   OF   zDERIVED_SET:

        /* end zDERIVED_SET */
   END  /* case */

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: dDU_DrivingUsgTxtNames
//  Display required text + optional atomic usages
//
/////////////////////////////////////////////////////////////////////////////
DERIVED ATTRIBUTE OPERATION
dDU_DrivingUsgTxtNames( VIEW mMasLC BASED ON LOD mMasLC,
                        STRING ( 32 ) InternalEntityStructure,
                        STRING ( 32 ) InternalAttribStructure,
                        SHORT GetOrSetFlag )

   VIEW mMasLC1 BASED ON LOD mMasLC
   VIEW mMasLC2 BASED ON LOD mMasLC
   STRING ( 1024 ) szDisplayStatement
   STRING ( 100 )  szUsageName
   STRING ( 100 )  szUsageText

   CASE GetOrSetFlag
   OF   zDERIVED_GET:

      IF mMasLC.M_DrivingUsage EXISTS
         // Display required text combined with optional usage(s).
         CreateViewFromView( mMasLC1, mMasLC )
         SetCursorFirstEntityByAttr( mMasLC1, "M_UsageType", "UsageType",
                                     mMasLC, "M_DrivingUsage", "UsageType", "" )
         SetCursorFirstEntityByAttr( mMasLC1, "M_Usage", "ID",
                                     mMasLC, "M_DrivingUsage", "ID", "" )
      // SetCursorFirstEntityByEntityCsr( mMasLC1, "M_Usage", mMasLC, "M_DrivingUsage", "" )

         szDisplayStatement = mMasLC1.M_Usage.Name
         InsertOptionalSubUsages( mMasLC1, szDisplayStatement, "M_SubUsage", 1 )
      // SetFirstCharacterCase( szDisplayStatement, 1 )

         IF mMasLC1.M_InsertTextKeywordUsage EXISTS
            CreateViewFromView( mMasLC2, mMasLC1 )
            FOR EACH mMasLC2.M_InsertTextKeywordUsage
               szUsageName = "{" + mMasLC2.M_InsertTextKeywordUsage.Name + "}"
               szUsageText = "<b>" + mMasLC2.M_InsertTextUsage.Text + "</b>"
               zSearchAndReplace( szDisplayStatement, 1024, szUsageName, szUsageText )
            END
            DropView( mMasLC2 )
         END

         DropView( mMasLC1 )
      ELSE
         szDisplayStatement = ""
      END

      // Store the calculated value in the object.
      StoreStringInRecord( mMasLC, InternalEntityStructure, InternalAttribStructure, szDisplayStatement )

        /* end zDERIVED_GET */
   OF   zDERIVED_SET:

        /* end zDERIVED_SET */
   END  /* case */

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: dDU_DrvUsgClaimClass
//
/////////////////////////////////////////////////////////////////////////////
DERIVED ATTRIBUTE OPERATION
dDU_DrvUsgClaimClass( VIEW mMasLC BASED ON LOD mMasLC,
                      STRING ( 32 ) InternalEntityStructure,
                      STRING ( 32 ) InternalAttribStructure,
                      SHORT GetOrSetFlag )

   STRING ( 32 )  szEntityName
   STRING ( 64  ) szUsageType
   STRING ( 32 )  szClassification

   CASE GetOrSetFlag
   OF   zDERIVED_GET:

      // Combine the UsageType and the ClaimsClassification.
      GetEntityNameFromStructure( InternalEntityStructure, szEntityName )
      GetStringFromAttributeByContext( szUsageType, mMasLC, szEntityName, "UsageType", "FullUsageType", 32 )
      GetStringFromAttribute( szClassification, mMasLC, szEntityName, "ClaimsClassification" )
      IF szClassification != ""
         szUsageType = szUsageType + "/" + szClassification
      END

      // Store the calculated value in the object.
      StoreStringInRecord( mMasLC, InternalEntityStructure, InternalAttribStructure, szUsageType )

        /* end zDERIVED_GET */
   OF   zDERIVED_SET:

        /* end zDERIVED_SET */
   END  /* case */

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: dSD_TitleText
//
/////////////////////////////////////////////////////////////////////////////
DERIVED ATTRIBUTE OPERATION
dSD_TitleText( VIEW mMasLC BASED ON LOD mMasLC,
               STRING ( 32 ) InternalEntityStructure,
               STRING ( 32 ) InternalAttribStructure,
               SHORT GetOrSetFlag )

   STRING ( 1024 ) szDisplayStatement
   STRING ( 1024 ) szStatementText
   STRING ( 256 )  szTitle

   CASE GetOrSetFlag
   OF   zDERIVED_GET:

      // Storage and Disposal Display Statement Text is a combination of Title and Text.
      szTitle = mMasLC.M_StorageDisposalStatement.Title
      szStatementText = mMasLC.M_StorageDisposalStatement.Text
      IF szTitle != ""
         szDisplayStatement = szTitle + " --- " + szStatementText
      ELSE
         szDisplayStatement = szStatementText
      END


      // Store the calculated value in the object.
      StoreStringInRecord( mMasLC, InternalEntityStructure, InternalAttribStructure, szDisplayStatement )
      RETURN 0

        /* end zDERIVED_GET */
   OF   zDERIVED_SET:

        /* end zDERIVED_SET */
   END  /* case */

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: dSD_SubTitleText
//
/////////////////////////////////////////////////////////////////////////////
DERIVED ATTRIBUTE OPERATION
dSD_SubTitleText( VIEW mMasLC BASED ON LOD mMasLC,
                  STRING ( 32 ) InternalEntityStructure,
                  STRING ( 32 ) InternalAttribStructure,
                  SHORT GetOrSetFlag )

   STRING ( 1024 ) szDisplayStatement
   STRING ( 1024 ) szStatementText
   STRING ( 256 )  szTitle

   CASE GetOrSetFlag
   OF   zDERIVED_GET:

      // Storage and Disposal Display Statement Text is a combination of Title and Text.
      szTitle = mMasLC.M_StorageDisposalSubStatement.Title
      szStatementText = mMasLC.M_StorageDisposalSubStatement.Text
      IF szTitle != ""
         szDisplayStatement = szTitle + " --- " + szStatementText
      ELSE
         szDisplayStatement = szStatementText
      END


      // Store the calculated value in the object.
      StoreStringInRecord( mMasLC, InternalEntityStructure, InternalAttribStructure, szDisplayStatement )
      RETURN 0

        /* end zDERIVED_GET */
   OF   zDERIVED_SET:

        /* end zDERIVED_SET */
   END  /* case */

END

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: dSD_StmtTitleKey
//
/////////////////////////////////////////////////////////////////////////////
DERIVED ATTRIBUTE OPERATION
dSD_StmtTitleKey( VIEW mMasLC BASED ON LOD mMasLC,
                  STRING ( 32 ) InternalEntityStructure,
                  STRING ( 32 ) InternalAttribStructure,
                  SHORT GetOrSetFlag )

   STRING ( 1024 ) szStatementTitle

   CASE GetOrSetFlag
   OF   zDERIVED_GET:

      // Storage and Disposal Display Statement Title is a combination of Title/Keywords.
      szStatementTitle = mMasLC.M_StorageDisposalStatement.Title
      IF szStatementTitle != ""
         GenerateKeywordTextIntoString( mMasLC, szStatementTitle,
                                        "M_InsertTextKeywordSD", "M_InsertTextSD", ", " )
      END

      // Store the calculated value in the object.
      StoreStringInRecord( mMasLC, InternalEntityStructure, InternalAttribStructure, szStatementTitle )

        /* end zDERIVED_GET */
   OF   zDERIVED_SET:

        /* end zDERIVED_SET */
   END  /* case */

END

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: dSD_StmtTextKey
//
/////////////////////////////////////////////////////////////////////////////
DERIVED ATTRIBUTE OPERATION
dSD_StmtTextKey( VIEW mMasLC BASED ON LOD mMasLC,
                 STRING ( 32 ) InternalEntityStructure,
                 STRING ( 32 ) InternalAttribStructure,
                 SHORT GetOrSetFlag )

   STRING ( 1024 ) szStatementText

   CASE GetOrSetFlag
   OF   zDERIVED_GET:

      // Storage and Disposal Display Statement Text is a combination of Text/Keywords.
      szStatementText = mMasLC.M_StorageDisposalStatement.Text
      IF szStatementText != ""
         GenerateKeywordTextIntoString( mMasLC, szStatementText,
                                        "M_InsertTextKeywordSD", "M_InsertTextSD", ", " )
      END

      // Store the calculated value in the object.
      StoreStringInRecord( mMasLC, InternalEntityStructure, InternalAttribStructure, szStatementText )

        /* end zDERIVED_GET */
   OF   zDERIVED_SET:

        /* end zDERIVED_SET */
   END  /* case */

END

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: dSD_StmtTitleTxtKey
//
/////////////////////////////////////////////////////////////////////////////
DERIVED ATTRIBUTE OPERATION
dSD_StmtTitleTxtKey( VIEW mMasLC BASED ON LOD mMasLC,
                     STRING ( 32 ) InternalEntityStructure,
                     STRING ( 32 ) InternalAttribStructure,
                     SHORT GetOrSetFlag )

   STRING ( 1024 ) szDisplayStatement
   STRING ( 256 )  szStatementTitle
   STRING ( 1024 ) szStatementText

   CASE GetOrSetFlag
   OF   zDERIVED_GET:

      // Storage and Disposal Display Statement Text is a combination of Title/Text/Keywords.
      szStatementText = mMasLC.M_StorageDisposalStatement.Text
      IF szStatementText != ""
         GenerateKeywordTextIntoString( mMasLC, szStatementText,
                                        "M_InsertTextKeywordSD", "M_InsertTextSD", ", " )
      END

      szStatementTitle = mMasLC.M_StorageDisposalStatement.Title
      IF szStatementTitle != ""
         GenerateKeywordTextIntoString( mMasLC, szStatementTitle,
                                        "M_InsertTextKeywordSD", "M_InsertTextSD", ", " )
         szDisplayStatement = szStatementTitle
         IF szStatementText != ""
            szDisplayStatement = szDisplayStatement + " --- " + szStatementText
         END
      ELSE
         szDisplayStatement = szStatementText
      END

      // Store the calculated value in the object.
      StoreStringInRecord( mMasLC, InternalEntityStructure, InternalAttribStructure, szDisplayStatement )

        /* end zDERIVED_GET */
   OF   zDERIVED_SET:

        /* end zDERIVED_SET */
   END  /* case */

END

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: dSD_SubStmtTitleTxtKey
//
/////////////////////////////////////////////////////////////////////////////
DERIVED ATTRIBUTE OPERATION
dSD_SubStmtTitleTxtKey( VIEW mMasLC BASED ON LOD mMasLC,
                        STRING ( 32 ) InternalEntityStructure,
                        STRING ( 32 ) InternalAttribStructure,
                        SHORT GetOrSetFlag )

   STRING ( 1024 ) szDisplayStatement
   STRING ( 256 )  szStatementTitle
   STRING ( 1024 ) szStatementText

   CASE GetOrSetFlag
   OF   zDERIVED_GET:

      // Storage and Disposal Display Statement Text is a combination of Title/Text/Keywords.
      SetViewToSubobject( mMasLC, "M_StorageDisposalSubStatement" )
      szStatementText = mMasLC.M_StorageDisposalStatement.Text
      IF szStatementText != ""
         GenerateKeywordTextIntoString( mMasLC, szStatementText,
                                        "M_InsertTextKeywordSD", "M_InsertTextSD", ", " )
      END

      szStatementTitle = mMasLC.M_StorageDisposalStatement.Title
      IF szStatementTitle != ""
         GenerateKeywordTextIntoString( mMasLC, szStatementTitle,
                                        "M_InsertTextKeywordSD", "M_InsertTextSD", ", " )
      END

      IF szStatementTitle != ""
         szDisplayStatement = szStatementTitle
         IF szStatementText != ""
            szDisplayStatement = szDisplayStatement + " --- " + szStatementText
         END
      ELSE
         szDisplayStatement = szStatementText
      END

      ResetViewFromSubobject( mMasLC )
      
      // Store the calculated value in the object.
      StoreStringInRecord( mMasLC, InternalEntityStructure, InternalAttribStructure, szDisplayStatement )

        /* end zDERIVED_GET */
   OF   zDERIVED_SET:

        /* end zDERIVED_SET */
   END  /* case */

END

// DonC 6/4/2015 - As far as I know, this operation isn't used.
/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: dTitleText
//
/////////////////////////////////////////////////////////////////////////////
/*
DERIVED ATTRIBUTE OPERATION
dTitleText( VIEW mMasLC BASED ON LOD mMasLC,
            STRING ( 32 ) InternalEntityStructure,
            STRING ( 32 ) InternalAttribStructure,
            SHORT GetOrSetFlag )

   STRING ( 1024 ) szString
   STRING ( 256 ) szTitle

   CASE GetOrSetFlag
   OF   zDERIVED_GET:

      IF mMasLC.M_IngredientsStatement EXISTS
         szTitle = mMasLC.M_StorageDisposalStatement.Title
         IF szTitle != ""
            szString = "<strong>" + szTitle + ": </strong>"
         ELSE
            szString = ""
         END

         szString = szString + mMasLC.M_StorageDisposalStatement.Text
      ELSE
         szString = ""
      END


      // Store the calculated value in the object.
      StoreStringInRecord( mMasLC, InternalEntityStructure, InternalAttribStructure, szString )
      RETURN 0

        // end zDERIVED_GET
   OF   zDERIVED_SET:

        // end zDERIVED_SET
   END  // case

END
*/

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: dCombinedContainerVol
//
/////////////////////////////////////////////////////////////////////////////
DERIVED ATTRIBUTE OPERATION
dCombinedContainerVol( VIEW mMasLC BASED ON LOD mMasLC,
                       STRING ( 32 ) InternalEntityStructure,
                       STRING ( 32 ) InternalAttribStructure,
                       SHORT GetOrSetFlag )

   STRING ( 256 ) szCombinedName
   STRING ( 20 )  szContainerVolume

   CASE GetOrSetFlag
   OF   zDERIVED_GET:

      // Combine each volume name that drives this section.
      szCombinedName = "???"
/*    FOR EACH mMasLC.M_StorageDisposalDrivingConVol
  ???         GetStringFromAttributeByContext( szContainerVolume, mMasLC, "M_StorageDisposalDrivingConVol", "ContainerVolume", "", 20 )
         IF szCombinedName = ""
            szCombinedName = szContainerVolume
         ELSE
            szCombinedName = szCombinedName + ", " + szContainerVolume
         END
      END
*/

      // Store the calculated value in the object.
      StoreStringInRecord( mMasLC, InternalEntityStructure, InternalAttribStructure, szCombinedName )
      RETURN 0

        /* end zDERIVED_GET */
   OF   zDERIVED_SET:

        /* end zDERIVED_SET */
   END  /* case */

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: dUsageNameFootnote
//
/////////////////////////////////////////////////////////////////////////////
DERIVED ATTRIBUTE OPERATION
dUsageNameFootnote( VIEW mMasLC BASED ON LOD mMasLC,
                    STRING ( 32 ) InternalEntityStructure,
                    STRING ( 32 ) InternalAttribStructure,
                    SHORT GetOrSetFlag )

   VIEW mMasLC2 BASED ON LOD mMasLC
   STRING ( 32 )  szEntityName
   STRING ( 100 ) szUsageType
   STRING ( 100 ) szClassification
   STRING ( 100 ) szName
   STRING ( 512 ) szCombinedName
   STRING ( 32 )  szFootnoteNumber
   INTEGER        Count

   CASE GetOrSetFlag
   OF   zDERIVED_GET:

      // For a Claim Usage entity, this is the combined name of Classification and Name.
      // For all others, it is simply the name.
      GetEntityNameFromStructure( InternalEntityStructure, szEntityName )
      GetStringFromAttribute( szUsageType, mMasLC, szEntityName, "UsageType" )
      GetStringFromAttribute( szClassification, mMasLC, szEntityName, "ClaimsClassification" )
      GetStringFromAttribute( szName, mMasLC, szEntityName, "Name" )
      IF szUsageType = "C"
         szCombinedName = szClassification + " - " + szName
      ELSE
         szCombinedName = szName
      END

      // Set Footnote Number, if footnote exists.
      IF mMasLC.M_UsageFootnoteUsed EXISTS
         IF mMasLC.M_UsageFootnoteUsed.ID != ""
            SET CURSOR FIRST mMasLC.M_UsageFootnote WHERE mMasLC.M_UsageFootnote.ID = mMasLC.M_UsageFootnoteUsed.ID
            IF mMasLC.M_UsageFootnote.wFootNoteRelativeNumber = ""
               // Relative numbers haven't been set, so set them here.
               CreateViewFromView( mMasLC2, mMasLC )
               Count = 0
               FOR EACH mMasLC2.M_UsageFootnote
                  Count = Count + 1
                  mMasLC2.M_UsageFootnote.wFootNoteRelativeNumber = Count
               END
               DropView( mMasLC2 )
            END
            szFootnoteNumber = mMasLC.M_UsageFootnote.Symbol
            IF szFootnoteNumber = ""
               szFootnoteNumber = mMasLC.M_UsageFootnote.wFootNoteRelativeNumber
            END
            szCombinedName = szCombinedName + "<sup> " + szFootnoteNumber + "</sup>"
         END
      END
      IF mMasLC.M_InsertTextKeywordUsage EXISTS
         CreateViewFromView( mMasLC2, mMasLC )
         FOR EACH mMasLC2.M_InsertTextKeywordUsage
            // Reuse (borrow) szUsageType and szClassification
            szUsageType = "{" + mMasLC2.M_InsertTextKeywordUsage.Name + "}"
            szClassification = "<b>" + mMasLC2.M_InsertTextUsage.Text + "</b>"
            zSearchAndReplace( szCombinedName, 512, szUsageType, szClassification )
         END
         DropView( mMasLC2 )
      END

      // Store the calculated value in the object.
      StoreStringInRecord( mMasLC, InternalEntityStructure, InternalAttribStructure, szCombinedName )

        /* end zDERIVED_GET */
   OF   zDERIVED_SET:

        /* end zDERIVED_SET */
   END  /* case */

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: dPathogenNameKeyFoot
//
/////////////////////////////////////////////////////////////////////////////
DERIVED ATTRIBUTE OPERATION
dPathogenNameKeyFoot( VIEW mMasLC BASED ON LOD mMasLC,
                      STRING ( 32 ) InternalEntityStructure,
                      STRING ( 32 ) InternalAttribStructure,
                      SHORT GetOrSetFlag )

   VIEW mMasLC2 BASED ON LOD mMasLC
   STRING ( 32 )  szEntityName
   STRING ( 100 ) szUsageType
   STRING ( 100 ) szClassification
   STRING ( 512 ) szCombinedName
   STRING ( 32 )  szFootnoteNumber
   INTEGER        Count

   CASE GetOrSetFlag
   OF   zDERIVED_GET:

      // Combine the Footnote Number as a subscript to the Claim Name, if it exists.
      GetEntityNameFromStructure( InternalEntityStructure, szEntityName )
      GetStringFromAttribute( szUsageType, mMasLC, szEntityName, "UsageType" )
      GetStringFromAttribute( szClassification, mMasLC, szEntityName, "ClaimsClassification" )
      GetStringFromAttribute( szCombinedName, mMasLC, szEntityName, "Name" )

      // Set Footnote Number, if footnote exists.
      IF mMasLC.M_UsageFootnoteUsed EXISTS
         IF mMasLC.M_UsageFootnoteUsed.ID != ""
            SET CURSOR FIRST mMasLC.M_UsageFootnote WHERE mMasLC.M_UsageFootnote.ID = mMasLC.M_UsageFootnoteUsed.ID
            IF mMasLC.M_UsageFootnote.wFootNoteRelativeNumber = ""
               // Relative numbers haven't been set, so set them here.
               CreateViewFromView( mMasLC2, mMasLC )
               Count = 0
               FOR EACH mMasLC2.M_UsageFootnote
                  Count = Count + 1
                  mMasLC2.M_UsageFootnote.wFootNoteRelativeNumber = Count
               END
               DropView( mMasLC2 )
            END
            szFootnoteNumber = mMasLC.M_UsageFootnote.Symbol
            IF szFootnoteNumber = ""
               szFootnoteNumber = mMasLC.M_UsageFootnote.wFootNoteRelativeNumber
            END
            szCombinedName = szCombinedName + "<sup> " + szFootnoteNumber + "</sup>"
         END
      END
      IF mMasLC.M_InsertTextKeywordUsage EXISTS
         CreateViewFromView( mMasLC2, mMasLC )
         FOR EACH mMasLC2.M_InsertTextKeywordUsage
            // Reuse (borrow) szUsageType and szClassification
            szUsageType = "{" + mMasLC2.M_InsertTextKeywordUsage.Name + "}"
            szClassification = "<b>" + mMasLC2.M_InsertTextUsage.Text + "</b>"
            zSearchAndReplace( szCombinedName, 512, szUsageType, szClassification )
         END
         DropView( mMasLC2 )
      END

      // Store the calculated value in the object.
      StoreStringInRecord( mMasLC, InternalEntityStructure, InternalAttribStructure, szCombinedName )

        /* end zDERIVED_GET */
   OF   zDERIVED_SET:

        /* end zDERIVED_SET */
   END  /* case */

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: dUsageClaimClass
//
/////////////////////////////////////////////////////////////////////////////
DERIVED ATTRIBUTE OPERATION
dUsageClaimClass( VIEW mMasLC BASED ON LOD mMasLC,
                  STRING ( 32 ) InternalEntityStructure,
                  STRING ( 32 ) InternalAttribStructure,
                  SHORT GetOrSetFlag )

   STRING ( 32 )  szEntityName
   STRING ( 64  ) szUsageType
   STRING ( 32 )  szClassification

   CASE GetOrSetFlag
   OF   zDERIVED_GET:

      // Combine the UsageType and the ClaimsClassification.
      GetEntityNameFromStructure( InternalEntityStructure, szEntityName )
      GetStringFromAttributeByContext( szUsageType, mMasLC, szEntityName, "UsageType", "FullUsageType", 32 )
      GetStringFromAttribute( szClassification, mMasLC, szEntityName, "ClaimsClassification" )
      IF szClassification != ""
         szUsageType = szUsageType + "/" + szClassification
      END

      // Store the calculated value in the object.
      StoreStringInRecord( mMasLC, InternalEntityStructure, InternalAttribStructure, szUsageType )

        /* end zDERIVED_GET */
   OF   zDERIVED_SET:

        /* end zDERIVED_SET */
   END  /* case */

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: dMarketUsgNameFootnote
//
/////////////////////////////////////////////////////////////////////////////
DERIVED ATTRIBUTE OPERATION
dMarketUsgNameFootnote( VIEW mMasLC BASED ON LOD mMasLC,
                        STRING ( 32 ) InternalEntityStructure,
                        STRING ( 32 ) InternalAttribStructure,
                        SHORT GetOrSetFlag )

   VIEW mMasLC2 BASED ON LOD mMasLC
   STRING ( 32 )  szEntityName
   STRING ( 100 ) szUsageType
   STRING ( 100 ) szClassification
   STRING ( 512 ) szCombinedName
   STRING ( 32 )  szFootnoteNumber
   INTEGER        Count

   CASE GetOrSetFlag
   OF   zDERIVED_GET:

      // Combine the Footnote Number as a subscript to the Claim Name, if it exists.
      GetEntityNameFromStructure( InternalEntityStructure, szEntityName )
      GetStringFromAttribute( szUsageType, mMasLC, szEntityName, "UsageType" )
      GetStringFromAttribute( szClassification, mMasLC, szEntityName, "ClaimsClassification" )
      GetStringFromAttribute( szCombinedName, mMasLC, szEntityName, "Name" )

      // Set Footnote Number, if footnote exists.
      IF mMasLC.M_UsageFootnoteUsed EXISTS
         IF mMasLC.M_UsageFootnoteUsed.ID != ""
            SET CURSOR FIRST mMasLC.M_UsageFootnote WHERE mMasLC.M_UsageFootnote.ID = mMasLC.M_UsageFootnoteMarketUsed.ID
            IF mMasLC.M_UsageFootnote.wFootNoteRelativeNumber = ""
               // Relative numbers haven't been set, so set them here.
               CreateViewFromView( mMasLC2, mMasLC )
               Count = 0
               FOR EACH mMasLC2.M_UsageFootnote
                  Count = Count + 1
                  mMasLC2.M_UsageFootnote.wFootNoteRelativeNumber = Count
               END
               DropView( mMasLC2 )
            END
            szFootnoteNumber = mMasLC.M_UsageFootnote.Symbol
            IF szFootnoteNumber = ""
               szFootnoteNumber = mMasLC.M_UsageFootnote.wFootNoteRelativeNumber
            END
            szCombinedName = szCombinedName + "<sup> " + szFootnoteNumber + "</sup>"
         END
      END
      IF mMasLC.M_InsertTextKeywordMarketUsage EXISTS
         CreateViewFromView( mMasLC2, mMasLC )
         FOR EACH mMasLC2.M_InsertTextKeywordMarketUsage
            // Reuse (borrow) szUsageType and szClassification
            szUsageType = "{" + mMasLC2.M_InsertTextKeywordMarketUsage.Name + "}"
            szClassification = "<b>" + mMasLC2.M_InsertTextMarketUsage.Text + "</b>"
            zSearchAndReplace( szCombinedName, 512, szUsageType, szClassification )
         END
         DropView( mMasLC2 )
      END

      // Store the calculated value in the object.
      StoreStringInRecord( mMasLC, InternalEntityStructure, InternalAttribStructure, szCombinedName )

        /* end zDERIVED_GET */
   OF   zDERIVED_SET:

        /* end zDERIVED_SET */
   END  /* case */

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: dGenStmtTitleText
//
/////////////////////////////////////////////////////////////////////////////
DERIVED ATTRIBUTE OPERATION
dGenStmtTitleText( VIEW mMasLC BASED ON LOD mMasLC,
                   STRING ( 32 ) InternalEntityStructure,
                   STRING ( 32 ) InternalAttribStructure,
                   SHORT GetOrSetFlag )

   VIEW mMasLC2 BASED ON LOD mMasLC
   STRING ( 1024 ) szCombinedText

   CASE GetOrSetFlag
   OF   zDERIVED_GET:

      // If Combined and a Title exists, concatenate Title and Text.  Otherwise, just show text.
      // Bold Title and Text as specified.
      IF mMasLC.M_GeneralSection.Combined = "Y" AND mMasLC.M_GeneralStatement.Title != ""
         IF mMasLC.M_GeneralSection.BoldTitle = "Y"
            szCombinedText = "<b>" + mMasLC.M_GeneralStatement.Title + "</b>"
         ELSE
            szCombinedText = mMasLC.M_GeneralStatement.Title
         END
      END
      IF mMasLC.M_GeneralSection.BoldText = "Y"
         szCombinedText = szCombinedText + "<b> " + mMasLC.M_GeneralStatement.Text + "</b>"
      ELSE
         szCombinedText = szCombinedText + " " + mMasLC.M_GeneralStatement.Text
      END

      // Store the calculated value in the object.
      StoreStringInRecord( mMasLC, InternalEntityStructure, InternalAttribStructure, szCombinedText )

        /* end zDERIVED_GET */
   OF   zDERIVED_SET:

        /* end zDERIVED_SET */
   END  /* case */

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: dUsageKeywordStmtText
//
/////////////////////////////////////////////////////////////////////////////
DERIVED ATTRIBUTE OPERATION
dUsageKeywordStmtText( VIEW mMasLC BASED ON LOD mMasLC,
                       STRING ( 32 ) InternalEntityStructure,
                       STRING ( 32 ) InternalAttribStructure,
                       SHORT GetOrSetFlag )

   STRING ( 1024 ) szGeneratedString

   CASE GetOrSetFlag
   OF   zDERIVED_GET:

      // Expand the current Text attribute by replacing embedded Keywords with the Keyword
      // values in the M_InsertText subentities.
      szGeneratedString = mMasLC.DisplayKeywordText.Text
      IF szGeneratedString != ""
         GenerateKeywordTextIntoString( mMasLC, szGeneratedString,
                                        "M_InsertTextKeyword", "M_InsertText", ", " )
      END

      // Store the resulting value in the object.
      StoreStringInRecord( mMasLC, InternalEntityStructure, InternalAttribStructure, szGeneratedString )
      RETURN 0

        /* end zDERIVED_GET */
   OF   zDERIVED_SET:

        /* end zDERIVED_SET */
   END  /* case */

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: dFullKeywordTitleText
//
/////////////////////////////////////////////////////////////////////////////
DERIVED ATTRIBUTE OPERATION
dFullKeywordTitleText( VIEW mMasLC BASED ON LOD mMasLC,
                       STRING ( 32 ) InternalEntityStructure,
                       STRING ( 32 ) InternalAttribStructure,
                       SHORT GetOrSetFlag )

   STRING ( 1024 ) szGeneratedString

   CASE GetOrSetFlag
   OF   zDERIVED_GET:

      // Expand the current Title attribute by replacing inbedded Keywords with the Keyword
      // values in the M_InsertText subentities.
      szGeneratedString = mMasLC.DisplayKeywordText.Title
      IF szGeneratedString != ""
         GenerateKeywordTextIntoString( mMasLC, szGeneratedString,
                                        "M_InsertTextKeyword", "M_InsertText", ", " )
      END

      // Store the resulting value in the object.
      StoreStringInRecord( mMasLC, InternalEntityStructure, InternalAttribStructure, szGeneratedString )
      RETURN 0

        /* end zDERIVED_GET */
   OF   zDERIVED_SET:

        /* end zDERIVED_SET */
   END  /* case */

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: dMarketingKeywordText
//
/////////////////////////////////////////////////////////////////////////////
DERIVED ATTRIBUTE OPERATION
dMarketingKeywordText( VIEW mMasLC BASED ON LOD mMasLC,
                       STRING ( 32 ) InternalEntityStructure,
                       STRING ( 32 ) InternalAttribStructure,
                       SHORT GetOrSetFlag )

   STRING ( 1024 ) szKeyValue

   CASE GetOrSetFlag
   OF   zDERIVED_GET:

      // Concatenate all the Keyword values for a Marketing Keyword entry.
      szKeyValue = ""
      FOR EACH mMasLC.M_InsertTextMarketing
         IF szKeyValue = ""
            szKeyValue = "<b>" + mMasLC.M_InsertTextMarketing.Text
         ELSE
            szKeyValue = szKeyValue + ", " + mMasLC.M_InsertTextMarketing.Text
         END
      END
      IF szKeyValue != ""
         szKeyValue = szKeyValue  + "</b>"
      END

      // Store the resulting value in the object.
      StoreStringInRecord( mMasLC, InternalEntityStructure, InternalAttribStructure, szKeyValue )
      RETURN 0

        /* end zDERIVED_GET */
   OF   zDERIVED_SET:

        /* end zDERIVED_SET */
   END  /* case */

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: dDU_KeywordText
//
/////////////////////////////////////////////////////////////////////////////
DERIVED ATTRIBUTE OPERATION
dDU_KeywordText( VIEW mMasLC BASED ON LOD mMasLC,
                 STRING ( 32 ) InternalEntityStructure,
                 STRING ( 32 ) InternalAttribStructure,
                 SHORT GetOrSetFlag )

   STRING ( 1024 ) szKeyValue

   CASE GetOrSetFlag
   OF   zDERIVED_GET:

      // Concatenate all the Keyword values for a Directions For Use Keyword entry.
      szKeyValue = ""
      FOR EACH mMasLC.M_InsertTextDU
         IF szKeyValue = ""
            szKeyValue = mMasLC.M_InsertTextDU.Text
         ELSE
            szKeyValue = szKeyValue + ", " + mMasLC.M_InsertTextDU.Text
         END
      END

      // Store the resulting value in the object.
      StoreStringInRecord( mMasLC, InternalEntityStructure, InternalAttribStructure, szKeyValue )
      RETURN 0

        /* end zDERIVED_GET */
   OF   zDERIVED_SET:

        /* end zDERIVED_SET */
   END  /* case */

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: dSD_KeywordText
//
/////////////////////////////////////////////////////////////////////////////
DERIVED ATTRIBUTE OPERATION
dSD_KeywordText( VIEW mMasLC BASED ON LOD mMasLC,
                 STRING ( 32 ) InternalEntityStructure,
                 STRING ( 32 ) InternalAttribStructure,
                 SHORT GetOrSetFlag )

   STRING ( 1024 ) szGeneratedString

   CASE GetOrSetFlag
   OF   zDERIVED_GET:

      // Concatenate all the Keyword values for a Storage & Disposal Keyword entry.
      szGeneratedString = ""
      FOR EACH mMasLC.M_InsertTextSD
         IF szGeneratedString = ""
            szGeneratedString = mMasLC.M_InsertTextSD.Text
         ELSE
            szGeneratedString = szGeneratedString + ", " + mMasLC.M_InsertTextSD.Text
         END
      END

      // Store the resulting value in the object.
      StoreStringInRecord( mMasLC, InternalEntityStructure, InternalAttribStructure, szGeneratedString )
      RETURN 0

        /* end zDERIVED_GET */
   OF   zDERIVED_SET:

        /* end zDERIVED_SET */
   END  /* case */

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: dGeneral_KeywordText
//
/////////////////////////////////////////////////////////////////////////////
DERIVED ATTRIBUTE OPERATION
dGeneralKeywordText( VIEW mMasLC BASED ON LOD mMasLC,
                     STRING ( 32 ) InternalEntityStructure,
                     STRING ( 32 ) InternalAttribStructure,
                     SHORT GetOrSetFlag )

   STRING ( 1024 ) szGeneratedString

   CASE GetOrSetFlag
   OF   zDERIVED_GET:

      // Concatenate all the Keyword values for a Marketing Keyword entry.
      szGeneratedString = ""
      FOR EACH mMasLC.M_InsertTextGeneral
         IF szGeneratedString = ""
            szGeneratedString = mMasLC.M_InsertTextGeneral.Text
         ELSE
            szGeneratedString = szGeneratedString + ", " + mMasLC.M_InsertTextGeneral.Text
         END
      END

      // Store the resulting value in the object.
      StoreStringInRecord( mMasLC, InternalEntityStructure, InternalAttribStructure, szGeneratedString )
      RETURN 0

        /* end zDERIVED_GET */
   OF   zDERIVED_SET:

        /* end zDERIVED_SET */
   END  /* case */

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: dMarketingTitleKeyword
//
/////////////////////////////////////////////////////////////////////////////
/*
DERIVED ATTRIBUTE OPERATION
dMarketingTitleKeyword( VIEW mMasLC BASED ON LOD mMasLC,
                        STRING ( 32 ) InternalEntityStructure,
                        STRING ( 32 ) InternalAttribStructure,
                        SHORT GetOrSetFlag )

   VIEW mMasLC2 BASED ON LOD mMasLC
   STRING ( 32 )  szEntityName
   STRING ( 100 ) szKeyword
   STRING ( 1024 ) szKeyValue
   STRING ( 1024 ) szCombinedName

   CASE GetOrSetFlag
   OF   zDERIVED_GET:

      // For a Marketing Statement entity, this is the combined name of Title and any keyword(s).
      GetEntityNameFromStructure( InternalEntityStructure, szEntityName )
      GetStringFromAttribute( szCombinedName, mMasLC, szEntityName, "Title" )

      IF mMasLC.M_InsertTextKeywordMarketing EXISTS
         CreateViewFromView( mMasLC2, mMasLC )
         FOR EACH mMasLC2.M_InsertTextKeywordMarketing
            szKeyword = "{(" + mMasLC2.M_InsertTextKeywordMarketing.Name  + ")}"

            // Concatenate all the Keyword values for a Marketing Keyword entry.
            szKeyValue = ""
            FOR EACH mMasLC2.M_InsertTextMarketing
               IF szKeyValue = ""
                  szKeyValue = "{<b>(" + mMasLC2.M_InsertTextMarketing.Text
               ELSE
                  szKeyValue = szKeyValue + ", " + mMasLC2.M_InsertTextMarketing.Text
               END
            END
            IF szKeyValue != ""
               szKeyValue = szKeyValue  + ")</b>}"
            END
         // TraceLineS( "Searching Title: ", szCombinedName )
         // TraceLineS( "      for: ", szKeyword )
         // TraceLineS( "  Replace: ", szKeyValue )
            zSearchAndReplace( szCombinedName, 1024, szKeyword, szKeyValue )
         END
         DropView( mMasLC2 )
      END

      // Store the calculated value in the object.
      StoreStringInRecord( mMasLC, InternalEntityStructure, InternalAttribStructure, szCombinedName )

        // end zDERIVED_GET
   OF   zDERIVED_SET:

        // end zDERIVED_SET
   END  // case

END
*/

DERIVED ATTRIBUTE OPERATION
dMarketingTitleKeyword( VIEW mMasLC BASED ON LOD mMasLC,
                        STRING ( 32 ) InternalEntityStructure,
                        STRING ( 32 ) InternalAttribStructure,
                        SHORT GetOrSetFlag )

   STRING ( 32 )  szEntityName
   STRING ( 1024 ) szDisplayStatement

   CASE GetOrSetFlag
   OF   zDERIVED_GET:

      // For a Marketing Statement entity, this is the combined name of Text and any keyword(s).
      GetEntityNameFromStructure( InternalEntityStructure, szEntityName )
      GetStringFromAttribute( szDisplayStatement, mMasLC, szEntityName, "Title" )

      IF szDisplayStatement != ""
         GenerateKeywordTextIntoString( mMasLC, szDisplayStatement,
                                        "M_InsertTextKeywordMarketing", "M_InsertTextMarketing", ", " )
      END
      
      // Store the calculated value in the object.
      StoreStringInRecord( mMasLC, InternalEntityStructure, InternalAttribStructure, szDisplayStatement )
      RETURN 0

        // end zDERIVED_GET
   OF   zDERIVED_SET:

        // end zDERIVED_SET
   END  // case

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: dMarketingTextKeyword
//
/////////////////////////////////////////////////////////////////////////////
/*
DERIVED ATTRIBUTE OPERATION
dMarketingTextKeyword( VIEW mMasLC BASED ON LOD mMasLC,
                       STRING ( 32 ) InternalEntityStructure,
                       STRING ( 32 ) InternalAttribStructure,
                       SHORT GetOrSetFlag )

   VIEW mMasLC2 BASED ON LOD mMasLC
   STRING ( 32 )  szEntityName
   STRING ( 100 ) szKeyword
   STRING ( 1024 ) szKeyValue
   STRING ( 1024 ) szCombinedName

   CASE GetOrSetFlag
   OF   zDERIVED_GET:

      // For a Marketing Statement entity, this is the combined name of Text and any keyword(s).
      GetEntityNameFromStructure( InternalEntityStructure, szEntityName )
      GetStringFromAttribute( szCombinedName, mMasLC, szEntityName, "Text" )

      IF mMasLC.M_InsertTextKeywordMarketing EXISTS
         CreateViewFromView( mMasLC2, mMasLC )
         FOR EACH mMasLC2.M_InsertTextKeywordMarketing
            szKeyword = "{(" + mMasLC2.M_InsertTextKeywordMarketing.Name  + ")}"

            // Concatenate all the Keyword values for a Marketing Keyword entry.
            szKeyValue = ""
            FOR EACH mMasLC2.M_InsertTextMarketing
               IF szKeyValue = ""
                  szKeyValue = "{<b>(" + mMasLC2.M_InsertTextMarketing.Text
               ELSE
                  szKeyValue = szKeyValue + ", " + mMasLC2.M_InsertTextMarketing.Text
               END
            END
            IF szKeyValue != ""
               szKeyValue = szKeyValue  + ")</b>}"
            END
         // TraceLineS( "Searching Text: ", szCombinedName )
         // TraceLineS( "      for: ", szKeyword )
         // TraceLineS( "  Replace: ", szKeyValue )
            zSearchAndReplace( szCombinedName, 1024, szKeyword, szKeyValue )
         END
         DropView( mMasLC2 )
      END

      // Store the calculated value in the object.
      StoreStringInRecord( mMasLC, InternalEntityStructure, InternalAttribStructure, szCombinedName )

        // end zDERIVED_GET
   OF   zDERIVED_SET:

        // end zDERIVED_SET
   END  // case

END
*/

DERIVED ATTRIBUTE OPERATION
dMarketingTextKeyword( VIEW mMasLC BASED ON LOD mMasLC,
                       STRING ( 32 ) InternalEntityStructure,
                       STRING ( 32 ) InternalAttribStructure,
                       SHORT GetOrSetFlag )

   STRING ( 32 )  szEntityName
   STRING ( 1024 ) szDisplayStatement

   CASE GetOrSetFlag
   OF   zDERIVED_GET:

      // For a Marketing Statement entity, this is the combined name of Text and any keyword(s).
      GetEntityNameFromStructure( InternalEntityStructure, szEntityName )
      GetStringFromAttribute( szDisplayStatement, mMasLC, szEntityName, "Text" )

      IF szDisplayStatement != ""
         GenerateKeywordTextIntoString( mMasLC, szDisplayStatement,
                                        "M_InsertTextKeywordMarketing", "M_InsertTextMarketing", ", " )
      END
      
      // Store the calculated value in the object.
      StoreStringInRecord( mMasLC, InternalEntityStructure, InternalAttribStructure, szDisplayStatement )
      RETURN 0

        // end zDERIVED_GET
   OF   zDERIVED_SET:

        // end zDERIVED_SET
   END  // case

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: dMarketTitleTextKey
//
/////////////////////////////////////////////////////////////////////////////
/*
DERIVED ATTRIBUTE OPERATION
dMarketTitleTextKey( VIEW mMasLC BASED ON LOD mMasLC,
                     STRING ( 32 ) InternalEntityStructure,
                     STRING ( 32 ) InternalAttribStructure,
                     SHORT GetOrSetFlag )

   VIEW mMasLC2 BASED ON LOD mMasLC
   STRING ( 32 )  szEntityName
   STRING ( 100 ) szKeyword
   STRING ( 1024 ) szKeyValue
   STRING ( 1024 ) szTitle
   STRING ( 1024 ) szText
   STRING ( 2048 ) szGeneratedString

   CASE GetOrSetFlag
   OF   zDERIVED_GET:

      // Concatenate a string combining Title and Text, with Title made bold.
      // Keyword substitutions are incorporated.
      szTitle = mMasLC.M_MarketingStatement.Title
      szText = mMasLC.M_MarketingStatement.Text

      IF mMasLC.M_InsertTextKeywordMarketing EXISTS
         CreateViewFromView( mMasLC2, mMasLC )
         FOR EACH mMasLC2.M_InsertTextKeywordMarketing
            szKeyword = "{(" + mMasLC2.M_InsertTextKeywordMarketing.Name  + ")}"

            // Concatenate all the Keyword values for a Marketing Keyword entry.
            szKeyValue = ""
            FOR EACH mMasLC2.M_InsertTextMarketing
               IF szKeyValue = ""
                  szKeyValue = "{(" + mMasLC2.M_InsertTextMarketing.Text
               ELSE
                  szKeyValue = szKeyValue + ", " + mMasLC2.M_InsertTextMarketing.Text
               END
            END
            IF szKeyValue != ""
               szKeyValue = szKeyValue  + ")}"
            END

            zSearchAndReplace( szTitle, 1024, szKeyword, szKeyValue )
            zSearchAndReplace( szText, 1024, szKeyword, szKeyValue )
         END
         DropView( mMasLC2 )
      END
      szGeneratedString = "<b>" + szTitle + "</b>  " + szText

      // Store the calculated value in the object.
      StoreStringInRecord( mMasLC, InternalEntityStructure, InternalAttribStructure, szGeneratedString )

        // end zDERIVED_GET
   OF   zDERIVED_SET:

        // end zDERIVED_SET
   END  // case

END
*/

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: dMarketTitleTextKey
//
/////////////////////////////////////////////////////////////////////////////
DERIVED ATTRIBUTE OPERATION
dMarketTitleTextKey( VIEW mMasLC BASED ON LOD mMasLC,
                     STRING ( 32 ) InternalEntityStructure,
                     STRING ( 32 ) InternalAttribStructure,
                     SHORT GetOrSetFlag )

   STRING ( 1024 ) szTitle
   STRING ( 1024 ) szText
   STRING ( 2048 ) szDisplayStatement

   CASE GetOrSetFlag
   OF   zDERIVED_GET:

      // Concatenate a string combining Title and Text, with Title made bold.
      // Keyword substitutions are incorporated.
      szTitle = mMasLC.M_MarketingStatement.Title
      szText = mMasLC.M_MarketingStatement.Text

      IF szTitle != ""
         GenerateKeywordTextIntoString( mMasLC, szTitle,
                                        "M_InsertTextKeywordMarketing", "M_InsertTextMarketing", ", " )
         szDisplayStatement = "<b>" + szTitle + "</b>"
      END
      IF szText != ""
         GenerateKeywordTextIntoString( mMasLC, szText,
                                        "M_InsertTextKeywordMarketing", "M_InsertTextMarketing", ", " )
         szDisplayStatement = szDisplayStatement + "  " + szText
      END
      
      // Store the calculated value in the object.
      StoreStringInRecord( mMasLC, InternalEntityStructure, InternalAttribStructure, szDisplayStatement )
      RETURN 0

        // end zDERIVED_GET
   OF   zDERIVED_SET:

        // end zDERIVED_SET
   END  // case

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: BuildCompEntsWO_Usage
//
/////////////////////////////////////////////////////////////////////////////
TRANSFORMATION OPERATION
BuildCompEntsWO_Usage( VIEW mMasLC BASED ON LOD mMasLC )

   // Build Composite entries without Usage Statements.

   // Go to build Composite.
   BuildFullCompEntries( mMasLC )

   // Remove Usage entries.
   FOR EACH mMasLC.CompositeComponentList
      IF mMasLC.CompositeComponentList.DisplayType = "MarketingUsage" OR mMasLC.CompositeComponentList.DisplayType = "DirUseUsage"
         DELETE ENTITY mMasLC.CompositeComponentList NONE
      END
   END

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: BuildCompositeEntries
//
/////////////////////////////////////////////////////////////////////////////
TRANSFORMATION OPERATION
BuildCompositeEntries( VIEW mMasLC BASED ON LOD mMasLC )

   STRING ( 100 ) szCompositeLocation
   STRING ( 105 ) szDisplayValue
   STRING ( 100 ) szOriginalDisplayValue
   STRING ( 20 )  szUsageType
   INTEGER        MaxDisplayLength
   INTEGER        OriginalStringLength
   INTEGER        Count

   // Build Marketing Section and Statement components.
   FOR EACH mMasLC.M_MarketingSection
      CREATE ENTITY mMasLC.CompositeComponentList
      mMasLC.CompositeComponentList.Type              = "M_MarketingSection"
      mMasLC.CompositeComponentList.SelectLevel       = 1
      mMasLC.CompositeComponentList.DisplayType       = "Marketing"
      mMasLC.CompositeComponentList.DisplayTypeIndent = "Marketing"
      mMasLC.CompositeComponentList.OriginalTypeID    = mMasLC.M_MarketingSection.ID
      mMasLC.CompositeComponentList.Name              = mMasLC.M_MarketingSection.Name
      TraceLineS( "BuildComposite Name: ", mMasLC.M_MarketingSection.Name )
      IF mMasLC.M_MarketingSection.Title != ""
         IF mMasLC.M_MarketingSection.Name = ""
            mMasLC.CompositeComponentList.DisplayValue = mMasLC.M_MarketingSection.Title
         ELSE
            mMasLC.CompositeComponentList.DisplayValue = mMasLC.M_MarketingSection.Name + " - " +
                                                         mMasLC.M_MarketingSection.Title
         END
      ELSE
         mMasLC.CompositeComponentList.DisplayValue = mMasLC.M_MarketingSection.Name
      END
      mMasLC.CompositeComponentList.Title             = mMasLC.M_MarketingSection.Title
      mMasLC.CompositeComponentList.Value             = mMasLC.CompositeComponentList.DisplayValue

      FOR EACH mMasLC.M_MarketingStatement
         CREATE ENTITY mMasLC.CompositeComponentList
         mMasLC.CompositeComponentList.Type              = "M_MarketingStatement"
         mMasLC.CompositeComponentList.SelectLevel       = 2
         mMasLC.CompositeComponentList.DisplayType       = "Statement"
         mMasLC.CompositeComponentList.DisplayTypeIndent = "...Statement"
         mMasLC.CompositeComponentList.OriginalTypeID    = mMasLC.M_MarketingStatement.ID
         mMasLC.CompositeComponentList.Title             = mMasLC.M_MarketingStatement.Title
         mMasLC.CompositeComponentList.Value             = mMasLC.M_MarketingStatement.Text

         szOriginalDisplayValue = mMasLC.M_MarketingStatement.Text
         GetAttributeLength( OriginalStringLength, mMasLC, "M_MarketingStatement", "Text" )
         IF MaxDisplayLength < OriginalStringLength
            szDisplayValue = szOriginalDisplayValue + "....."
         ELSE
            szDisplayValue = szOriginalDisplayValue
         END
         mMasLC.CompositeComponentList.DisplayValue = szDisplayValue
      END
   END

   // Build the flat display of all components subobject.
   /*MaxDisplayLength = 100

   // First clear any current entries.
   FOR EACH mMasLC.CompositeComponentList
      DELETE ENTITY mMasLC.CompositeComponentList NONE
   END

   // General Section and Statements.
   FOR EACH mMasLC.M_GeneralSection
      CREATE ENTITY mMasLC.CompositeComponentList
      mMasLC.CompositeComponentList.Type              = "M_GeneralSection"
      mMasLC.CompositeComponentList.SelectLevel       = 1
      mMasLC.CompositeComponentList.DisplayType       = "General"
      mMasLC.CompositeComponentList.DisplayTypeIndent = "General"
      mMasLC.CompositeComponentList.OriginalTypeID    = mMasLC.M_GeneralSection.ID
      mMasLC.CompositeComponentList.DisplayValue      = mMasLC.M_GeneralSection.Title
      mMasLC.CompositeComponentList.Title             = mMasLC.M_GeneralSection.Title
      mMasLC.CompositeComponentList.Value             = mMasLC.CompositeComponentList.DisplayValue

      FOR EACH mMasLC.M_GeneralStatement
         CREATE ENTITY mMasLC.CompositeComponentList
         mMasLC.CompositeComponentList.Type              = "M_GeneralStatement"
         mMasLC.CompositeComponentList.SelectLevel       = 2
         mMasLC.CompositeComponentList.DisplayType       = "Statement"
         mMasLC.CompositeComponentList.DisplayTypeIndent = "...Statement"
         mMasLC.CompositeComponentList.OriginalTypeID    = mMasLC.M_GeneralStatement.ID
         mMasLC.CompositeComponentList.Title             = mMasLC.M_GeneralStatement.Title
         mMasLC.CompositeComponentList.Value             = mMasLC.M_GeneralStatement.Text

         szOriginalDisplayValue = mMasLC.M_GeneralStatement.Text
         GetAttributeLength( OriginalStringLength, mMasLC, "M_GeneralStatement", "Text" )
         IF MaxDisplayLength < OriginalStringLength
            szDisplayValue = szOriginalDisplayValue + "....."
         ELSE
            szDisplayValue = szOriginalDisplayValue
         END
         mMasLC.CompositeComponentList.DisplayValue   = szDisplayValue
      END
   END

   // Ingredients Section and Statements.
   FOR EACH mMasLC.M_IngredientsSection
      CREATE ENTITY mMasLC.CompositeComponentList
      mMasLC.CompositeComponentList.Type              = "M_IngredientsSection"
      mMasLC.CompositeComponentList.SelectLevel       = 1
      mMasLC.CompositeComponentList.DisplayType       = "Ingredients"
      mMasLC.CompositeComponentList.DisplayTypeIndent = "Ingredients"
      mMasLC.CompositeComponentList.OriginalTypeID    = mMasLC.M_IngredientsSection.ID
      mMasLC.CompositeComponentList.DisplayValue      = mMasLC.M_IngredientsSection.ActiveTitle
      mMasLC.CompositeComponentList.Value             = mMasLC.CompositeComponentList.DisplayValue

      FOR EACH mMasLC.M_IngredientsStatement
         CREATE ENTITY mMasLC.CompositeComponentList
         mMasLC.CompositeComponentList.Type              = "M_IngredientsStatement"
         mMasLC.CompositeComponentList.SelectLevel       = 2
         mMasLC.CompositeComponentList.DisplayType       = "Statement"
         mMasLC.CompositeComponentList.DisplayTypeIndent = "...Statement"
         mMasLC.CompositeComponentList.OriginalTypeID    = mMasLC.M_IngredientsStatement.ID
         mMasLC.CompositeComponentList.DisplayValue      = mMasLC.M_IngredientsStatement.ChemicalName
         mMasLC.CompositeComponentList.Value             = mMasLC.M_IngredientsStatement.ChemicalName
      END
   END

   // StorageDisposal Section and Statements.
   FOR EACH mMasLC.M_StorageDisposalSection
      CREATE ENTITY mMasLC.CompositeComponentList
      mMasLC.CompositeComponentList.Type              = "M_StorageDisposalSection"
      mMasLC.CompositeComponentList.SelectLevel       = 1
      mMasLC.CompositeComponentList.DisplayType       = "Storage and Disposal"
      mMasLC.CompositeComponentList.DisplayTypeIndent = "Storage and Disposal"
      mMasLC.CompositeComponentList.OriginalTypeID    = mMasLC.M_StorageDisposalSection.ID
      mMasLC.CompositeComponentList.DisplayValue      = mMasLC.M_StorageDisposalSection.Title
      mMasLC.CompositeComponentList.Title             = mMasLC.M_StorageDisposalSection.Title
      mMasLC.CompositeComponentList.Value             = mMasLC.CompositeComponentList.DisplayValue

      FOR EACH mMasLC.M_StorageDisposalStatement
         CREATE ENTITY mMasLC.CompositeComponentList
         mMasLC.CompositeComponentList.Type              = "M_StorageDisposalStatement"
         mMasLC.CompositeComponentList.SelectLevel       = 2
         mMasLC.CompositeComponentList.DisplayType       = "Statement"
         mMasLC.CompositeComponentList.DisplayTypeIndent = "...Statement"
         mMasLC.CompositeComponentList.OriginalTypeID    = mMasLC.M_StorageDisposalStatement.ID
         mMasLC.CompositeComponentList.Title             = mMasLC.M_StorageDisposalStatement.Title
         mMasLC.CompositeComponentList.Value             = mMasLC.M_StorageDisposalStatement.Text

         szOriginalDisplayValue = mMasLC.M_StorageDisposalStatement.Text
         GetAttributeLength( OriginalStringLength, mMasLC, "M_StorageDisposalStatement", "Text" )
         IF MaxDisplayLength < OriginalStringLength
            szDisplayValue = szOriginalDisplayValue + "....."
         ELSE
            szDisplayValue = szOriginalDisplayValue
         END
         mMasLC.CompositeComponentList.DisplayValue   = szDisplayValue
      END
   END

   // DirectionsForUse Section and Statements.
   FOR EACH mMasLC.M_DirectionsForUseSection
      CREATE ENTITY mMasLC.CompositeComponentList
      mMasLC.CompositeComponentList.Type              = "M_DirectionsForUseSection"
      mMasLC.CompositeComponentList.SelectLevel       = 1
      mMasLC.CompositeComponentList.DisplayType       = "Directions For Use"
      mMasLC.CompositeComponentList.DisplayTypeIndent = "Directions For Use"
      mMasLC.CompositeComponentList.OriginalTypeID    = mMasLC.M_DirectionsForUseSection.ID
      IF mMasLC.M_DirectionsForUseSection.Title != ""
         IF mMasLC.M_DirectionsForUseSection.Name = ""
            mMasLC.CompositeComponentList.DisplayValue = mMasLC.M_DirectionsForUseSection.Title
         ELSE
            mMasLC.CompositeComponentList.DisplayValue = mMasLC.M_DirectionsForUseSection.Name + " - " +
                                                         mMasLC.M_DirectionsForUseSection.Title
         END
      ELSE
         mMasLC.CompositeComponentList.DisplayValue = mMasLC.M_DirectionsForUseSection.Name
      END
      mMasLC.CompositeComponentList.Title             = mMasLC.M_DirectionsForUseSection.Title
      mMasLC.CompositeComponentList.Value             = mMasLC.CompositeComponentList.DisplayValue

      FOR EACH mMasLC.M_DirectionsForUseStatement
         CREATE ENTITY mMasLC.CompositeComponentList
         mMasLC.CompositeComponentList.Type              = "M_DirectionsForUseStatement"
         mMasLC.CompositeComponentList.SelectLevel       = 2
         mMasLC.CompositeComponentList.DisplayType       = "Statement"
         mMasLC.CompositeComponentList.DisplayTypeIndent = "...Statement"
         mMasLC.CompositeComponentList.OriginalTypeID    = mMasLC.M_DirectionsForUseStatement.ID
         mMasLC.CompositeComponentList.Title             = mMasLC.M_DirectionsForUseStatement.Title
         mMasLC.CompositeComponentList.Value             = mMasLC.M_DirectionsForUseStatement.Text

         szOriginalDisplayValue = mMasLC.M_DirectionsForUseStatement.Text
         GetAttributeLength( OriginalStringLength, mMasLC, "M_DirectionsForUseStatement", "Text" )
         IF MaxDisplayLength < OriginalStringLength
            szDisplayValue = szOriginalDisplayValue + "....."
         ELSE
            szDisplayValue = szOriginalDisplayValue
         END
         mMasLC.CompositeComponentList.DisplayValue   = szDisplayValue
      END

      // Add any Usage entries.
      // First sort by Usage Type, but keeping the entries in their original order otherwise.
      Count = 0
      FOR EACH mMasLC.M_DirectionsUsageOrdering
         Count = Count + 1
         mMasLC.M_DirectionsUsageOrdering.wSortOrder = Count
      END
      OrderEntityForView( mMasLC, "M_DirectionsUsageOrdering", "M_DirectionsUsage.UsageType A wSortOrder A" )
      FOR EACH mMasLC.M_DirectionsUsageOrdering
         CREATE ENTITY mMasLC.CompositeComponentList
         GetStringFromAttributeByContext( szUsageType, mMasLC, "M_DirectionsUsage", "UsageType", "FullUsageType", 20 )
         mMasLC.CompositeComponentList.Type              = "M_DirectionsUsageOrdering"
         mMasLC.CompositeComponentList.SelectLevel       = 3
         mMasLC.CompositeComponentList.DisplayType       = "DirUseUsage"
         mMasLC.CompositeComponentList.DisplayTypeIndent = "...DU " + szUsageType
         mMasLC.CompositeComponentList.OriginalTypeID    = mMasLC.M_DirectionsUsage.ID
         mMasLC.CompositeComponentList.Value             = mMasLC.M_DirectionsUsage.Name
         mMasLC.CompositeComponentList.DisplayValue      = mMasLC.M_DirectionsUsage.Name
      END
   END

   // Marketing Section and Statements.
   FOR EACH mMasLC.M_MarketingSection
      CREATE ENTITY mMasLC.CompositeComponentList
      mMasLC.CompositeComponentList.Type              = "M_MarketingSection"
      mMasLC.CompositeComponentList.SelectLevel       = 1
      mMasLC.CompositeComponentList.DisplayType       = "Marketing"
      mMasLC.CompositeComponentList.DisplayTypeIndent = "Marketing"
      mMasLC.CompositeComponentList.OriginalTypeID    = mMasLC.M_MarketingSection.ID
      IF mMasLC.M_MarketingSection.Title != ""
         IF mMasLC.M_MarketingSection.Name = ""
            mMasLC.CompositeComponentList.DisplayValue = mMasLC.M_MarketingSection.Title
         ELSE
            mMasLC.CompositeComponentList.DisplayValue = mMasLC.M_MarketingSection.Name + " - " +
                                                         mMasLC.M_MarketingSection.Title
         END
      ELSE
         mMasLC.CompositeComponentList.DisplayValue = mMasLC.M_MarketingSection.Name
      END
      mMasLC.CompositeComponentList.Title             = mMasLC.M_MarketingSection.Title
      mMasLC.CompositeComponentList.Value             = mMasLC.CompositeComponentList.DisplayValue

      FOR EACH mMasLC.M_MarketingStatement
         CREATE ENTITY mMasLC.CompositeComponentList
         mMasLC.CompositeComponentList.Type              = "M_MarketingStatement"
         mMasLC.CompositeComponentList.SelectLevel       = 2
         mMasLC.CompositeComponentList.DisplayType       = "Statement"
         mMasLC.CompositeComponentList.DisplayTypeIndent = "...Statement"
         mMasLC.CompositeComponentList.OriginalTypeID    = mMasLC.M_MarketingStatement.ID
         mMasLC.CompositeComponentList.Title             = mMasLC.M_MarketingStatement.Title
         mMasLC.CompositeComponentList.Value             = mMasLC.M_MarketingStatement.Text

         szOriginalDisplayValue = mMasLC.M_MarketingStatement.Text
         GetAttributeLength( OriginalStringLength, mMasLC, "M_MarketingStatement", "Text" )
         IF MaxDisplayLength < OriginalStringLength
            szDisplayValue = szOriginalDisplayValue + "....."
         ELSE
            szDisplayValue = szOriginalDisplayValue
         END
         mMasLC.CompositeComponentList.DisplayValue = szDisplayValue
      END

      // Add any Usage entries.
      // First sort by Usage Type, but keeping the entries in their original order otherwise.
      Count = 0
      FOR EACH mMasLC.M_MarketingUsageOrdering
         Count = Count + 1
         mMasLC.M_MarketingUsageOrdering.wSortOrder = Count
      END
      OrderEntityForView( mMasLC, "M_MarketingUsageOrdering", "M_MarketingUsage.UsageType A wSortOrder A" )
      FOR EACH mMasLC.M_MarketingUsageOrdering
         CREATE ENTITY mMasLC.CompositeComponentList
         GetStringFromAttributeByContext( szUsageType, mMasLC, "M_MarketingUsage", "UsageType", "FullUsageType", 20 )
         mMasLC.CompositeComponentList.Type              = "M_MarketingUsageOrdering"
         mMasLC.CompositeComponentList.SelectLevel       = 3
         mMasLC.CompositeComponentList.DisplayType       = "MarketingUsage"
         mMasLC.CompositeComponentList.DisplayTypeIndent = "...Mktg " + szUsageType
         mMasLC.CompositeComponentList.OriginalTypeID    = mMasLC.M_MarketingUsage.ID
         mMasLC.CompositeComponentList.Value             = mMasLC.M_MarketingUsage.Name
         mMasLC.CompositeComponentList.DisplayValue      = mMasLC.M_MarketingUsage.Name
      END
   END

   // Hazards Section
   CREATE ENTITY mMasLC.CompositeComponentList
   mMasLC.CompositeComponentList.Type              = "M_HumanHazardSection"
   mMasLC.CompositeComponentList.SelectLevel       = 1
   mMasLC.CompositeComponentList.DisplayType       = "Hazards"
   mMasLC.CompositeComponentList.DisplayTypeIndent = "Hazards"
   mMasLC.CompositeComponentList.OriginalTypeID    = mMasLC.M_HumanHazardSection.ID
   mMasLC.CompositeComponentList.DisplayValue      = ""

   CREATE ENTITY mMasLC.CompositeComponentList
   mMasLC.CompositeComponentList.SelectLevel       = 2
   mMasLC.CompositeComponentList.DisplayType       = "Signal Word"
   mMasLC.CompositeComponentList.DisplayTypeIndent = "...Signal Word"
   mMasLC.CompositeComponentList.DisplayValue      = mMasLC.M_HumanHazardSection.EPA_SignalWord

   CREATE ENTITY mMasLC.CompositeComponentList
   mMasLC.CompositeComponentList.SelectLevel       = 2
   mMasLC.CompositeComponentList.DisplayType       = "Child Warning"
   mMasLC.CompositeComponentList.DisplayTypeIndent = "...Child Warning"
   mMasLC.CompositeComponentList.DisplayValue      = mMasLC.M_HumanHazardSection.EPA_ChildHazardWarning

   CREATE ENTITY mMasLC.CompositeComponentList
   mMasLC.CompositeComponentList.SelectLevel       = 2
   mMasLC.CompositeComponentList.DisplayType       = "Precautionary Stmt"
   mMasLC.CompositeComponentList.DisplayTypeIndent = "...Precautionary Stmt"
   mMasLC.CompositeComponentList.DisplayValue      = mMasLC.M_HumanHazardSection.PrecautionaryStatement

   CREATE ENTITY mMasLC.CompositeComponentList
   mMasLC.CompositeComponentList.DisplayType       = "Location"
   mMasLC.CompositeComponentList.DisplayTypeIndent = "Location"
   szCompositeLocation = "..." + mMasLC.M_HumanHazardSection.PanelLoc1
   IF mMasLC.M_HumanHazardSection.PanelLoc2 != ""
      szCompositeLocation = szCompositeLocation + " / " + mMasLC.M_HumanHazardSection.PanelLoc2
   END
   IF mMasLC.M_HumanHazardSection.PanelLoc3 != ""
      szCompositeLocation = szCompositeLocation + " / " + mMasLC.M_HumanHazardSection.PanelLoc3
   END
   IF mMasLC.M_HumanHazardSection.PanelLoc4 != ""
      szCompositeLocation = szCompositeLocation + " / " + mMasLC.M_HumanHazardSection.PanelLoc4
   END
   IF mMasLC.M_HumanHazardSection.PanelLoc5 != ""
      szCompositeLocation = szCompositeLocation + " / " + mMasLC.M_HumanHazardSection.PanelLoc5
   END
   mMasLC.CompositeComponentList.DisplayValue   = szCompositeLocation*/

   // Usage Section
   /*CREATE ENTITY mMasLC.CompositeComponentList
   mMasLC.CompositeComponentList.Type           = "UsageSection"
   mMasLC.CompositeComponentList.DisplayType    = "Usage"
   mMasLC.CompositeComponentList.OriginalTypeID = mMasLC.M_Usage.ID
   mMasLC.CompositeComponentList.DisplayValue   = ""
   FOR EACH mMasLC.M_Usage
      CREATE ENTITY mMasLC.CompositeComponentList
      mMasLC.CompositeComponentList.Type           = "M_Usage"
      GetStringFromAttributeByContext( szUsageType, mMasLC, "M_Usage", "UsageType", "FullUsageType", 20 )
      mMasLC.CompositeComponentList.DisplayType    = "..." + szUsageType
      mMasLC.CompositeComponentList.OriginalTypeID = mMasLC.M_Usage.ID
      mMasLC.CompositeComponentList.DisplayValue   = mMasLC.M_Usage.Name
   END*/

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: BuildFullCompEntries
//
/////////////////////////////////////////////////////////////////////////////
TRANSFORMATION OPERATION
BuildFullCompEntries( VIEW mMasLC BASED ON LOD mMasLC )

   STRING ( 100 ) szCompositeLocation
   STRING ( 105 ) szDisplayValue
   STRING ( 100 ) szOriginalDisplayValue
   STRING ( 20 )  szUsageType
   INTEGER        MaxDisplayLength
   INTEGER        OriginalStringLength

   // Build the flat display of all components subobject.
   MaxDisplayLength = 100

   // First clear any current entries.
   FOR EACH mMasLC.CompositeComponentList
      DELETE ENTITY mMasLC.CompositeComponentList NONE
   END

   // General Section and Statements.
   FOR EACH mMasLC.M_GeneralSection
      CREATE ENTITY mMasLC.CompositeComponentList
      mMasLC.CompositeComponentList.Type              = "M_GeneralSection"
      mMasLC.CompositeComponentList.DisplayType       = "General"
      mMasLC.CompositeComponentList.DisplayTypeIndent = "General"
      mMasLC.CompositeComponentList.OriginalTypeID    = mMasLC.M_GeneralSection.ID
      mMasLC.CompositeComponentList.DisplayValue      = mMasLC.M_GeneralSection.Title
      mMasLC.CompositeComponentList.Title             = mMasLC.M_GeneralSection.Title
      mMasLC.CompositeComponentList.Value             = mMasLC.CompositeComponentList.DisplayValue

      FOR EACH mMasLC.M_GeneralStatement
         CREATE ENTITY mMasLC.CompositeComponentList
         mMasLC.CompositeComponentList.Type              = "M_GeneralStatement"
         mMasLC.CompositeComponentList.DisplayType       = "Statement"
         mMasLC.CompositeComponentList.DisplayTypeIndent = "...Statement"
         mMasLC.CompositeComponentList.OriginalTypeID    = mMasLC.M_GeneralStatement.ID
         mMasLC.CompositeComponentList.Title             = mMasLC.M_GeneralStatement.Title
         mMasLC.CompositeComponentList.Value             = mMasLC.M_GeneralStatement.Text
         mMasLC.CompositeComponentList.DisplayValue      = mMasLC.CompositeComponentList.Value
      END
   END

   // Ingredients Section and Statements.
   FOR EACH mMasLC.M_IngredientsSection
      CREATE ENTITY mMasLC.CompositeComponentList
      mMasLC.CompositeComponentList.Type              = "M_IngredientsSection"
      mMasLC.CompositeComponentList.DisplayType       = "Ingredients"
      mMasLC.CompositeComponentList.DisplayTypeIndent = "Ingredients"
      mMasLC.CompositeComponentList.OriginalTypeID    = mMasLC.M_IngredientsSection.ID
      mMasLC.CompositeComponentList.DisplayValue      = mMasLC.M_IngredientsSection.ActiveTitle
      mMasLC.CompositeComponentList.Value             = mMasLC.CompositeComponentList.DisplayValue

      FOR EACH mMasLC.M_IngredientsStatement
         CREATE ENTITY mMasLC.CompositeComponentList
         mMasLC.CompositeComponentList.Type              = "M_IngredientsStatement"
         mMasLC.CompositeComponentList.DisplayType       = "Statement"
         mMasLC.CompositeComponentList.DisplayTypeIndent = "...Statement"
         mMasLC.CompositeComponentList.OriginalTypeID    = mMasLC.M_IngredientsStatement.ID
         mMasLC.CompositeComponentList.DisplayValue      = mMasLC.M_IngredientsStatement.ChemicalName
         mMasLC.CompositeComponentList.Value             = mMasLC.M_IngredientsStatement.ChemicalName
      END
   END

   // StorageDisposal Section and Statements.
   FOR EACH mMasLC.M_StorageDisposalSection
      CREATE ENTITY mMasLC.CompositeComponentList
      mMasLC.CompositeComponentList.Type              = "M_StorageDisposalSection"
      mMasLC.CompositeComponentList.DisplayType       = "Storage and Disposal"
      mMasLC.CompositeComponentList.DisplayTypeIndent = "Storage and Disposal"
      mMasLC.CompositeComponentList.OriginalTypeID    = mMasLC.M_StorageDisposalSection.ID
      mMasLC.CompositeComponentList.DisplayValue      = mMasLC.M_StorageDisposalSection.Title
      mMasLC.CompositeComponentList.Title             = mMasLC.M_StorageDisposalSection.Title
      mMasLC.CompositeComponentList.Value             = mMasLC.CompositeComponentList.DisplayValue

      FOR EACH mMasLC.M_StorageDisposalStatement
         CREATE ENTITY mMasLC.CompositeComponentList
         mMasLC.CompositeComponentList.Type              = "M_StorageDisposalStatement"
         mMasLC.CompositeComponentList.DisplayType       = "Statement"
         mMasLC.CompositeComponentList.DisplayTypeIndent = "...Statement"
         mMasLC.CompositeComponentList.OriginalTypeID    = mMasLC.M_StorageDisposalStatement.ID
         mMasLC.CompositeComponentList.Title             = mMasLC.M_StorageDisposalStatement.Title
         mMasLC.CompositeComponentList.Value             = mMasLC.M_StorageDisposalStatement.Text
         mMasLC.CompositeComponentList.DisplayValue      = mMasLC.CompositeComponentList.Value
      END
   END

   // DirectionsForUse Section and Statements.
   FOR EACH mMasLC.M_DirectionsForUseSection
      CREATE ENTITY mMasLC.CompositeComponentList
      mMasLC.CompositeComponentList.Type              = "M_DirectionsForUseSection"
      mMasLC.CompositeComponentList.DisplayType       = "Directions For Use"
      mMasLC.CompositeComponentList.DisplayTypeIndent = "Directions For Use"
      mMasLC.CompositeComponentList.OriginalTypeID    = mMasLC.M_DirectionsForUseSection.ID
      mMasLC.CompositeComponentList.DisplayValue      = mMasLC.M_DirectionsForUseSection.Title
      mMasLC.CompositeComponentList.Title             = mMasLC.M_DirectionsForUseSection.Title
      mMasLC.CompositeComponentList.Value             = mMasLC.CompositeComponentList.DisplayValue

      FOR EACH mMasLC.M_DirectionsForUseStatement
         CREATE ENTITY mMasLC.CompositeComponentList
         mMasLC.CompositeComponentList.Type              = "M_DirectionsForUseStatement"
         mMasLC.CompositeComponentList.DisplayType       = "Statement"
         mMasLC.CompositeComponentList.DisplayTypeIndent = "...Statement"
         mMasLC.CompositeComponentList.OriginalTypeID    = mMasLC.M_DirectionsForUseStatement.ID
         mMasLC.CompositeComponentList.Title             = mMasLC.M_DirectionsForUseStatement.Title
         mMasLC.CompositeComponentList.Value             = mMasLC.M_DirectionsForUseStatement.Text
         mMasLC.CompositeComponentList.DisplayValue      = mMasLC.CompositeComponentList.Value
      END
   END

   // Marketing Section and Statements.
   FOR EACH mMasLC.M_MarketingSection
      CREATE ENTITY mMasLC.CompositeComponentList
      mMasLC.CompositeComponentList.Type              = "M_MarketingSection"
      mMasLC.CompositeComponentList.DisplayType       = "Marketing"
      mMasLC.CompositeComponentList.DisplayTypeIndent = "Marketing"
      mMasLC.CompositeComponentList.OriginalTypeID    = mMasLC.M_MarketingSection.ID
      mMasLC.CompositeComponentList.DisplayValue      = mMasLC.M_MarketingSection.Title
      mMasLC.CompositeComponentList.Title             = mMasLC.M_MarketingSection.Title
      mMasLC.CompositeComponentList.Value             = mMasLC.CompositeComponentList.DisplayValue

      FOR EACH mMasLC.M_MarketingStatement
         CREATE ENTITY mMasLC.CompositeComponentList
         mMasLC.CompositeComponentList.Type              = "M_MarketingStatement"
         mMasLC.CompositeComponentList.DisplayType       = "Statement"
         mMasLC.CompositeComponentList.DisplayTypeIndent = "...Statement"
         mMasLC.CompositeComponentList.OriginalTypeID    = mMasLC.M_MarketingStatement.ID
         mMasLC.CompositeComponentList.Title             = mMasLC.M_MarketingStatement.Title
         mMasLC.CompositeComponentList.Value             = mMasLC.M_MarketingStatement.Text
         mMasLC.CompositeComponentList.DisplayValue      = mMasLC.CompositeComponentList.Value
      END
   END

   // Hazards Section
   CREATE ENTITY mMasLC.CompositeComponentList
   mMasLC.CompositeComponentList.Type              = "M_HumanHazardSection"
   mMasLC.CompositeComponentList.DisplayType       = "Hazards"
   mMasLC.CompositeComponentList.OriginalTypeID    = mMasLC.M_HumanHazardSection.ID
   mMasLC.CompositeComponentList.DisplayValue      = ""

   CREATE ENTITY mMasLC.CompositeComponentList
   mMasLC.CompositeComponentList.DisplayType       = "Signal Word"
   mMasLC.CompositeComponentList.DisplayTypeIndent = "...Signal Word"
   mMasLC.CompositeComponentList.DisplayValue      = mMasLC.M_HumanHazardSection.EPA_SignalWord

   CREATE ENTITY mMasLC.CompositeComponentList
   mMasLC.CompositeComponentList.DisplayType       = "Child Warning"
   mMasLC.CompositeComponentList.DisplayTypeIndent = "...Child Warning"
   mMasLC.CompositeComponentList.DisplayValue      = mMasLC.M_HumanHazardSection.EPA_ChildHazardWarning

   CREATE ENTITY mMasLC.CompositeComponentList
   mMasLC.CompositeComponentList.DisplayType       = "Precautionary Stmt"
   mMasLC.CompositeComponentList.DisplayTypeIndent = "...Precautionary Stmt"
   mMasLC.CompositeComponentList.DisplayValue      = mMasLC.M_HumanHazardSection.PrecautionaryStatement

   CREATE ENTITY mMasLC.CompositeComponentList
   mMasLC.CompositeComponentList.DisplayType    = "Location"
   szCompositeLocation = "..." + mMasLC.M_HumanHazardSection.PanelLoc1
   IF mMasLC.M_HumanHazardSection.PanelLoc2 != ""
      szCompositeLocation = szCompositeLocation + " / " + mMasLC.M_HumanHazardSection.PanelLoc2
   END
   IF mMasLC.M_HumanHazardSection.PanelLoc3 != ""
      szCompositeLocation = szCompositeLocation + " / " + mMasLC.M_HumanHazardSection.PanelLoc3
   END
   IF mMasLC.M_HumanHazardSection.PanelLoc4 != ""
      szCompositeLocation = szCompositeLocation + " / " + mMasLC.M_HumanHazardSection.PanelLoc4
   END
   IF mMasLC.M_HumanHazardSection.PanelLoc5 != ""
      szCompositeLocation = szCompositeLocation + " / " + mMasLC.M_HumanHazardSection.PanelLoc5
   END
   mMasLC.CompositeComponentList.DisplayValue   = szCompositeLocation

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: BuildUsageSelectEnts
//
/////////////////////////////////////////////////////////////////////////////
TRANSFORMATION OPERATION
BuildUsageSelectEnts( VIEW mMasLC BASED ON LOD mMasLC )

   STRING ( 32 ) szOrderingEntityName
   STRING ( 32 ) szUsageEntityName
   STRING ( 20 ) szUsageType
   STRING ( 20 ) szSelectedUsageType
   STRING ( 20 ) szClaimsClassification
   STRING ( 20 ) szSelectedClaimsClassification
   SHORT         nRC

   // Use the source and target information defined in the UsageSelection entity to include the proper
   // M_UsageSelectTarget and M_UsageSelectSource entities for setting up the selection of Usage entries.
   szOrderingEntityName           = mMasLC.UsageSelection.TargetOrderingEntityName
   szUsageEntityName              = mMasLC.UsageSelection.TargetUsageEntityName
   szSelectedUsageType            = mMasLC.UsageSelection.UsageType
   szSelectedClaimsClassification = mMasLC.UsageSelection.ClaimsClassification

   // First build the target entries from the current Target Ordering and Usage Entity Names.
   // This is of the form "FOR EACH mMasLC.M_MarketingUsageOrdering "
   nRC = SetCursorFirstEntity( mMasLC, szOrderingEntityName, "" )
   LOOP WHILE nRC >= zCURSOR_SET
      GetStringFromAttribute( szUsageType, mMasLC, szUsageEntityName, "UsageType" )
      GetStringFromAttribute( szClaimsClassification, mMasLC, szUsageEntityName, "ClaimsClassification" )
      IF szUsageType = szSelectedUsageType AND szClaimsClassification = szSelectedClaimsClassification
         IncludeSubobjectFromSubobject( mMasLC, "M_UsageSelectTarget", mMasLC, szUsageEntityName, zPOS_AFTER )
      END

      nRC = SetCursorNextEntity( mMasLC, szOrderingEntityName, "" )
   END

   // Next build the Source entries from each M_Usage entry of the requested type.
   FOR EACH mMasLC.M_Usage
      IF mMasLC.M_Usage.UsageType = szSelectedUsageType AND mMasLC.M_Usage.ClaimsClassification = szSelectedClaimsClassification
         INCLUDE mMasLC.M_UsageSelectSource FROM mMasLC.M_Usage
      END
   END

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: BuildUsageWorkEnts
//
/////////////////////////////////////////////////////////////////////////////
TRANSFORMATION OPERATION
BuildUsageWorkEnts( VIEW mMasLC BASED ON LOD mMasLC,
                    STRING ( 1 ) szDirUseOrMarketingType )

   STRING ( 32 )  szWorkEntityName
   STRING ( 1 )   szUsageType
   STRING ( 10 )  szClaimsClassification

   // Build the work entities of the form, "DirectionsAppType" for each M_DirectionsUsage or M_MarketingUsage,
   // depending on whether the szDirUseOrMarketingType value is "D" or "M".

   /*IF szDirUseOrMarketingType = "D"
      // Directions For Use work entities.
      FOR EACH mMasLC.M_DirectionsUsageOrdering
         szUsageType = mMasLC.M_DirectionsUsage.UsageType
         IF szUsageType = "C"
            // For Claim type, we need to determine ClaimsClassification.
            szClaimsClassification = mMasLC.M_DirectionsUsage.ClaimsClassification
            IF szClaimsClassification = "Fungi"
               IF mMasLC.DirectionsFungi DOES NOT EXIST
                  CREATE ENTITY mMasLC.DirectionsFungi
               END
            ELSE
               IF szClaimsClassification = "Bacteria"
                  IF mMasLC.DirectionsBacteria DOES NOT EXIST
                     CREATE ENTITY mMasLC.DirectionsBacteria
                  END
               ELSE
                  IF szClaimsClassification = "Viruses"
                     IF mMasLC.DirectionsViruses DOES NOT EXIST
                        CREATE ENTITY mMasLC.DirectionsViruses
                     END
                  ELSE
                     // Protazoa (nothing is currently done for this.
                  END
               END
            END
         ELSE
            IF szUsageType = "S"
               // Surface
               IF mMasLC.DirectionsSurface DOES NOT EXIST
                  CREATE ENTITY mMasLC.DirectionsSurface
               END
            ELSE
               IF szUsageType = "L"
                  // Location
                  IF mMasLC.DirectionsLocations DOES NOT EXIST
                     CREATE ENTITY mMasLC.DirectionsLocations
                  END
               ELSE
                  // Application Type
                  IF mMasLC.DirectionsAppType DOES NOT EXIST
                     CREATE ENTITY mMasLC.DirectionsAppType
                  END
               END
            END
         END
      END
   ELSE
      // Marketing work entities.
      FOR EACH mMasLC.M_MarketingUsageOrdering
         szUsageType = mMasLC.M_MarketingUsage.UsageType
         IF szUsageType = "C"
            // For Claim type, we need to determine ClaimsClassification.
            szClaimsClassification = mMasLC.M_MarketingUsage.ClaimsClassification
            IF szClaimsClassification = "Fungi"
               IF mMasLC.MarketingFungi DOES NOT EXIST
                  CREATE ENTITY mMasLC.MarketingFungi
               END
            ELSE
               IF szClaimsClassification = "Bacteria"
                  IF mMasLC.MarketingBacteria DOES NOT EXIST
                     CREATE ENTITY mMasLC.MarketingBacteria
                  END
               ELSE
                  IF szClaimsClassification = "Viruses"
                     IF mMasLC.MarketingViruses DOES NOT EXIST
                        CREATE ENTITY mMasLC.MarketingViruses
                     END
                  ELSE
                     // Protazoa (nothing is currently done for this.
                  END
               END
            END
         ELSE
            IF szUsageType = "S"
               // Surface
               IF mMasLC.MarketingSurface DOES NOT EXIST
                  CREATE ENTITY mMasLC.MarketingSurface
               END
            ELSE
               IF szUsageType = "L"
                  // Location
                  IF mMasLC.MarketingLocations DOES NOT EXIST
                     CREATE ENTITY mMasLC.MarketingLocations
                  END
               ELSE
                  // Application Type
                  IF mMasLC.MarketingAppType DOES NOT EXIST
                     CREATE ENTITY mMasLC.MarketingAppType
                  END
               END
            END
         END
      END
   END*/

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: SetMLC_SelectedFlags
//
/////////////////////////////////////////////////////////////////////////////
TRANSFORMATION OPERATION
SetMLC_SelectedFlags( VIEW mMasLC BASED ON LOD mMasLC,
                      VIEW mSubLC BASED ON LOD mSubLC )

   // Select mMLC Component entries from Components currently in the mSLC.

   // First, initialize mMLC flags to null.
   FOR EACH mMasLC.CompositeComponentList
      mMasLC.CompositeComponentList.Selected = ""
   END

   // Then set those from mSLC.
   FOR EACH mSubLC.CompositeComponentList
      IF mSubLC.CompositeComponentList.OriginalTypeID != ""
         SET CURSOR FIRST mMasLC.CompositeComponentList
                    WHERE mMasLC.CompositeComponentList.OriginalTypeID = mSubLC.CompositeComponentList.OriginalTypeID
                      AND mMasLC.CompositeComponentList.DisplayType    = mSubLC.CompositeComponentList.DisplayType
         IF RESULT >= zCURSOR_SET
            mMasLC.CompositeComponentList.Selected = "Y"
         END
      END
   END

   // Finally, set any remaining components with null Type to selected. (This only effects display and not the inclusion of
   // MLC components in the SLC, as components with null Type are not processed.
   FOR EACH mMasLC.CompositeComponentList
      IF mMasLC.CompositeComponentList.Selected = ""
         IF mMasLC.CompositeComponentList.Type = ""
            mMasLC.CompositeComponentList.Selected = "Y"
         END
      END
   END

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: dUsageKeywordText
//
/////////////////////////////////////////////////////////////////////////////
DERIVED ATTRIBUTE OPERATION
dUsageKeywordText( VIEW mMasLC BASED ON LOD mMasLC,
                   STRING ( 32 ) InternalEntityStructure,
                   STRING ( 32 ) InternalAttribStructure,
                   SHORT GetOrSetFlag )

   STRING ( 1024 ) szGeneratedString

   CASE GetOrSetFlag
   OF   zDERIVED_GET:

      // Concatenate all the Keyword values for a Marketing Keyword entry.
      szGeneratedString = ""
      FOR EACH mMasLC.M_InsertTextUsage
         IF szGeneratedString = ""
            szGeneratedString = mMasLC.M_InsertTextUsage.Text
         ELSE
            szGeneratedString = szGeneratedString + ", " + mMasLC.M_InsertTextUsage.Text
         END
      END

      // Store the resulting value in the object.
      StoreStringInRecord( mMasLC, InternalEntityStructure, InternalAttribStructure, szGeneratedString )
      RETURN 0

        /* end zDERIVED_GET */
   OF   zDERIVED_SET:

        /* end zDERIVED_SET */
   END  /* case */

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: dSubUsageCombinedText
//
/////////////////////////////////////////////////////////////////////////////
DERIVED ATTRIBUTE OPERATION
dSubUsageCombinedText( VIEW mMasLC BASED ON LOD mMasLC,
                       STRING ( 32 ) InternalEntityStructure,
                       STRING ( 32 ) InternalAttribStructure,
                       SHORT GetOrSetFlag )

   STRING ( 1024 ) szCombinedText

   CASE GetOrSetFlag
   OF   zDERIVED_GET:

      // Expand the current Text attribute by replacing embedded Keywords with the Keyword
      // values in the M_InsertTextMarketing subentities.
      szCombinedText = ""
      FOR EACH mMasLC.M_UsageGroupUsage
         IF szCombinedText = ""
            szCombinedText = mMasLC.M_UsageGroupUsage.Name
         ELSE
            szCombinedText = szCombinedText + ", " + mMasLC.M_UsageGroupUsage.Name
         END
      END

      // Store the resulting value in the object.
      StoreStringInRecord( mMasLC, InternalEntityStructure, InternalAttribStructure, szCombinedText )
      RETURN 0

        /* end zDERIVED_GET */
   OF   zDERIVED_SET:

        /* end zDERIVED_SET */
   END  /* case */

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: BuildUsageGroupEntries
//
/////////////////////////////////////////////////////////////////////////////
TRANSFORMATION OPERATION
BuildUsageGroupEntries( VIEW mMasLC BASED ON LOD mMasLC )

   // Build Usage Group Usages.
   // We treat M_UsageGroupUsage as a derived relationship, because we had JOE problems when we
   // updated the same entity down two separate paths.
   FOR EACH mMasLC.M_UsageType
      FOR EACH mMasLC.M_UsageGroup
         FOR EACH mMasLC.M_UsageGroupUsage
            EXCLUDE mMasLC.M_UsageGroupUsage NONE
         END
      END
      FOR EACH mMasLC.M_Usage
         IF mMasLC.M_UsageUsageGroup EXISTS
            SET CURSOR FIRST mMasLC.M_UsageGroup
                       WHERE mMasLC.M_UsageGroup.ID = mMasLC.M_UsageUsageGroup.ID
            IF RESULT >= zCURSOR_SET
               INCLUDE mMasLC.M_UsageGroupUsage FROM mMasLC.M_Usage
            END
         END
      END
   END

   // Sort everything by Name.
   FOR EACH mMasLC.M_UsageType
      FOR EACH mMasLC.M_UsageGroup
         OrderEntityForView( mMasLC, "M_UsageGroupUsage", "Name A" )
      END
      OrderEntityForView( mMasLC, "M_Usage", "Name A" )
   END

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: BuildUsageKeyEntries
//
/////////////////////////////////////////////////////////////////////////////
TRANSFORMATION OPERATION
BuildUsageKeyEntries( VIEW mMasLC BASED ON LOD mMasLC,
                      STRING ( 32 ) SourceKeywordEntityName,
                      STRING ( 32 ) SourceTextEntityName,
                      STRING ( 1024 ) TextValue,
                      STRING ( 1024 ) TitleValue )

   VIEW mMasLC_Root REGISTERED AS mMasLC_Root
   SHORT nRC1
   SHORT nRC2

   // Build the M_InsertTextKeywordBase subobject based on the entity names passed in.
   // If the keyword Type allows only a single keyword value, set the selected flag for the first one.
   // Otherwise, set the selected flag for all text entries.

   // Then build the actual M_InsertTextKeyword subobject from the selected entries from M_InsertTextKeywordBase.

   // Delete any current entries.
   IF mMasLC_Root.DisplayKeywordText EXISTS
      DELETE ENTITY mMasLC_Root.DisplayKeywordText
   END

   // Create Display entity containing Text and optionally Title.
   CREATE ENTITY mMasLC_Root.DisplayKeywordText
   mMasLC_Root.DisplayKeywordText.Text  = TextValue
   mMasLC_Root.DisplayKeywordText.Title = TitleValue

   // Copy over the basic entities.
   nRC1 = SetCursorFirstEntity( mMasLC, SourceKeywordEntityName, "" )
   LOOP WHILE nRC1 >= zCURSOR_SET
      CREATE ENTITY mMasLC_Root.M_InsertTextKeywordBase
      SetMatchingAttributesByName( mMasLC_Root, "M_InsertTextKeywordBase", mMasLC, SourceKeywordEntityName, zSET_ALL )

      nRC2 = SetCursorFirstEntity( mMasLC, SourceTextEntityName, "" )
      LOOP WHILE nRC2 >= zCURSOR_SET
         CREATE ENTITY mMasLC_Root.M_InsertTextBase
         SetMatchingAttributesByName( mMasLC_Root, "M_InsertTextBase", mMasLC, SourceTextEntityName, zSET_ALL )

         nRC2 = SetCursorNextEntity( mMasLC, SourceTextEntityName, "" )
      END
      nRC1 = SetCursorNextEntity( mMasLC, SourceKeywordEntityName, "" )
   END

   // Initialize the selected flags as indicated above.
   FOR EACH mMasLC_Root.M_InsertTextKeywordBase
      IF mMasLC_Root.M_InsertTextKeywordBase.Type = "O"
         // Set the flag for the first entry.
         mMasLC_Root.M_InsertTextBase.wSelected = "Y"
      ELSE
         // Set the flag for all entries.
         FOR EACH mMasLC_Root.M_InsertTextBase
            mMasLC_Root.M_InsertTextBase.wSelected = "Y"
         END
      END
   END

   // Build the M_InsertTextKeyword subobject as described above.
   FOR EACH mMasLC_Root.M_InsertTextKeywordBase
      CREATE ENTITY mMasLC_Root.M_InsertTextKeyword
      SetMatchingAttributesByName( mMasLC_Root, "M_InsertTextKeyword", mMasLC_Root, "M_InsertTextKeywordBase", zSET_ALL )
      FOR EACH mMasLC_Root.M_InsertTextBase
         IF mMasLC_Root.M_InsertTextBase.wSelected = "Y"
            CREATE ENTITY mMasLC_Root.M_InsertText
            SetMatchingAttributesByName( mMasLC_Root, "M_InsertText", mMasLC_Root, "M_InsertTextBase", zSET_ALL )
         END
      END
   END

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: BuildNonGroupEntries
//
/////////////////////////////////////////////////////////////////////////////
TRANSFORMATION OPERATION
BuildNonGroupEntries( VIEW mMasLC BASED ON LOD mMasLC )

   VIEW mMasLC2 BASED ON LOD mMasLC
   INTEGER UsageGroupID

   // Build the M_UsageNonGroupUsage derived entries from any M_Usage entries that aren't tied to a M_UsageGroup.

   // Because of a JOE error on reincluding excluded entities from a different view, we're saving position by saving
   // the ID of the M_UsageGroup entity and using it to reposition.
   UsageGroupID = mMasLC.M_UsageGroup.ID

   // First remove existing entries.
   FOR EACH mMasLC.M_UsageNonGroupUsage
      EXCLUDE mMasLC.M_UsageNonGroupUsage NONE
   END

   // Add any Usage entry that's not tied to a Group.
   CreateViewFromView( mMasLC2, mMasLC )
   FOR EACH mMasLC2.M_Usage
      SET CURSOR FIRST mMasLC.M_UsageGroupUsage WITHIN mMasLC2.M_UsageType
                 WHERE mMasLC.M_UsageGroupUsage.ID = mMasLC2.M_Usage.ID
      IF RESULT < zCURSOR_SET
         INCLUDE mMasLC.M_UsageNonGroupUsage FROM mMasLC2.M_Usage
      END
   END
   OrderEntityForView( mMasLC2, "M_UsageNonGroupUsage", "Name A" )
   SET CURSOR FIRST mMasLC.M_UsageGroup WHERE mMasLC.M_UsageGroup.ID = UsageGroupID
   DropView( mMasLC2 )

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: dSpecifiedActiveIngred
//
/////////////////////////////////////////////////////////////////////////////
DERIVED ATTRIBUTE OPERATION
dSpecifiedActiveIngred( VIEW mMasLC BASED ON LOD mMasLC,
                        STRING ( 32 ) InternalEntityStructure,
                        STRING ( 32 ) InternalAttribStructure,
                        SHORT GetOrSetFlag )

   STRING ( 32 ) Active
   DECIMAL dTotalActiveIngredients
   DECIMAL dActiveIngredients

   CASE GetOrSetFlag
   OF   zDERIVED_GET:

      dTotalActiveIngredients = 0
      FOR EACH mMasLC.M_IngredientsStatement
         Active = mMasLC.M_IngredientsStatement.Active
         IF Active = "A"
            dActiveIngredients = mMasLC.M_IngredientsStatement.Percent
            dTotalActiveIngredients = dTotalActiveIngredients + dActiveIngredients
         END
      END
 
      // Store the resulting value in the object.
      Active = dTotalActiveIngredients
      StoreStringInRecord( mMasLC, InternalEntityStructure, InternalAttribStructure, Active )
      RETURN 0

        // end zDERIVED_GET
   OF   zDERIVED_SET:

        // end zDERIVED_SET
   END  // case

END
