/////////////////////////////////////////////////////////////////////////////
// Project ePamms
//
// This is a part of the ePamms applications package.
// Copyright © 2007 - 2015 Arksoft, Inc.
// All Rights Reserved.
//
// SUBSYSTEM:    mMasLC        - Primary Registrant Label Content operations
// FILE:         mMasLC.vml
// AUTHOR:       Doug Sorensen
//
/////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: dEPA_RegistrationNbr
//
/////////////////////////////////////////////////////////////////////////////
DERIVED ATTRIBUTE OPERATION
dEPA_RegistrationNbr( VIEW mMasLC BASED ON LOD mMasLC,
                      STRING ( 32 ) InternalEntityStructure,
                      STRING ( 32 ) InternalAttribStructure,
                      SHORT GetOrSetFlag )

   STRING ( 1000 ) szString

   CASE GetOrSetFlag
   OF   zDERIVED_GET:

      IF mMasLC.PrimaryRegistrant EXISTS AND mMasLC.MasterProduct EXISTS
         szString = mMasLC.PrimaryRegistrant.EPA_CompanyNumber + "-" + mMasLC.MasterProduct.Number
      ELSE
         szString = "EPA Registration Number unknown"
      END


      // Store the calculated value in the object.
      StoreStringInRecord( mMasLC,
                           InternalEntityStructure,
                           InternalAttribStructure, szString )
      RETURN 0

        /* end zDERIVED_GET */
   OF   zDERIVED_SET:

        /* end zDERIVED_SET */
   END  /* case */

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: dIngredientName
//
/////////////////////////////////////////////////////////////////////////////
DERIVED ATTRIBUTE OPERATION
dIngredientName( VIEW mMasLC BASED ON LOD mMasLC,
                 STRING ( 32 ) InternalEntityStructure,
                 STRING ( 32 ) InternalAttribStructure,
                 SHORT GetOrSetFlag )

   STRING ( 1000 ) szString

   CASE GetOrSetFlag
   OF   zDERIVED_GET:

      IF mMasLC.M_IngredientsStatement EXISTS
         szString = mMasLC.M_IngredientsStatement.CommonName
      IF szString = ""
            szString = mMasLC.M_IngredientsStatement.ChemicalName
         END
       ELSE
          szString = ""
       END

       // Store the calculated value in the object.
       StoreStringInRecord( mMasLC,
                            InternalEntityStructure,
                            InternalAttribStructure, szString )
       RETURN 0

        /* end zDERIVED_GET */
   OF   zDERIVED_SET:

        /* end zDERIVED_SET */
   END  /* case */

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: dMasterProductNameNbr
//
/////////////////////////////////////////////////////////////////////////////
DERIVED ATTRIBUTE OPERATION
dMasterProductNameNbr( VIEW mMasLC BASED ON LOD mMasLC,
                       STRING ( 32 ) InternalEntityStructure,
                       STRING ( 32 ) InternalAttribStructure,
                       SHORT GetOrSetFlag )

   STRING ( 1000 ) szString

   CASE GetOrSetFlag
   OF   zDERIVED_GET:

      IF mMasLC.MasterProduct  EXISTS
         szString = mMasLC.MasterProduct.Name + " (" +
                    mMasLC.PrimaryRegistrant.EPA_CompanyNumber + "-" +
                    mMasLC.MasterProduct.Number + ")"
       ELSE
          szString = ""
       END

       // Store the calculated value in the object.
       StoreStringInRecord( mMasLC,
                            InternalEntityStructure,
                            InternalAttribStructure, szString )
       RETURN 0

        /* end zDERIVED_GET */
   OF   zDERIVED_SET:

        /* end zDERIVED_SET */
   END  /* case */

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: dRegistrantNameID
// Registrant Name + EPA Registrant Number
//
/////////////////////////////////////////////////////////////////////////////
DERIVED ATTRIBUTE OPERATION
dRegistrantNameID( VIEW mMasLC BASED ON LOD mMasLC,
                   STRING ( 32 ) InternalEntityStructure,
                   STRING ( 32 ) InternalAttribStructure,
                   SHORT GetOrSetFlag )

   STRING ( 1000 ) szString

   CASE GetOrSetFlag
   OF   zDERIVED_GET:

      IF mMasLC.Organization  EXISTS
         szString = mMasLC.Organization.Name
         IF mMasLC.PrimaryRegistrant.EPA_CompanyNumber = ""
            szString = szString + " (Non EPA)"
         ELSE
            szString = szString + " (" +
                    mMasLC.PrimaryRegistrant.EPA_CompanyNumber + ")"
         END
       ELSE
          szString = ""
       END

       // Store the calculated value in the object.
       StoreStringInRecord( mMasLC,
                            InternalEntityStructure,
                            InternalAttribStructure, szString )
       RETURN 0
        /* end zDERIVED_GET */
   OF   zDERIVED_SET:

        /* end zDERIVED_SET */
   END  /* case */

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: BuildNewMLC_Version
//
/////////////////////////////////////////////////////////////////////////////
TRANSFORMATION OPERATION
BuildNewMLC_Version( VIEW NewMLC      BASED ON LOD mMasLC,
                     VIEW PreviousMLC BASED ON LOD mMasLC )

   STRING ( 10 ) szVersion

   // Create a new MLC from a previous MLC, tieing the new back to the original.

   // Root and single includes
   CREATE ENTITY NewMLC.MasterLabelContent
   SetMatchingAttributesByName( NewMLC, "MasterLabelContent", PreviousMLC, "MasterLabelContent", zSET_NULL )
   SetAttributeFromCurrentDateTime( NewMLC, "MasterLabelContent", "RevisionDate" )
   szVersion = NewMLC.MasterLabelContent.RevisionDate
   NewMLC.MasterLabelContent.Version = szVersion
   INCLUDE NewMLC.MasterProduct FROM PreviousMLC.MasterProduct
   INCLUDE NewMLC.MP_MasterLabelContent FROM PreviousMLC.MasterLabelContent

   // M_Usage Subobject
   // Check to make sure we are not copying duplicates.
   FOR EACH PreviousMLC.M_Usage
      SET CURSOR FIRST NewMLC.M_Usage WHERE NewMLC.M_Usage.UsageType = PreviousMLC.M_Usage.UsageType
                                        AND NewMLC.M_Usage.Name = PreviousMLC.M_Usage.Name
      IF RESULT < zCURSOR_SET
         CREATE ENTITY NewMLC.M_Usage
         SetMatchingAttributesByName( NewMLC, "M_Usage", PreviousMLC, "M_Usage", zSET_NULL )
         INCLUDE NewMLC.MP_Usage FROM PreviousMLC.M_Usage
      END
   END

   // M_GeneralSection Subobject
   FOR EACH PreviousMLC.M_GeneralSection
      CREATE ENTITY NewMLC.M_GeneralSection
      SetMatchingAttributesByName( NewMLC, "M_GeneralSection", PreviousMLC, "M_GeneralSection", zSET_NULL )
      INCLUDE NewMLC.MP_GeneralSection FROM PreviousMLC.M_GeneralSection
      FOR EACH PreviousMLC.M_GeneralStatement
         CREATE ENTITY NewMLC.M_GeneralStatement
         SetMatchingAttributesByName( NewMLC, "M_GeneralStatement", PreviousMLC, "M_GeneralStatement", zSET_NULL )
         INCLUDE NewMLC.MP_GeneralStatement FROM PreviousMLC.M_GeneralStatement
      END
   END

   // M_IngredientsSection Subobject
   FOR EACH PreviousMLC.M_IngredientsSection
      CREATE ENTITY NewMLC.M_IngredientsSection
      SetMatchingAttributesByName( NewMLC, "M_IngredientsSection", PreviousMLC, "M_IngredientsSection", zSET_NULL )
      INCLUDE NewMLC.MP_IngredientsSection FROM PreviousMLC.M_IngredientsSection
      FOR EACH PreviousMLC.M_IngredientsStatement
         CREATE ENTITY NewMLC.M_IngredientsStatement
         SetMatchingAttributesByName( NewMLC, "M_IngredientsStatement", PreviousMLC, "M_IngredientsStatement", zSET_NULL )
         INCLUDE NewMLC.MP_IngredientsStatement FROM PreviousMLC.M_IngredientsStatement
      END
   END

   // M_StorageDisposalSection Subobject
   FOR EACH PreviousMLC.M_StorageDisposalSection
      CREATE ENTITY NewMLC.M_StorageDisposalSection
      SetMatchingAttributesByName( NewMLC, "M_StorageDisposalSection", PreviousMLC, "M_StorageDisposalSection", zSET_NULL )
      INCLUDE NewMLC.MP_StorageDisposalSection FROM PreviousMLC.M_StorageDisposalSection
      FOR EACH PreviousMLC.M_StorageDisposalStatement
         CREATE ENTITY NewMLC.M_StorageDisposalStatement
         SetMatchingAttributesByName( NewMLC, "M_StorageDisposalStatement", PreviousMLC, "M_StorageDisposalStatement", zSET_NULL )
         INCLUDE NewMLC.MP_StorageDisposalStatement FROM PreviousMLC.M_StorageDisposalStatement
      END
   END
TraceLineS( "!!! Commit 3", "" )
COMMIT NewMLC

   // M_DirectionsForUseSection Subobject
   FOR EACH PreviousMLC.M_DirectionsForUseSection
      CREATE ENTITY NewMLC.M_DirectionsForUseSection
      SetMatchingAttributesByName( NewMLC, "M_DirectionsForUseSection", PreviousMLC, "M_DirectionsForUseSection", zSET_NULL )
      INCLUDE NewMLC.MP_DirectionsForUseSection FROM PreviousMLC.M_DirectionsForUseSection
      FOR EACH PreviousMLC.M_DirectionsForUseStatement
         CREATE ENTITY NewMLC.M_DirectionsForUseStatement
         SetMatchingAttributesByName( NewMLC, "M_DirectionsForUseStatement", PreviousMLC, "M_DirectionsForUseStatement", zSET_NULL )
         INCLUDE NewMLC.MP_DirectionsForUseStatement FROM PreviousMLC.M_DirectionsForUseStatement
      END

      // Include appropriate Usage statements.
TraceLineS( "!!! Commit 4", "" )
COMMIT NewMLC
      /*FOR EACH PreviousMLC.M_DirectionsUsageOrdering 
         // Check to see if the Usage already exists. This can happen if two Usages have the same name.
         SET CURSOR FIRST NewMLC.M_DirectionsUsage WHERE NewMLC.M_DirectionsUsage.Name                 = PreviousMLC.M_DirectionsUsage.Name
                                                     AND NewMLC.M_DirectionsUsage.UsageType            = PreviousMLC.M_DirectionsUsage.UsageType
                                                     AND NewMLC.M_DirectionsUsage.ClaimsClassification = PreviousMLC.M_DirectionsUsage.ClaimsClassification 
         IF RESULT < zCURSOR_SET
            SET CURSOR FIRST NewMLC.M_Usage WHERE NewMLC.M_Usage.Name                 = PreviousMLC.M_DirectionsUsage.Name
                                              AND NewMLC.M_Usage.UsageType            = PreviousMLC.M_DirectionsUsage.UsageType
                                              AND NewMLC.M_Usage.ClaimsClassification = PreviousMLC.M_DirectionsUsage.ClaimsClassification
            IF RESULT >= zCURSOR_SET
               CREATE ENTITY NewMLC.M_DirectionsUsageOrdering
               INCLUDE NewMLC.M_DirectionsUsage FROM NewMLC.M_Usage
       TraceLineS( "!!! Commit 5", "" )
       COMMIT NewMLC
            END
         END
      END*/
   END
TraceLineS( "!!! Commit 6", "" )
COMMIT NewMLC

   // M_MarketingSection Subobject
   FOR EACH PreviousMLC.M_MarketingSection
      CREATE ENTITY NewMLC.M_MarketingSection
      SetMatchingAttributesByName( NewMLC, "M_MarketingSection", PreviousMLC, "M_MarketingSection", zSET_NULL )
      INCLUDE NewMLC.MP_MarketingSection FROM PreviousMLC.M_MarketingSection
      FOR EACH PreviousMLC.M_MarketingStatement
         CREATE ENTITY NewMLC.M_MarketingStatement
         SetMatchingAttributesByName( NewMLC, "M_MarketingStatement", PreviousMLC, "M_MarketingStatement", zSET_NULL )
         INCLUDE NewMLC.MP_MarketingStatement FROM PreviousMLC.M_MarketingStatement
      END

       // Include appropriate Usage statements.
      /*FOR EACH PreviousMLC.M_MarketingUsage WITHIN PreviousMLC.M_MarketingSection
         // Check to see if the Usage already exists. This can happen if two Usages have the same name.
         SET CURSOR FIRST NewMLC.M_MarketingUsage WHERE NewMLC.M_MarketingUsage.Name = PreviousMLC.M_MarketingUsage.Name
                                                    AND NewMLC.M_MarketingUsage.UsageType = PreviousMLC.M_MarketingUsage.UsageType
         IF RESULT < zCURSOR_SET
            SET CURSOR FIRST NewMLC.M_Usage WHERE NewMLC.M_Usage.Name = PreviousMLC.M_MarketingUsage.Name
                                              AND NewMLC.M_Usage.UsageType = PreviousMLC.M_MarketingUsage.UsageType
            CREATE ENTITY NewMLC.M_MarketingUsageOrdering
            INCLUDE NewMLC.M_MarketingUsage FROM NewMLC.M_Usage
         END
      END*/
   END
TraceLineS( "!!! Commit 7", "" )
COMMIT NewMLC

   // M_HumanHazardSection Subobject
   FOR EACH PreviousMLC.M_HumanHazardSection
      CREATE ENTITY NewMLC.M_HumanHazardSection
      SetMatchingAttributesByName( NewMLC, "M_HumanHazardSection", PreviousMLC, "M_HumanHazardSection", zSET_NULL )
      INCLUDE NewMLC.MP_HumanHazardSection FROM PreviousMLC.M_HumanHazardSection
   END
TraceLineS( "!!! Commit 8", "" )
COMMIT NewMLC

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: CopyMLCToNewProduct
//
/////////////////////////////////////////////////////////////////////////////
TRANSFORMATION OPERATION
CopyMLCToNewProduct( VIEW TargetMLC BASED ON LOD mMasLC,
                     VIEW SourceMLC BASED ON LOD mMasLC )

   VIEW TargetMLC2  BASED ON LOD mMasLC

   // Copy the Source MLC to the new Target MLC, which is for a new Product.
   // The root entity of the new Target MLC will have been created and linked to the appropriate Product
   // prior to entering this operation.

   // For root, only set attributes.
   SetMatchingAttributesByName( TargetMLC, "MasterLabelContent", SourceMLC, "MasterLabelContent", zSET_NULL )

   // M_Usage Subobject
   // Check to make sure we are not copying duplicates.
   FOR EACH SourceMLC.M_Usage
      SET CURSOR FIRST TargetMLC.M_Usage WHERE TargetMLC.M_Usage.UsageType = SourceMLC.M_Usage.UsageType
                                           AND TargetMLC.M_Usage.Name = SourceMLC.M_Usage.Name
      IF RESULT < zCURSOR_SET
         CREATE ENTITY TargetMLC.M_Usage
         SetMatchingAttributesByName( TargetMLC, "M_Usage", SourceMLC, "M_Usage", zSET_NULL )
      END
   END

   // General Section
   FOR EACH SourceMLC.M_GeneralSection
      CREATE ENTITY TargetMLC.M_GeneralSection
      SetMatchingAttributesByName( TargetMLC, "M_GeneralSection", SourceMLC, "M_GeneralSection", zSET_NULL )
      FOR EACH SourceMLC.M_GeneralStatement
         CREATE ENTITY TargetMLC.M_GeneralStatement
         SetMatchingAttributesByName( TargetMLC, "M_GeneralStatement", SourceMLC, "M_GeneralStatement", zSET_NULL )
      END
   END

   // Ingredients Section
   FOR EACH SourceMLC.M_IngredientsSection
      CREATE ENTITY TargetMLC.M_IngredientsSection
      SetMatchingAttributesByName( TargetMLC, "M_IngredientsSection", SourceMLC, "M_IngredientsSection", zSET_NULL )
      FOR EACH SourceMLC.M_IngredientsStatement
         CREATE ENTITY TargetMLC.M_IngredientsStatement
         SetMatchingAttributesByName( TargetMLC, "M_IngredientsStatement", SourceMLC, "M_IngredientsStatement", zSET_NULL )
      END
   END

   // StorageDisposal Section
   FOR EACH SourceMLC.M_StorageDisposalSection
      CREATE ENTITY TargetMLC.M_StorageDisposalSection
      SetMatchingAttributesByName( TargetMLC, "M_StorageDisposalSection", SourceMLC, "M_StorageDisposalSection", zSET_NULL )
      FOR EACH SourceMLC.M_StorageDisposalStatement
         CREATE ENTITY TargetMLC.M_StorageDisposalStatement
         SetMatchingAttributesByName( TargetMLC, "M_StorageDisposalStatement", SourceMLC, "M_StorageDisposalStatement", zSET_NULL )
      END
   END

   // DirectionsForUse Section
   FOR EACH SourceMLC.M_DirectionsForUseSection
      CREATE ENTITY TargetMLC.M_DirectionsForUseSection
      SetMatchingAttributesByName( TargetMLC, "M_DirectionsForUseSection", SourceMLC, "M_DirectionsForUseSection", zSET_NULL )
      FOR EACH SourceMLC.M_DirectionsForUseStatement
         CREATE ENTITY TargetMLC.M_DirectionsForUseStatement
         SetMatchingAttributesByName( TargetMLC, "M_DirectionsForUseStatement", SourceMLC, "M_DirectionsForUseStatement", zSET_NULL )
      END
   END

   // Marketing Section
   FOR EACH SourceMLC.M_MarketingSection
      CREATE ENTITY TargetMLC.M_MarketingSection
      SetMatchingAttributesByName( TargetMLC, "M_MarketingSection", SourceMLC, "M_MarketingSection", zSET_NULL )
      FOR EACH SourceMLC.M_MarketingStatement
         CREATE ENTITY TargetMLC.M_MarketingStatement
         SetMatchingAttributesByName( TargetMLC, "M_MarketingStatement", SourceMLC, "M_MarketingStatement", zSET_NULL )
      END
   END

   // HumanHazard Section
   FOR EACH SourceMLC.M_HumanHazardSection
      CREATE ENTITY TargetMLC.M_HumanHazardSection
      SetMatchingAttributesByName( TargetMLC, "M_HumanHazardSection", SourceMLC, "M_HumanHazardSection", zSET_NULL )
   END

   // DirectionsForUse Usage
   FOR EACH SourceMLC.M_DirectionsForUseSection
      SET CURSOR FIRST TargetMLC.M_DirectionsForUseSection
                 WHERE TargetMLC.M_DirectionsForUseSection.Title = SourceMLC.M_DirectionsForUseSection.Title
      FOR EACH SourceMLC.M_DirectionsUsage WITHIN SourceMLC.M_DirectionsForUseSection
         CreateViewFromView( TargetMLC2, TargetMLC )
         SET CURSOR FIRST TargetMLC2.M_DirectionsUsage
                    WHERE TargetMLC2.M_DirectionsUsage.UsageType = SourceMLC.M_DirectionsUsage.UsageType
                      AND TargetMLC2.M_DirectionsUsage.Name = SourceMLC.M_DirectionsUsage.Name
         IF RESULT < zCURSOR_SET
            SET CURSOR FIRST TargetMLC.M_Usage WHERE TargetMLC.M_Usage.Name = SourceMLC.M_DirectionsUsage.Name
                                                 AND TargetMLC.M_Usage.UsageType = SourceMLC.M_DirectionsUsage.UsageType
            IF RESULT < zCURSOR_SET
               IssueError( TargetMLC, 0, 0, "Programming Error 1" )
            END

            CREATE ENTITY TargetMLC.M_DirectionsUsageOrdering
            INCLUDE TargetMLC.M_DirectionsUsage FROM TargetMLC.M_Usage
         END
         DropView( TargetMLC2 )
      END
   END

   // Marketing Usage
   FOR EACH SourceMLC.M_MarketingSection
      SET CURSOR FIRST TargetMLC.M_MarketingSection
                 WHERE TargetMLC.M_MarketingSection.Title = SourceMLC.M_MarketingSection.Title
      FOR EACH SourceMLC.M_MarketingUsage WITHIN SourceMLC.M_MarketingSection
         CreateViewFromView( TargetMLC2, TargetMLC )
         SET CURSOR FIRST TargetMLC2.M_MarketingUsage
                    WHERE TargetMLC2.M_MarketingUsage.UsageType = SourceMLC.M_MarketingUsage.UsageType
                      AND TargetMLC2.M_MarketingUsage.Name = SourceMLC.M_MarketingUsage.Name
         IF RESULT < zCURSOR_SET
            SET CURSOR FIRST TargetMLC.M_Usage WHERE TargetMLC.M_Usage.Name = SourceMLC.M_MarketingUsage.Name
                                                 AND TargetMLC.M_Usage.UsageType = SourceMLC.M_MarketingUsage.UsageType
            IF RESULT < zCURSOR_SET
               IssueError( TargetMLC,0,0, "Programming Error 1" )
            END
            CREATE ENTITY TargetMLC.M_MarketingUsageOrdering
            INCLUDE TargetMLC.M_MarketingUsage FROM TargetMLC.M_Usage
         END
         DropView( TargetMLC2 )
      END
   END

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: ObjectConstraints
//
/////////////////////////////////////////////////////////////////////////////
OBJECT CONSTRAINT OPERATION
ObjectConstraints( VIEW mMasLC BASED ON LOD mMasLC,
                   SHORT Event,
                   SHORT State )

   STRING ( 100 ) szCompositeLocation

   CASE Event
   OF   zOCE_ACTIVATE:

      // Go to build the flat display of all components subobject.
      //BuildCompositeEntries( mMasLC )
   TraceLineS( "*** Object Constraints", "" )
      

        /* end zOCE_ACTIVATE */
   OF   zOCE_ACTIVATE_EMPTY:

        /* end zOCE_ACTIVATE_EMPTY */
   OF   zOCE_COMMIT:

        /* end zOCE_COMMIT */
   OF   zOCE_DROPOI:

        /* end zOCE_DROPOI */
   END  /* case */

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: dFullHazardStatement
//
/////////////////////////////////////////////////////////////////////////////
DERIVED ATTRIBUTE OPERATION
dFullHazardStatement( VIEW mMasLC BASED ON LOD mMasLC,
                      STRING ( 32 ) InternalEntityStructure,
                      STRING ( 32 ) InternalAttribStructure,
                      SHORT GetOrSetFlag )

   STRING ( 256 ) szString
   STRING ( 256 ) szReplaceString
   STRING ( 256 ) szLocation
   SHORT nPosStart
   SHORT nPosEnd

   CASE GetOrSetFlag
   OF   zDERIVED_GET:

      IF mMasLC.M_HumanHazardSection  EXISTS

         szString = mMasLC.M_HumanHazardSection.PrecautionaryStatement
         nPosStart  = zSearchSubString( szString, "{{Precautionary Panel Location}}", "f", 0 )
         IF nPosStart >= 0

            nPosEnd = nPosStart + 32 // length of "{{Precautionary Panel Location}}"
            szReplaceString = ""
            szLocation = mMasLC.M_HumanHazardSection.PanelLoc1
            IF szLocation != ""
            // szReplaceString = szReplaceString + "[" + szLocation + "]"  now we expect brackets or parentheses or whatever to be included
               szReplaceString = szReplaceString + szLocation
            END

            szLocation = mMasLC.M_HumanHazardSection.PanelLoc2
            IF szLocation != ""
               szReplaceString = szReplaceString + szLocation
            END

            szLocation = mMasLC.M_HumanHazardSection.PanelLoc3
            IF szLocation != ""
               szReplaceString = szReplaceString + szLocation
            END

            szLocation = mMasLC.M_HumanHazardSection.PanelLoc4
            IF szLocation != ""
               szReplaceString = szReplaceString + szLocation
            END

            szLocation = mMasLC.M_HumanHazardSection.PanelLoc5
            IF szLocation != ""
               szReplaceString = szReplaceString + szLocation
            END

            zReplaceSubString( szString, nPosStart, nPosEnd, szReplaceString )
         END

         nPosStart  = zSearchSubString( szString, "{{Precautionary Label Location}}", "f", 0 )
         IF nPosStart >= 0

            nPosEnd = nPosStart + 32 // length of "{{Precautionary Label Location}}"
            szReplaceString = ""
            szLocation = mMasLC.M_HumanHazardSection.LabelLoc1
            IF szLocation != ""
            // szReplaceString = szReplaceString + "[" + szLocation + "]"  now we expect brackets or parentheses or whatever to be included
               szReplaceString = szReplaceString + szLocation
            END

            szLocation = mMasLC.M_HumanHazardSection.LabelLoc2
            IF szLocation != ""
               szReplaceString = szReplaceString + szLocation
            END

            szLocation = mMasLC.M_HumanHazardSection.LabelLoc3
            IF szLocation != ""
               szReplaceString = szReplaceString + szLocation
            END

            szLocation = mMasLC.M_HumanHazardSection.LabelLoc4
            IF szLocation != ""
               szReplaceString = szReplaceString + szLocation
            END

            szLocation = mMasLC.M_HumanHazardSection.LabelLoc5
            IF szLocation != ""
               szReplaceString = szReplaceString + szLocation
            END

            zReplaceSubString( szString, nPosStart, nPosEnd, szReplaceString )
         END

      ELSE
         szString = ""
      END

      // Store the calculated value in the object.
      StoreStringInRecord( mMasLC,
                           InternalEntityStructure,
                           InternalAttribStructure, szString )
      RETURN 0

      /* end zDERIVED_GET */
   OF   zDERIVED_SET:

      /* end zDERIVED_SET */
   END  /* case */

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: dDisplayDU_Statement
//
/////////////////////////////////////////////////////////////////////////////
DERIVED ATTRIBUTE OPERATION
dDisplayDU_Statement( VIEW mMasLC BASED ON LOD mMasLC,
                      STRING ( 32 ) InternalEntityStructure,
                      STRING ( 32 ) InternalAttribStructure,
                      SHORT GetOrSetFlag )

   STRING ( 10000 ) szDisplayStatement
   STRING ( 10000 ) szStatementText
   STRING ( 256 )   szTitle

   CASE GetOrSetFlag
   OF   zDERIVED_GET:

      IF mMasLC.M_DirectionsForUseStatement.Title != ""
         szTitle            = mMasLC.M_DirectionsForUseStatement.Title 
         szStatementText    = mMasLC.M_DirectionsForUseStatement.Text 
         szDisplayStatement = szTitle + " --- " + szStatementText
      ELSE
         szStatementText    = mMasLC.M_DirectionsForUseStatement.Text 
         szDisplayStatement = szStatementText
      END


      // Store the calculated value in the object.
      StoreStringInRecord( mMasLC,
                           InternalEntityStructure,
                           InternalAttribStructure, szDisplayStatement )
      RETURN 0

        /* end zDERIVED_GET */
   OF   zDERIVED_SET:

        /* end zDERIVED_SET */
   END  /* case */

END


/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: dTitleText
//
/////////////////////////////////////////////////////////////////////////////
DERIVED ATTRIBUTE OPERATION
dTitleText( VIEW mMasLC BASED ON LOD mMasLC,
            STRING ( 32 ) InternalEntityStructure,
            STRING ( 32 ) InternalAttribStructure,
            SHORT GetOrSetFlag )

   STRING ( 1000 ) szString
   STRING ( 256 ) szTitle

   CASE GetOrSetFlag
   OF   zDERIVED_GET:

      IF mMasLC.M_IngredientsStatement EXISTS
         szTitle = mMasLC.M_StorageDisposalStatement.Title
         IF szTitle != ""
            szString = "<strong>" + szTitle + ": </strong>" 
         ELSE
            szString = ""
         END
         
         szString = szString + mMasLC.M_StorageDisposalStatement.Text
      ELSE
         szString = ""
      END


      // Store the calculated value in the object.
      StoreStringInRecord( mMasLC,
                           InternalEntityStructure,
                           InternalAttribStructure, szString )
      RETURN 0

        /* end zDERIVED_GET */
   OF   zDERIVED_SET:

        /* end zDERIVED_SET */
   END  /* case */

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: dCombinedContainerVol
//
/////////////////////////////////////////////////////////////////////////////
DERIVED ATTRIBUTE OPERATION
dCombinedContainerVol( VIEW mMasLC BASED ON LOD mMasLC,
                       STRING ( 32 ) InternalEntityStructure,
                       STRING ( 32 ) InternalAttribStructure,
                       SHORT GetOrSetFlag )

   STRING ( 256 ) szCombinedName
   STRING ( 20 )  szContainerVolume

   CASE GetOrSetFlag
   OF   zDERIVED_GET:

      // Combine each volume name that drives this section.
      szCombinedName = "" 
      FOR EACH mMasLC.M_StorageDisposalDrivingConVol 
         GetStringFromAttributeByContext( szContainerVolume, mMasLC, "M_StorageDisposalDrivingConVol", "ContainerVolume", "", 20 )
         IF szCombinedName = ""
            szCombinedName = szContainerVolume
         ELSE
            szCombinedName = szCombinedName + ", " + szContainerVolume
         END
      END


      // Store the calculated value in the object.
      StoreStringInRecord( mMasLC,
                           InternalEntityStructure,
                           InternalAttribStructure, szCombinedName )
      RETURN 0

        /* end zDERIVED_GET */
   OF   zDERIVED_SET:

        /* end zDERIVED_SET */
   END  /* case */

END

/*************************************************************************************************
**    
**    OPERATION: dDisplayUsageName
**    
*************************************************************************************************/
DERIVED ATTRIBUTE OPERATION
dDisplayUsageName( VIEW mMasLC BASED ON LOD mMasLC,
                   STRING ( 32 ) InternalEntityStructure,
                   STRING ( 32 ) InternalAttribStructure,
                   SHORT GetOrSetFlag )

   VIEW mMasLC2 BASED ON LOD mMasLC
   STRING ( 32 )  szEntityName
   STRING ( 100 ) szUsageType
   STRING ( 100 ) szClassification
   STRING ( 100 ) szName
   STRING ( 100 ) szCombinedName
   STRING ( 3 )   szFootnoteNumber
   INTEGER        Count
   
   CASE GetOrSetFlag
   OF   zDERIVED_GET:

      // For a Claim Usage entity, this is the combined name of Classification and Name.
      // For all others, it is simply the name.
      GetEntityNameFromStructure( InternalEntityStructure, szEntityName )
      GetStringFromAttribute( szUsageType, mMasLC, szEntityName, "UsageType" )
      GetStringFromAttribute( szClassification, mMasLC, szEntityName, "ClaimsClassification" )
      GetStringFromAttribute( szName, mMasLC, szEntityName, "Name" )
      IF szUsageType = "C"
         szCombinedName = szClassification + " - " + szName
      ELSE
         szCombinedName = szName
      END
      
      // Set Footnote Number, if footnote exists.
      IF mMasLC.M_UsageFootnoteUsed EXISTS
         IF mMasLC.M_UsageFootnoteUsed.ID != ""
            SET CURSOR FIRST mMasLC.M_UsageFootnote WHERE mMasLC.M_UsageFootnote.ID = mMasLC.M_UsageFootnoteUsed.ID 
            IF mMasLC.M_UsageFootnote.wFootNoteRelativeNumber = ""
               // Relative numbers haven't be set, so set them here.
               CreateViewFromView( mMasLC2, mMasLC )
               Count = 0
               FOR EACH mMasLC2.M_UsageFootnote 
                  Count = Count + 1
                  mMasLC2.M_UsageFootnote.wFootNoteRelativeNumber = Count
               END
               DropView( mMasLC2 )
            END 
            szFootnoteNumber = mMasLC.M_UsageFootnote.wFootNoteRelativeNumber 
            szCombinedName = szCombinedName + "<sub> (" + szFootnoteNumber + ")</sub>"
         END
      END

      // Store the calculated value in the object.
      StoreStringInRecord( mMasLC,
                           InternalEntityStructure,
                           InternalAttribStructure, szCombinedName )

        /* end zDERIVED_GET */
   OF   zDERIVED_SET:

        /* end zDERIVED_SET */
   END  /* case */

END

/*************************************************************************************************
**    
**    OPERATION: dDisplayPathogenName
**    
*************************************************************************************************/
DERIVED ATTRIBUTE OPERATION
dDisplayPathogenName( VIEW mMasLC BASED ON LOD mMasLC,
                      STRING ( 32 ) InternalEntityStructure,
                      STRING ( 32 ) InternalAttribStructure,
                      SHORT GetOrSetFlag )

   VIEW mMasLC2 BASED ON LOD mMasLC
   STRING ( 32 )  szEntityName
   STRING ( 100 ) szUsageType
   STRING ( 100 ) szClassification
   STRING ( 100 ) szCombinedName
   STRING ( 3 )   szFootnoteNumber
   INTEGER        Count
   
   CASE GetOrSetFlag
   OF   zDERIVED_GET:

      // Combine the Footnote Number as a subscript to the Claim Name, if it exists.
      GetEntityNameFromStructure( InternalEntityStructure, szEntityName )
      GetStringFromAttribute( szUsageType, mMasLC, szEntityName, "UsageType" )
      GetStringFromAttribute( szClassification, mMasLC, szEntityName, "ClaimsClassification" )
      GetStringFromAttribute( szCombinedName, mMasLC, szEntityName, "Name" )
      
      // Set Footnote Number, if footnote exists.
      IF mMasLC.M_UsageFootnoteUsed EXISTS
         IF mMasLC.M_UsageFootnoteUsed.ID != ""
            SET CURSOR FIRST mMasLC.M_UsageFootnote WHERE mMasLC.M_UsageFootnote.ID = mMasLC.M_UsageFootnoteUsed.ID 
            IF mMasLC.M_UsageFootnote.wFootNoteRelativeNumber = ""
               // Relative numbers haven't be set, so set them here.
               CreateViewFromView( mMasLC2, mMasLC )
               Count = 0
               FOR EACH mMasLC2.M_UsageFootnote 
                  Count = Count + 1
                  mMasLC2.M_UsageFootnote.wFootNoteRelativeNumber = Count
               END
               DropView( mMasLC2 )
            END 
            szFootnoteNumber = mMasLC.M_UsageFootnote.wFootNoteRelativeNumber 
            szCombinedName = szCombinedName + "<sub> (" + szFootnoteNumber + ")</sub>"
         END
      END

      // Store the calculated value in the object.
      StoreStringInRecord( mMasLC,
                           InternalEntityStructure,
                           InternalAttribStructure, szCombinedName )

        /* end zDERIVED_GET */
   OF   zDERIVED_SET:

        /* end zDERIVED_SET */
   END  /* case */

END

/*************************************************************************************************
**    
**    OPERATION: BuildCompEntsWO_Usage
**    
*************************************************************************************************/
TRANSFORMATION OPERATION
BuildCompEntsWO_Usage( VIEW mMasLC BASED ON LOD mMasLC )

   // Build Composite entries without Usage Statements.
   
   // Go to build Composite.
   BuildFullCompEntries( mMasLC )
   
   // Remove Usage entries.
   FOR EACH mMasLC.CompositeComponentList 
      IF mMasLC.CompositeComponentList.DisplayType = "MarketingUsage" OR mMasLC.CompositeComponentList.DisplayType = "DirUseUsage"
         DELETE ENTITY mMasLC.CompositeComponentList NONE 
      END
   END

END

/*************************************************************************************************
**    
**    OPERATION: BuildCompositeEntries
**    
*************************************************************************************************/
TRANSFORMATION OPERATION
BuildCompositeEntries( VIEW mMasLC BASED ON LOD mMasLC )

   STRING ( 100 ) szCompositeLocation
   STRING ( 105 )   szDisplayValue
   STRING ( 100 )   szOriginalDisplayValue
   STRING ( 20 )    szUsageType
   INTEGER          MaxDisplayLength
   INTEGER          OriginalStringLength
   INTEGER          Count
   
   // Build Marketing Section and Statement components.
   FOR EACH mMasLC.M_MarketingSection 
      CREATE ENTITY mMasLC.CompositeComponentList 
      mMasLC.CompositeComponentList.Type              = "M_MarketingSection"
      mMasLC.CompositeComponentList.SelectLevel       = 1
      mMasLC.CompositeComponentList.DisplayType       = "Marketing"
      mMasLC.CompositeComponentList.OriginalTypeID    = mMasLC.M_MarketingSection.ID 
      IF mMasLC.M_MarketingSection.Title != ""
         IF mMasLC.M_MarketingSection.Name = ""
            mMasLC.CompositeComponentList.DisplayValue = mMasLC.M_MarketingSection.Title
         ELSE
            mMasLC.CompositeComponentList.DisplayValue = mMasLC.M_MarketingSection.Name + " - " +
                                                         mMasLC.M_MarketingSection.Title 
         END
      ELSE
         mMasLC.CompositeComponentList.DisplayValue = mMasLC.M_MarketingSection.Name 
      END
      mMasLC.CompositeComponentList.Title             = mMasLC.M_MarketingSection.Title
      mMasLC.CompositeComponentList.Value             = mMasLC.CompositeComponentList.DisplayValue
      mMasLC.CompositeComponentList.DisplayTypeIndent = mMasLC.CompositeComponentList.DisplayType
      
      FOR EACH mMasLC.M_MarketingStatement 
         CREATE ENTITY mMasLC.CompositeComponentList 
         mMasLC.CompositeComponentList.Type              = "M_MarketingStatement"
         mMasLC.CompositeComponentList.SelectLevel       = 2
         mMasLC.CompositeComponentList.DisplayType       = "Statement"
         mMasLC.CompositeComponentList.DisplayTypeIndent = "...Statement"
         mMasLC.CompositeComponentList.OriginalTypeID    = mMasLC.M_MarketingStatement.ID 
         mMasLC.CompositeComponentList.Title             = mMasLC.M_MarketingStatement.Title
         mMasLC.CompositeComponentList.Value             = mMasLC.M_MarketingStatement.Text
         
         szOriginalDisplayValue = mMasLC.M_MarketingStatement.Text 
         GetAttributeLength( OriginalStringLength, mMasLC, "M_MarketingStatement", "Text" )
         IF MaxDisplayLength < OriginalStringLength
            szDisplayValue = szOriginalDisplayValue + "....."
         ELSE
            szDisplayValue = szOriginalDisplayValue    
         END
         mMasLC.CompositeComponentList.DisplayValue = szDisplayValue
      END
   END

   // Build the flat display of all components subobject.
   /*MaxDisplayLength = 100
   
   // First clear any current entries.
   FOR EACH mMasLC.CompositeComponentList
      DELETE ENTITY mMasLC.CompositeComponentList NONE 
   END
   
   // General Section and Statements.
   FOR EACH mMasLC.M_GeneralSection 
      CREATE ENTITY mMasLC.CompositeComponentList 
      mMasLC.CompositeComponentList.Type              = "M_GeneralSection"
      mMasLC.CompositeComponentList.SelectLevel       = 1
      mMasLC.CompositeComponentList.DisplayType       = "General"
      mMasLC.CompositeComponentList.OriginalTypeID    = mMasLC.M_GeneralSection.ID 
      mMasLC.CompositeComponentList.DisplayValue      = mMasLC.M_GeneralSection.Title
      mMasLC.CompositeComponentList.Title             = mMasLC.M_GeneralSection.Title
      mMasLC.CompositeComponentList.Value             = mMasLC.CompositeComponentList.DisplayValue
      mMasLC.CompositeComponentList.DisplayTypeIndent = mMasLC.CompositeComponentList.DisplayType
      
      FOR EACH mMasLC.M_GeneralStatement 
         CREATE ENTITY mMasLC.CompositeComponentList 
         mMasLC.CompositeComponentList.Type              = "M_GeneralStatement"
         mMasLC.CompositeComponentList.SelectLevel       = 2
         mMasLC.CompositeComponentList.DisplayType       = "Statement"
         mMasLC.CompositeComponentList.DisplayTypeIndent = "...Statement"
         mMasLC.CompositeComponentList.OriginalTypeID    = mMasLC.M_GeneralStatement.ID 
         mMasLC.CompositeComponentList.Title             = mMasLC.M_GeneralStatement.Title
         mMasLC.CompositeComponentList.Value             = mMasLC.M_GeneralStatement.Text
         
         szOriginalDisplayValue = mMasLC.M_GeneralStatement.Text
         GetAttributeLength( OriginalStringLength, mMasLC, "M_GeneralStatement", "Text" )
         IF MaxDisplayLength < OriginalStringLength
            szDisplayValue = szOriginalDisplayValue + "....."
         ELSE
            szDisplayValue = szOriginalDisplayValue    
         END
         mMasLC.CompositeComponentList.DisplayValue   = szDisplayValue
      END
   END
   
   // Ingredients Section and Statements.
   FOR EACH mMasLC.M_IngredientsSection 
      CREATE ENTITY mMasLC.CompositeComponentList 
      mMasLC.CompositeComponentList.Type              = "M_IngredientsSection"
      mMasLC.CompositeComponentList.SelectLevel       = 1
      mMasLC.CompositeComponentList.DisplayType       = "Ingredients"
      mMasLC.CompositeComponentList.OriginalTypeID    = mMasLC.M_IngredientsSection.ID 
      mMasLC.CompositeComponentList.DisplayValue      = mMasLC.M_IngredientsSection.ActiveTitle 
      mMasLC.CompositeComponentList.Value             = mMasLC.CompositeComponentList.DisplayValue
      mMasLC.CompositeComponentList.DisplayTypeIndent = mMasLC.CompositeComponentList.DisplayType
      
      FOR EACH mMasLC.M_IngredientsStatement 
         CREATE ENTITY mMasLC.CompositeComponentList 
         mMasLC.CompositeComponentList.Type              = "M_IngredientsStatement"
         mMasLC.CompositeComponentList.SelectLevel       = 2
         mMasLC.CompositeComponentList.DisplayType       = "Statement"
         mMasLC.CompositeComponentList.DisplayTypeIndent = "...Statement"
         mMasLC.CompositeComponentList.OriginalTypeID    = mMasLC.M_IngredientsStatement.ID 
         mMasLC.CompositeComponentList.DisplayValue      = mMasLC.M_IngredientsStatement.ChemicalName 
         mMasLC.CompositeComponentList.Value             = mMasLC.M_IngredientsStatement.ChemicalName
      END
   END
   
   // StorageDisposal Section and Statements.
   FOR EACH mMasLC.M_StorageDisposalSection 
      CREATE ENTITY mMasLC.CompositeComponentList 
      mMasLC.CompositeComponentList.Type              = "M_StorageDisposalSection"
      mMasLC.CompositeComponentList.SelectLevel       = 1
      mMasLC.CompositeComponentList.DisplayType       = "StorageDisposal"
      mMasLC.CompositeComponentList.OriginalTypeID    = mMasLC.M_StorageDisposalSection.ID 
      mMasLC.CompositeComponentList.DisplayValue      = mMasLC.M_StorageDisposalSection.Title 
      mMasLC.CompositeComponentList.Title             = mMasLC.M_StorageDisposalSection.Title
      mMasLC.CompositeComponentList.Value             = mMasLC.CompositeComponentList.DisplayValue
      mMasLC.CompositeComponentList.DisplayTypeIndent = mMasLC.CompositeComponentList.DisplayType
      
      FOR EACH mMasLC.M_StorageDisposalStatement 
         CREATE ENTITY mMasLC.CompositeComponentList 
         mMasLC.CompositeComponentList.Type              = "M_StorageDisposalStatement"
         mMasLC.CompositeComponentList.SelectLevel       = 2
         mMasLC.CompositeComponentList.DisplayType       = "Statement"
         mMasLC.CompositeComponentList.DisplayTypeIndent = "...Statement"
         mMasLC.CompositeComponentList.OriginalTypeID    = mMasLC.M_StorageDisposalStatement.ID 
         mMasLC.CompositeComponentList.Title             = mMasLC.M_StorageDisposalStatement.Title
         mMasLC.CompositeComponentList.Value             = mMasLC.M_StorageDisposalStatement.Text
         
         szOriginalDisplayValue = mMasLC.M_StorageDisposalStatement.Text
         GetAttributeLength( OriginalStringLength, mMasLC, "M_StorageDisposalStatement", "Text" )
         IF MaxDisplayLength < OriginalStringLength
            szDisplayValue = szOriginalDisplayValue + "....."
         ELSE
            szDisplayValue = szOriginalDisplayValue    
         END
         mMasLC.CompositeComponentList.DisplayValue   = szDisplayValue
      END
   END
   
   // DirectionsForUse Section and Statements.
   FOR EACH mMasLC.M_DirectionsForUseSection 
      CREATE ENTITY mMasLC.CompositeComponentList 
      mMasLC.CompositeComponentList.Type              = "M_DirectionsForUseSection"
      mMasLC.CompositeComponentList.SelectLevel       = 1
      mMasLC.CompositeComponentList.DisplayType       = "DirectionsForUse"
      mMasLC.CompositeComponentList.OriginalTypeID    = mMasLC.M_DirectionsForUseSection.ID 
      IF mMasLC.M_DirectionsForUseSection.Title != ""
         IF mMasLC.M_DirectionsForUseSection.Name = ""
            mMasLC.CompositeComponentList.DisplayValue = mMasLC.M_DirectionsForUseSection.Title
         ELSE
            mMasLC.CompositeComponentList.DisplayValue = mMasLC.M_DirectionsForUseSection.Name + " - " +
                                                         mMasLC.M_DirectionsForUseSection.Title 
         END
      ELSE
         mMasLC.CompositeComponentList.DisplayValue = mMasLC.M_DirectionsForUseSection.Name 
      END
      mMasLC.CompositeComponentList.Title             = mMasLC.M_DirectionsForUseSection.Title
      mMasLC.CompositeComponentList.Value             = mMasLC.CompositeComponentList.DisplayValue
      mMasLC.CompositeComponentList.DisplayTypeIndent = mMasLC.CompositeComponentList.DisplayType
      
      FOR EACH mMasLC.M_DirectionsForUseStatement 
         CREATE ENTITY mMasLC.CompositeComponentList 
         mMasLC.CompositeComponentList.Type              = "M_DirectionsForUseStatement"
         mMasLC.CompositeComponentList.SelectLevel       = 2
         mMasLC.CompositeComponentList.DisplayType       = "Statement"
         mMasLC.CompositeComponentList.DisplayTypeIndent = "...Statement"
         mMasLC.CompositeComponentList.OriginalTypeID    = mMasLC.M_DirectionsForUseStatement.ID 
         mMasLC.CompositeComponentList.Title             = mMasLC.M_DirectionsForUseStatement.Title
         mMasLC.CompositeComponentList.Value             = mMasLC.M_DirectionsForUseStatement.Text
         
         szOriginalDisplayValue = mMasLC.M_DirectionsForUseStatement.Text
         GetAttributeLength( OriginalStringLength, mMasLC, "M_DirectionsForUseStatement", "Text" )
         IF MaxDisplayLength < OriginalStringLength
            szDisplayValue = szOriginalDisplayValue + "....."
         ELSE
            szDisplayValue = szOriginalDisplayValue    
         END
         mMasLC.CompositeComponentList.DisplayValue   = szDisplayValue
      END
      
      // Add any Usage entries.
      // First sort by Usage Type, but keeping the entries in their original order otherwise.
      Count = 0
      FOR EACH mMasLC.M_DirectionsUsageOrdering 
         Count = Count + 1
         mMasLC.M_DirectionsUsageOrdering.wSortOrder = Count
      END
      OrderEntityForView( mMasLC, "M_DirectionsUsageOrdering", "M_DirectionsUsage.UsageType A wSortOrder A" )
      FOR EACH mMasLC.M_DirectionsUsageOrdering 
         CREATE ENTITY mMasLC.CompositeComponentList 
         GetStringFromAttributeByContext( szUsageType, mMasLC, "M_DirectionsUsage", "UsageType", "FullUsageType", 20 )
         mMasLC.CompositeComponentList.Type              = "M_DirectionsUsageOrdering"
         mMasLC.CompositeComponentList.SelectLevel       = 3
         mMasLC.CompositeComponentList.DisplayType       = "DirUseUsage"
         mMasLC.CompositeComponentList.DisplayTypeIndent = "...DU " + szUsageType
         mMasLC.CompositeComponentList.OriginalTypeID    = mMasLC.M_DirectionsUsage.ID 
         mMasLC.CompositeComponentList.Value             = mMasLC.M_DirectionsUsage.Name 
         mMasLC.CompositeComponentList.DisplayValue      = mMasLC.M_DirectionsUsage.Name 
      END
   END
   
   // Marketing Section and Statements.
   FOR EACH mMasLC.M_MarketingSection 
      CREATE ENTITY mMasLC.CompositeComponentList 
      mMasLC.CompositeComponentList.Type              = "M_MarketingSection"
      mMasLC.CompositeComponentList.SelectLevel       = 1
      mMasLC.CompositeComponentList.DisplayType       = "Marketing"
      mMasLC.CompositeComponentList.OriginalTypeID    = mMasLC.M_MarketingSection.ID 
      IF mMasLC.M_MarketingSection.Title != ""
         IF mMasLC.M_MarketingSection.Name = ""
            mMasLC.CompositeComponentList.DisplayValue = mMasLC.M_MarketingSection.Title
         ELSE
            mMasLC.CompositeComponentList.DisplayValue = mMasLC.M_MarketingSection.Name + " - " +
                                                         mMasLC.M_MarketingSection.Title 
         END
      ELSE
         mMasLC.CompositeComponentList.DisplayValue = mMasLC.M_MarketingSection.Name 
      END
      mMasLC.CompositeComponentList.Title             = mMasLC.M_MarketingSection.Title
      mMasLC.CompositeComponentList.Value             = mMasLC.CompositeComponentList.DisplayValue
      mMasLC.CompositeComponentList.DisplayTypeIndent = mMasLC.CompositeComponentList.DisplayType
      
      FOR EACH mMasLC.M_MarketingStatement 
         CREATE ENTITY mMasLC.CompositeComponentList 
         mMasLC.CompositeComponentList.Type              = "M_MarketingStatement"
         mMasLC.CompositeComponentList.SelectLevel       = 2
         mMasLC.CompositeComponentList.DisplayType       = "Statement"
         mMasLC.CompositeComponentList.DisplayTypeIndent = "...Statement"
         mMasLC.CompositeComponentList.OriginalTypeID    = mMasLC.M_MarketingStatement.ID 
         mMasLC.CompositeComponentList.Title             = mMasLC.M_MarketingStatement.Title
         mMasLC.CompositeComponentList.Value             = mMasLC.M_MarketingStatement.Text
         
         szOriginalDisplayValue = mMasLC.M_MarketingStatement.Text 
         GetAttributeLength( OriginalStringLength, mMasLC, "M_MarketingStatement", "Text" )
         IF MaxDisplayLength < OriginalStringLength
            szDisplayValue = szOriginalDisplayValue + "....."
         ELSE
            szDisplayValue = szOriginalDisplayValue    
         END
         mMasLC.CompositeComponentList.DisplayValue = szDisplayValue
      END
      
      // Add any Usage entries.
      // First sort by Usage Type, but keeping the entries in their original order otherwise.
      Count = 0
      FOR EACH mMasLC.M_MarketingUsageOrdering 
         Count = Count + 1
         mMasLC.M_MarketingUsageOrdering.wSortOrder = Count
      END
      OrderEntityForView( mMasLC, "M_MarketingUsageOrdering", "M_MarketingUsage.UsageType A wSortOrder A" )
      FOR EACH mMasLC.M_MarketingUsageOrdering 
         CREATE ENTITY mMasLC.CompositeComponentList 
         GetStringFromAttributeByContext( szUsageType, mMasLC, "M_MarketingUsage", "UsageType", "FullUsageType", 20 )
         mMasLC.CompositeComponentList.Type              = "M_MarketingUsageOrdering"
         mMasLC.CompositeComponentList.SelectLevel       = 3
         mMasLC.CompositeComponentList.DisplayType       = "MarketingUsage"
         mMasLC.CompositeComponentList.DisplayTypeIndent = "...Mktg " + szUsageType
         mMasLC.CompositeComponentList.OriginalTypeID    = mMasLC.M_MarketingUsage.ID 
         mMasLC.CompositeComponentList.Value             = mMasLC.M_MarketingUsage.Name 
         mMasLC.CompositeComponentList.DisplayValue      = mMasLC.M_MarketingUsage.Name 
      END
   END
   
   // Hazards Section
   CREATE ENTITY mMasLC.CompositeComponentList 
   mMasLC.CompositeComponentList.Type              = "M_HumanHazardSection"
   mMasLC.CompositeComponentList.SelectLevel       = 1
   mMasLC.CompositeComponentList.DisplayTypeIndent = "Hazards"
   mMasLC.CompositeComponentList.OriginalTypeID    = mMasLC.M_HumanHazardSection.ID 
   mMasLC.CompositeComponentList.DisplayValue      = ""
   
   CREATE ENTITY mMasLC.CompositeComponentList 
   mMasLC.CompositeComponentList.SelectLevel       = 2
   mMasLC.CompositeComponentList.DisplayTypeIndent = "...Signal Word"
   mMasLC.CompositeComponentList.DisplayValue      = mMasLC.M_HumanHazardSection.EPA_SignalWord 
   
   CREATE ENTITY mMasLC.CompositeComponentList 
   mMasLC.CompositeComponentList.SelectLevel       = 2
   mMasLC.CompositeComponentList.DisplayTypeIndent = "...Child Warning"
   mMasLC.CompositeComponentList.DisplayValue      = mMasLC.M_HumanHazardSection.EPA_ChildHazardWarning 
   
   CREATE ENTITY mMasLC.CompositeComponentList 
   mMasLC.CompositeComponentList.SelectLevel       = 2
   mMasLC.CompositeComponentList.DisplayTypeIndent = "...Precautionary Stmt"
   mMasLC.CompositeComponentList.DisplayValue      = mMasLC.M_HumanHazardSection.PrecautionaryStatement 
   
   CREATE ENTITY mMasLC.CompositeComponentList 
   mMasLC.CompositeComponentList.DisplayTypeIndent = "Location"
   szCompositeLocation = "..." + mMasLC.M_HumanHazardSection.PanelLoc1 
   IF mMasLC.M_HumanHazardSection.PanelLoc2 != ""
      szCompositeLocation = szCompositeLocation + " / " + mMasLC.M_HumanHazardSection.PanelLoc2 
   END
   IF mMasLC.M_HumanHazardSection.PanelLoc3 != ""
      szCompositeLocation = szCompositeLocation + " / " + mMasLC.M_HumanHazardSection.PanelLoc3
   END
   IF mMasLC.M_HumanHazardSection.PanelLoc4 != ""
      szCompositeLocation = szCompositeLocation + " / " + mMasLC.M_HumanHazardSection.PanelLoc4 
   END
   IF mMasLC.M_HumanHazardSection.PanelLoc5 != ""
      szCompositeLocation = szCompositeLocation + " / " + mMasLC.M_HumanHazardSection.PanelLoc5 
   END
   mMasLC.CompositeComponentList.DisplayValue   = szCompositeLocation*/
   
   // Usage Section
   /*CREATE ENTITY mMasLC.CompositeComponentList 
   mMasLC.CompositeComponentList.Type           = "UsageSection"
   mMasLC.CompositeComponentList.DisplayType    = "Usage"
   mMasLC.CompositeComponentList.OriginalTypeID = mMasLC.M_Usage.ID 
   mMasLC.CompositeComponentList.DisplayValue   = ""
   FOR EACH mMasLC.M_Usage 
      CREATE ENTITY mMasLC.CompositeComponentList 
      mMasLC.CompositeComponentList.Type           = "M_Usage"
      GetStringFromAttributeByContext( szUsageType, mMasLC, "M_Usage", "UsageType", "FullUsageType", 20 )
      mMasLC.CompositeComponentList.DisplayType    = "..." + szUsageType 
      mMasLC.CompositeComponentList.OriginalTypeID = mMasLC.M_Usage.ID 
      mMasLC.CompositeComponentList.DisplayValue   = mMasLC.M_Usage.Name 
   END*/

END

/*************************************************************************************************
**    
**    OPERATION: BuildFullCompEntries
**    
*************************************************************************************************/
TRANSFORMATION OPERATION
BuildFullCompEntries( VIEW mMasLC BASED ON LOD mMasLC )
   
   STRING ( 100 ) szCompositeLocation
   STRING ( 105 )   szDisplayValue
   STRING ( 100 )   szOriginalDisplayValue
   STRING ( 20 )    szUsageType
   INTEGER          MaxDisplayLength
   INTEGER          OriginalStringLength

   // Build the flat display of all components subobject.
   MaxDisplayLength = 100
   
   // First clear any current entries.
   FOR EACH mMasLC.CompositeComponentList
      DELETE ENTITY mMasLC.CompositeComponentList NONE 
   END
   
   // General Section and Statements.
   FOR EACH mMasLC.M_GeneralSection 
      CREATE ENTITY mMasLC.CompositeComponentList 
      mMasLC.CompositeComponentList.Type              = "M_GeneralSection"
      mMasLC.CompositeComponentList.DisplayType       = "General"
      mMasLC.CompositeComponentList.OriginalTypeID    = mMasLC.M_GeneralSection.ID 
      mMasLC.CompositeComponentList.DisplayValue      = mMasLC.M_GeneralSection.Title
      mMasLC.CompositeComponentList.Title             = mMasLC.M_GeneralSection.Title
      mMasLC.CompositeComponentList.Value             = mMasLC.CompositeComponentList.DisplayValue
      mMasLC.CompositeComponentList.DisplayTypeIndent = mMasLC.CompositeComponentList.DisplayType
      
      FOR EACH mMasLC.M_GeneralStatement 
         CREATE ENTITY mMasLC.CompositeComponentList 
         mMasLC.CompositeComponentList.Type              = "M_GeneralStatement"
         mMasLC.CompositeComponentList.DisplayType       = "Statement"
         mMasLC.CompositeComponentList.DisplayTypeIndent = "...Statement"
         mMasLC.CompositeComponentList.OriginalTypeID    = mMasLC.M_GeneralStatement.ID 
         mMasLC.CompositeComponentList.Title             = mMasLC.M_GeneralStatement.Title
         mMasLC.CompositeComponentList.Value             = mMasLC.M_GeneralStatement.Text
         mMasLC.CompositeComponentList.DisplayValue      = mMasLC.CompositeComponentList.Value
      END
   END
   
   // Ingredients Section and Statements.
   FOR EACH mMasLC.M_IngredientsSection 
      CREATE ENTITY mMasLC.CompositeComponentList 
      mMasLC.CompositeComponentList.Type              = "M_IngredientsSection"
      mMasLC.CompositeComponentList.DisplayType       = "Ingredients"
      mMasLC.CompositeComponentList.OriginalTypeID    = mMasLC.M_IngredientsSection.ID 
      mMasLC.CompositeComponentList.DisplayValue      = mMasLC.M_IngredientsSection.ActiveTitle 
      mMasLC.CompositeComponentList.Value             = mMasLC.CompositeComponentList.DisplayValue
      mMasLC.CompositeComponentList.DisplayTypeIndent = mMasLC.CompositeComponentList.DisplayType
      
      FOR EACH mMasLC.M_IngredientsStatement 
         CREATE ENTITY mMasLC.CompositeComponentList 
         mMasLC.CompositeComponentList.Type              = "M_IngredientsStatement"
         mMasLC.CompositeComponentList.DisplayType       = "Statement"
         mMasLC.CompositeComponentList.DisplayTypeIndent = "...Statement"
         mMasLC.CompositeComponentList.OriginalTypeID    = mMasLC.M_IngredientsStatement.ID 
         mMasLC.CompositeComponentList.DisplayValue      = mMasLC.M_IngredientsStatement.ChemicalName 
         mMasLC.CompositeComponentList.Value             = mMasLC.M_IngredientsStatement.ChemicalName
      END
   END
   
   // StorageDisposal Section and Statements.
   FOR EACH mMasLC.M_StorageDisposalSection 
      CREATE ENTITY mMasLC.CompositeComponentList 
      mMasLC.CompositeComponentList.Type              = "M_StorageDisposalSection"
      mMasLC.CompositeComponentList.DisplayType       = "StorageDisposal"
      mMasLC.CompositeComponentList.OriginalTypeID    = mMasLC.M_StorageDisposalSection.ID 
      mMasLC.CompositeComponentList.DisplayValue      = mMasLC.M_StorageDisposalSection.Title 
      mMasLC.CompositeComponentList.Title             = mMasLC.M_StorageDisposalSection.Title
      mMasLC.CompositeComponentList.Value             = mMasLC.CompositeComponentList.DisplayValue
      mMasLC.CompositeComponentList.DisplayTypeIndent = mMasLC.CompositeComponentList.DisplayType
      
      FOR EACH mMasLC.M_StorageDisposalStatement 
         CREATE ENTITY mMasLC.CompositeComponentList 
         mMasLC.CompositeComponentList.Type              = "M_StorageDisposalStatement"
         mMasLC.CompositeComponentList.DisplayType       = "Statement"
         mMasLC.CompositeComponentList.DisplayTypeIndent = "...Statement"
         mMasLC.CompositeComponentList.OriginalTypeID    = mMasLC.M_StorageDisposalStatement.ID 
         mMasLC.CompositeComponentList.Title             = mMasLC.M_StorageDisposalStatement.Title
         mMasLC.CompositeComponentList.Value             = mMasLC.M_StorageDisposalStatement.Text
         mMasLC.CompositeComponentList.DisplayValue      = mMasLC.CompositeComponentList.Value
      END
   END
   
   // DirectionsForUse Section and Statements.
   FOR EACH mMasLC.M_DirectionsForUseSection 
      CREATE ENTITY mMasLC.CompositeComponentList 
      mMasLC.CompositeComponentList.Type              = "M_DirectionsForUseSection"
      mMasLC.CompositeComponentList.DisplayType       = "DirectionsForUse"
      mMasLC.CompositeComponentList.OriginalTypeID    = mMasLC.M_DirectionsForUseSection.ID 
      mMasLC.CompositeComponentList.DisplayValue      = mMasLC.M_DirectionsForUseSection.Title 
      mMasLC.CompositeComponentList.Title             = mMasLC.M_DirectionsForUseSection.Title
      mMasLC.CompositeComponentList.Value             = mMasLC.CompositeComponentList.DisplayValue
      mMasLC.CompositeComponentList.DisplayTypeIndent = mMasLC.CompositeComponentList.DisplayType
      
      FOR EACH mMasLC.M_DirectionsForUseStatement 
         CREATE ENTITY mMasLC.CompositeComponentList 
         mMasLC.CompositeComponentList.Type              = "M_DirectionsForUseStatement"
         mMasLC.CompositeComponentList.DisplayType       = "Statement"
         mMasLC.CompositeComponentList.DisplayTypeIndent = "...Statement"
         mMasLC.CompositeComponentList.OriginalTypeID    = mMasLC.M_DirectionsForUseStatement.ID 
         mMasLC.CompositeComponentList.Title             = mMasLC.M_DirectionsForUseStatement.Title
         mMasLC.CompositeComponentList.Value             = mMasLC.M_DirectionsForUseStatement.Text
         mMasLC.CompositeComponentList.DisplayValue      = mMasLC.CompositeComponentList.Value
      END
   END
   
   // Marketing Section and Statements.
   FOR EACH mMasLC.M_MarketingSection 
      CREATE ENTITY mMasLC.CompositeComponentList 
      mMasLC.CompositeComponentList.Type           = "M_MarketingSection"
      mMasLC.CompositeComponentList.DisplayType    = "Marketing"
      mMasLC.CompositeComponentList.OriginalTypeID = mMasLC.M_MarketingSection.ID 
      mMasLC.CompositeComponentList.DisplayValue   = mMasLC.M_MarketingSection.Title 
      mMasLC.CompositeComponentList.Title             = mMasLC.M_MarketingSection.Title
      mMasLC.CompositeComponentList.Value             = mMasLC.CompositeComponentList.DisplayValue
      mMasLC.CompositeComponentList.DisplayTypeIndent = mMasLC.CompositeComponentList.DisplayType
      
      FOR EACH mMasLC.M_MarketingStatement 
         CREATE ENTITY mMasLC.CompositeComponentList 
         mMasLC.CompositeComponentList.Type              = "M_MarketingStatement"
         mMasLC.CompositeComponentList.DisplayType       = "Statement"
         mMasLC.CompositeComponentList.DisplayTypeIndent = "...Statement"
         mMasLC.CompositeComponentList.OriginalTypeID    = mMasLC.M_MarketingStatement.ID 
         mMasLC.CompositeComponentList.Title             = mMasLC.M_MarketingStatement.Title
         mMasLC.CompositeComponentList.Value             = mMasLC.M_MarketingStatement.Text
         mMasLC.CompositeComponentList.DisplayValue      = mMasLC.CompositeComponentList.Value
      END
   END
   
   // Hazards Section
   CREATE ENTITY mMasLC.CompositeComponentList 
   mMasLC.CompositeComponentList.Type           = "M_HumanHazardSection"
   mMasLC.CompositeComponentList.DisplayType    = "Hazards"
   mMasLC.CompositeComponentList.OriginalTypeID = mMasLC.M_HumanHazardSection.ID 
   mMasLC.CompositeComponentList.DisplayValue   = ""
   
   CREATE ENTITY mMasLC.CompositeComponentList 
   mMasLC.CompositeComponentList.DisplayType    = "...Signal Word"
   mMasLC.CompositeComponentList.DisplayValue   = mMasLC.M_HumanHazardSection.EPA_SignalWord 
   
   CREATE ENTITY mMasLC.CompositeComponentList 
   mMasLC.CompositeComponentList.DisplayType    = "...Child Warning"
   mMasLC.CompositeComponentList.DisplayValue   = mMasLC.M_HumanHazardSection.EPA_ChildHazardWarning 
   
   CREATE ENTITY mMasLC.CompositeComponentList 
   mMasLC.CompositeComponentList.DisplayType    = "...Precautionary Stmt"
   mMasLC.CompositeComponentList.DisplayValue   = mMasLC.M_HumanHazardSection.PrecautionaryStatement 
   
   CREATE ENTITY mMasLC.CompositeComponentList 
   mMasLC.CompositeComponentList.DisplayType    = "Location"
   szCompositeLocation = "..." + mMasLC.M_HumanHazardSection.PanelLoc1 
   IF mMasLC.M_HumanHazardSection.PanelLoc2 != ""
      szCompositeLocation = szCompositeLocation + " / " + mMasLC.M_HumanHazardSection.PanelLoc2 
   END
   IF mMasLC.M_HumanHazardSection.PanelLoc3 != ""
      szCompositeLocation = szCompositeLocation + " / " + mMasLC.M_HumanHazardSection.PanelLoc3
   END
   IF mMasLC.M_HumanHazardSection.PanelLoc4 != ""
      szCompositeLocation = szCompositeLocation + " / " + mMasLC.M_HumanHazardSection.PanelLoc4 
   END
   IF mMasLC.M_HumanHazardSection.PanelLoc5 != ""
      szCompositeLocation = szCompositeLocation + " / " + mMasLC.M_HumanHazardSection.PanelLoc5 
   END
   mMasLC.CompositeComponentList.DisplayValue   = szCompositeLocation

END

/*************************************************************************************************
**    
**    OPERATION: BuildUsageSelectEnts
**    
*************************************************************************************************/
TRANSFORMATION OPERATION
BuildUsageSelectEnts( VIEW mMasLC BASED ON LOD mMasLC )

   STRING ( 32 ) szOrderingEntityName
   STRING ( 32 ) szUsageEntityName
   STRING ( 20 ) szUsageType
   STRING ( 20 ) szSelectedUsageType
   STRING ( 20 ) szClaimsClassification
   STRING ( 20 ) szSelectedClaimsClassification
   SHORT         nRC

   // Use the source and target information defined in the UsageSelection entity to include the proper
   // M_UsageSelectTarget and M_UsageSelectSource entities for setting up the selection of Usage entries.
   szOrderingEntityName           = mMasLC.UsageSelection.TargetOrderingEntityName 
   szUsageEntityName              = mMasLC.UsageSelection.TargetUsageEntityName 
   szSelectedUsageType            = mMasLC.UsageSelection.UsageType 
   szSelectedClaimsClassification = mMasLC.UsageSelection.ClaimsClassification 
   
   // First build the target entries from the current Target Ordering and Usage Entity Names.
   // This is of the form "FOR EACH mMasLC.M_MarketingUsageOrdering "
   nRC = SetCursorFirstEntity( mMasLC, szOrderingEntityName, "" )
   LOOP WHILE nRC >= zCURSOR_SET
      GetStringFromAttribute( szUsageType, mMasLC, szUsageEntityName, "UsageType" )
      GetStringFromAttribute( szClaimsClassification, mMasLC, szUsageEntityName, "ClaimsClassification" )
      IF szUsageType = szSelectedUsageType AND szClaimsClassification = szSelectedClaimsClassification
         IncludeSubobjectFromSubobject( mMasLC, "M_UsageSelectTarget", mMasLC, szUsageEntityName, zPOS_AFTER )
      END
      
      nRC = SetCursorNextEntity( mMasLC, szOrderingEntityName, "" )
   END
   
   // Next build the Source entries from each M_Usage entry of the requested type.
   FOR EACH mMasLC.M_Usage 
      IF mMasLC.M_Usage.UsageType = szSelectedUsageType AND mMasLC.M_Usage.ClaimsClassification = szSelectedClaimsClassification
         INCLUDE mMasLC.M_UsageSelectSource FROM mMasLC.M_Usage 
      END
   END

END

/*************************************************************************************************
**    
**    OPERATION: BuildUsageWorkEnts
**    
*************************************************************************************************/
TRANSFORMATION OPERATION
BuildUsageWorkEnts( VIEW mMasLC BASED ON LOD mMasLC,
                    STRING ( 1 ) szDirUseOrMarketingType )

   STRING ( 32 )  szWorkEntityName
   STRING ( 1 )   szUsageType
   STRING ( 10 )  szClaimsClassification

   // Build the work entities of the form, "DirectionsAppType" for each M_DirectionsUsage or M_MarketingUsage,
   // depending on whether the szDirUseOrMarketingType value is "D" or "M".
   
   /*IF szDirUseOrMarketingType = "D"
      // Directions for Use work entities.
      FOR EACH mMasLC.M_DirectionsUsageOrdering 
         szUsageType = mMasLC.M_DirectionsUsage.UsageType 
         IF szUsageType = "C"
            // For Claim type, we need to determine ClaimsClassification.
            szClaimsClassification = mMasLC.M_DirectionsUsage.ClaimsClassification 
            IF szClaimsClassification = "Fungi"
               IF mMasLC.DirectionsFungi DOES NOT EXIST
                  CREATE ENTITY mMasLC.DirectionsFungi 
               END
            ELSE 
               IF szClaimsClassification = "Bacteria"
                  IF mMasLC.DirectionsBacteria DOES NOT EXIST
                     CREATE ENTITY mMasLC.DirectionsBacteria 
                  END
               ELSE
                  IF szClaimsClassification = "Viruses"
                     IF mMasLC.DirectionsViruses DOES NOT EXIST
                        CREATE ENTITY mMasLC.DirectionsViruses 
                     END
                  ELSE
                     // Protazoa (nothing is currently done for this.
                  END
               END
            END
         ELSE
            IF szUsageType = "S"
               // Surface
               IF mMasLC.DirectionsSurface DOES NOT EXIST
                  CREATE ENTITY mMasLC.DirectionsSurface 
               END
            ELSE
               IF szUsageType = "U"
                  // Area of Use 
                  IF mMasLC.DirectionsAreasOfUse DOES NOT EXIST
                     CREATE ENTITY mMasLC.DirectionsAreasOfUse 
                  END
               ELSE
                  // Application Type
                  IF mMasLC.DirectionsAppType DOES NOT EXIST
                     CREATE ENTITY mMasLC.DirectionsAppType 
                  END
               END
            END
         END
      END
   ELSE
      // Marketing work entities.
      FOR EACH mMasLC.M_MarketingUsageOrdering 
         szUsageType = mMasLC.M_MarketingUsage.UsageType 
         IF szUsageType = "C"
            // For Claim type, we need to determine ClaimsClassification.
            szClaimsClassification = mMasLC.M_MarketingUsage.ClaimsClassification 
            IF szClaimsClassification = "Fungi"
               IF mMasLC.MarketingFungi DOES NOT EXIST
                  CREATE ENTITY mMasLC.MarketingFungi 
               END
            ELSE 
               IF szClaimsClassification = "Bacteria"
                  IF mMasLC.MarketingBacteria DOES NOT EXIST
                     CREATE ENTITY mMasLC.MarketingBacteria 
                  END
               ELSE
                  IF szClaimsClassification = "Viruses"
                     IF mMasLC.MarketingViruses DOES NOT EXIST
                        CREATE ENTITY mMasLC.MarketingViruses 
                     END
                  ELSE
                     // Protazoa (nothing is currently done for this.
                  END
               END
            END
         ELSE
            IF szUsageType = "S"
               // Surface
               IF mMasLC.MarketingSurface DOES NOT EXIST
                  CREATE ENTITY mMasLC.MarketingSurface 
               END
            ELSE
               IF szUsageType = "U"
                  // Area of Use 
                  IF mMasLC.MarketingAreasOfUse DOES NOT EXIST
                     CREATE ENTITY mMasLC.MarketingAreasOfUse 
                  END
               ELSE
                  // Application Type
                  IF mMasLC.MarketingAppType DOES NOT EXIST
                     CREATE ENTITY mMasLC.MarketingAppType 
                  END
               END
            END
         END
      END
   END*/

END

/*************************************************************************************************
**    
**    OPERATION: SetMLC_SelectedFlags
**    
*************************************************************************************************/
TRANSFORMATION OPERATION
SetMLC_SelectedFlags( VIEW mMasLC BASED ON LOD mMasLC,
                      VIEW mSubLC BASED ON LOD mSubLC )

   // Select mMLC Component entries from Components currently in the mSLC.
   
   // First, initialize mMLC flags to null.
   FOR EACH mMasLC.CompositeComponentList 
      mMasLC.CompositeComponentList.Selected = ""
   END
   
   // Then set those from mSLC.
   FOR EACH mSubLC.CompositeComponentList 
      IF mSubLC.CompositeComponentList.OriginalTypeID != ""
         SET CURSOR FIRST mMasLC.CompositeComponentList 
                    WHERE mMasLC.CompositeComponentList.OriginalTypeID = mSubLC.CompositeComponentList.OriginalTypeID
                      AND mMasLC.CompositeComponentList.DisplayType    = mSubLC.CompositeComponentList.DisplayType 
         IF RESULT >= zCURSOR_SET
            mMasLC.CompositeComponentList.Selected = "Y"
         END
      END
   END
   
   // Finally, set any remaining components with null Type to selected. (This only effects display and not the inclusion of 
   // MLC components in the SLC, as components with null Type are not processed.
   FOR EACH mMasLC.CompositeComponentList 
      IF mMasLC.CompositeComponentList.Selected = ""
         IF mMasLC.CompositeComponentList.Type = ""
            mMasLC.CompositeComponentList.Selected = "Y"
         END
      END
   END

END

