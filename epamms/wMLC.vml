/////////////////////////////////////////////////////////////////////////////
// Project ePamms
//
// This is a part of the ePamms applications package.
// Copyright (c) 2007 - 2016 Arksoft, Inc.
// All Rights Reserved.
//
// SUBSYSTEM:    wMLC          - Primary Registrant Label Content operations
// FILE:         wMLC.vml
// AUTHOR:       Doug Sorensen
//
/////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: CancelAndReturnMLC
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelAndReturnMLC( VIEW ViewToWindow )

   VIEW mMasProd REGISTERED AS mMasProd
   VIEW mMasLC   REGISTERED AS mMasLC
   STRING ( 1 ) szFound
   INTEGER      MasProdID

   // Drop current MLC.
   DropObjectInstance( mMasLC )

   // Reactivate mMasProd to get updated list of MasterLabelContent entries, in case MLC was saved earlier.
   MasProdID = mMasProd.MasterProduct.ID
   DropObjectInstance( mMasProd )
   ACTIVATE mMasProd WHERE mMasProd.MasterProduct.ID = MasProdID
   NAME VIEW mMasProd "mMasProd"

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: SaveAndReturnMLC
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SaveAndReturnMLC( VIEW ViewToWindow )

   VIEW mMasProd REGISTERED AS mMasProd
   VIEW mMasLC   REGISTERED AS mMasLC
   STRING ( 1 ) szFound
   INTEGER      MasProdID
   INTEGER      lRC

   // Reuse Save operation and drop current MLC.
   lRC = SaveMLC( ViewToWindow )
   IF lRC != 0
      RETURN lRC
   END
   DropObjectInstance( mMasLC )

   // Reactivate mMasProd to get updated list of MasterLabelContent entries.
   MasProdID = mMasProd.MasterProduct.ID
   DropObjectInstance( mMasProd )
   ACTIVATE mMasProd WHERE mMasProd.MasterProduct.ID = MasProdID
   NAME VIEW mMasProd "mMasProd"

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: SaveMLC
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SaveMLC( VIEW ViewToWindow )

   VIEW mMasProd REGISTERED AS mMasProd
   VIEW mMasLC   REGISTERED AS mMasLC
   VIEW wWebXfer REGISTERED AS wWebXfer
   STRING ( 1 ) szFound
   INTEGER      MasProdID

   // Ensure section name is not blank and is unique.
   IF mMasLC.MasterLabelContent.Version = ""
      MessageSend( ViewToWindow, "", "Update Master Product Content",
                   "The Master Product Content Version cannot be blank.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      RETURN 2

   ELSE
      // See if there is a Version in the mMasProd object with the current Version value that is not the current mMasLC.
      szFound = ""
      FOR EACH mMasProd.MasterLabelContent
         IF mMasProd.MasterLabelContent.Version = mMasLC.MasterLabelContent.Version AND
            mMasProd.MasterLabelContent.ID     != mMasLC.MasterLabelContent.ID

            szFound = "Y"
         END
      END
      IF szFound = "Y"
         MessageSend( ViewToWindow, "", "Update Master Product Content",
                      "The Master Product Content Version must be unique.",
                      zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
         SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
         RETURN 2
      END
   END

   IF mMasLC.MasterLabelContent.Finalized = ""
      mMasLC.MasterLabelContent.Finalized = "W"
      mMasLC.MasterLabelContent.CreatedDateTime = wWebXfer.Root.dCurrentDateTime
      mMasLC.MasterLabelContent.RevisionDate = wWebXfer.Root.dCurrentDateTime
   END
   IF mMasLC.MasterProduct DOES NOT EXIST
      IncludeSubobjectFromSubobject( mMasLC, "MasterProduct",
                                     mMasProd, "MasterProduct", zPOS_BEFORE )
   END
   wWebXfer.Root.CurrentContentType = ""

   COMMIT mMasLC
   SetDynamicBannerName( ViewToWindow, "wMLC", "PrimaryRegistrantLabel" )

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: InitMasterLabelContentForUpdate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitMasterLabelContentForUpdate( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasProd REGISTERED AS mMasProd

// wWebXfer.Root.Banner1 = qOrganiz.Organization.dLoginUserName
// wWebXfer.Root.Banner2 = qOrganiz.Organization.dLoginUserRole
   wWebXfer.Root.Banner3 = ""
   wWebXfer.Root.Banner4 = mMasProd.MasterProduct.dContentVersionRevDate
   wWebXfer.Root.Banner5 = mMasProd.MasterProduct.dDescription
   wWebXfer.Root.Banner6 = ""

   SetDynamicBannerName( ViewToWindow, "wMLC", "PrimaryRegistrantLabel" )
/*
         mMasLC.cursor( "MasterLabelContent" ).createEntity();
         mMasLC.cursor( "MasterLabelContent" ).createTemporalSubobjectVersion();
         mMasLC.cursor( "MasterSubLabelContent" ).setToSubobject();
         mMasLC.cursor("MasterSubLabelContent").createTemporalEntity();
*/
END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: FinalizeMasterLabelContent
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
FinalizeMasterLabelContent( VIEW ViewToWindow )

   VIEW mMasProd REGISTERED AS mMasProd
   VIEW mMasLC REGISTERED AS mMasLC
   SHORT nRC

   // This is checked by JavaScript
// nRC = OperatorWebPrompt( ViewToWindow, "Finalize Master Label Content",
//                          "Once the Master Label Content has been Finalized,"
//                            "it cannot be updated.  Are you sure you want it Finalized?" )
// IF nRC = 8
//    RETURN 2      // Return 2 to indicate Web client must prompt operator
// END

   IF mMasLC.MasterLabelContent.Finalized = "" OR mMasLC.MasterLabelContent.Finalized = "W"
      FOR EACH mMasProd.MasterLabelContent
         IF mMasProd.MasterLabelContent.Finalized = "P"
            mMasProd.MasterLabelContent.Finalized = "H"
         END
      END
      mMasLC.MasterLabelContent.Finalized = "P"
   ELSE
      MessageSend( ViewToWindow, "", "Finalize Master Label Content",
                   "Cannot change Historical Master Label Content to Production",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN 2      // Return 2 to indicate Web client must prompt operator
   END

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: GOTO_IngredientsStatementDelete
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
GOTO_IngredientsStatementDelete( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC

   mMasLC.MasterLabelContent.wDeleteType       = "Ingredients Statement"
   mMasLC.MasterLabelContent.wDeleteText       = mMasLC.M_IngredientsStatement.ChemicalName
   mMasLC.MasterLabelContent.wDeleteEntityName = "M_IngredientsStatement"

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: AcceptAddNewIngredient
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptAddNewIngredient( VIEW ViewToWindow )

   VIEW  mMasLC   REGISTERED AS mMasLC
   SHORT nRC

   // Accept Ingredients Statement and add new temporal one.
   nRC = AcceptSubobject( mMasLC, "M_IngredientsStatement" )
   IF nRC < 0
      MessageSend( ViewToWindow, "", "Save And Add New Ingredients Statement",
                   "Error saving ingredient statement.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      RETURN 2
   END

   CreateTemporalEntity( mMasLC, "M_IngredientsStatement", zPOS_AFTER )

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: AcceptAddNewIngredient
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptAddNewTOC( VIEW ViewToWindow )

   VIEW  mMasLC   REGISTERED AS mMasLC
   SHORT nRC

   // Accept Ingredients Statement and add new temporal one.
   nRC = AcceptSubobject( mMasLC, "TOC" )
   IF nRC < 0
      MessageSend( ViewToWindow, "", "Save And Add New Table of Contents Entry",
                   "Error saving table of contents entry.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      RETURN 2
   END

   CreateTemporalEntity( mMasLC, "TOC", zPOS_AFTER )

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: AcceptSD_KeywordGoPrev
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptSD_KeywordGoPrev( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC
 
   AcceptSubobject( mMasLC, "M_InsertTextKeywordSD" )
   SetCursorPrevEntity( mMasLC, "M_InsertTextKeywordSD", "" )
   CreateTemporalSubobjectVersion( mMasLC, "M_InsertTextKeywordSD" )

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: AcceptSD_KeywordGoNext
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptSD_KeywordGoNext( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC
 
   AcceptSubobject( mMasLC, "M_InsertTextKeywordSD" )
   SetCursorNextEntity( mMasLC, "M_InsertTextKeywordSD", "" )
   CreateTemporalSubobjectVersion( mMasLC, "M_InsertTextKeywordSD" )

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: GOTO_StorageDispSectionDelete
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
GOTO_StorageDispSectionDelete( VIEW ViewToWindow )

   VIEW mMasLC   REGISTERED AS mMasLC

   mMasLC.MasterLabelContent.wDeleteType       = "Storage and Disposal Section"
   mMasLC.MasterLabelContent.wDeleteText       = mMasLC.M_StorageDisposalSection.Title
   mMasLC.MasterLabelContent.wDeleteEntityName = "M_StorageDisposalSection"

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: CleanStorDispStmtHTML
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CleanStorDispStmtHTML( VIEW ViewToWindow )

   VIEW mMasLC   REGISTERED AS mMasLC

   RemoveFormattingFromHTML_Attr( mMasLC, "M_StorageDisposalStatement", "Text", "p,strong,sup,sub" )

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: AcceptAddNewStorDispSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptAddNewStorDispSect( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC
   SHORT nRC

   nRC = AcceptSubobject( mMasLC, "M_StorageDisposalSection" )
   IF nRC < 0
      MessageSend( ViewToWindow, "", "Save And Add New Storage and Disposal Section",
                   "The Storage and Disposal Section contains errors.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN nRC
   END
   CreateTemporalEntity( mMasLC, "M_StorageDisposalSection", zPOS_AFTER )

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: GOTO_StorageDispStatementDelete
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
GOTO_StorageDispStatementDelete( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC

   mMasLC.MasterLabelContent.wDeleteType       = "Storage and Disposal Statement"
   mMasLC.MasterLabelContent.wDeleteText       = mMasLC.M_StorageDisposalStatement.Text
   mMasLC.MasterLabelContent.wDeleteEntityName = "M_StorageDisposalStatement"

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: AcceptAddNewStorDispStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptAddNewStorDispStmt( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC
   SHORT nRC

   nRC = AcceptSubobject( mMasLC, "M_StorageDisposalStatement" )
   IF nRC < 0
      MessageSend( ViewToWindow, "", "Save And Add New Storage and Disposal statement",
                   "The Storage and Disposal Statement contains errors.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN nRC
   END
   CreateTemporalEntity( mMasLC, "M_StorageDisposalStatement", zPOS_AFTER )
   mMasLC.M_StorageDisposalStatement.NotForUseType = "NA"

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: AcceptStorDispSubStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptStorDispSubStmt( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC
   SHORT nRC

   nRC = AcceptSubobject( mMasLC, "M_StorageDisposalStatement" )
   IF nRC < 0
      MessageSend( ViewToWindow, "", "Accept Storage and Disposal Sub-statement",
                   "The Storage and Disposal Statement contains errors.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN nRC
   END
   ResetViewFromSubobject( mMasLC )
   
END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: CancelStorDispSubStmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelStorDispSubStmt( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC
   SHORT nRC

   nRC = CancelSubobject( mMasLC, "M_StorageDisposalStatement" )
   IF nRC < 0
      MessageSend( ViewToWindow, "", "Cancel Storage and Disposal Sub-statement",
                   "The Storage and Disposal Statement contains errors.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN nRC
   END
   ResetViewFromSubobject( mMasLC )

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: GOTO_StorageDispStatementAdd
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
GOTO_StorageDispStatementAdd( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC
   SHORT nRC

   // We are creating the new temporal entity in this operation, rather than as auto action, so that
   // the NotForUseType attribute can be set, since it's currently required in the database.
   CreateTemporalEntity( mMasLC, "M_StorageDisposalStatement", zPOS_LAST )
   mMasLC.M_StorageDisposalStatement.NotForUseType = "NA"

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: GOTO_StorageDispSubStatementAdd
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
GOTO_StorageDispSubStatementAdd( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC

   // We are creating the new temporal entity in this operation, rather than as auto action, so that
   // the NotForUseType attribute can be set, since it's currently required in the database.
   SetViewToSubobject( mMasLC, "M_StorageDisposalSubStatement" )
   CreateTemporalEntity( mMasLC, "M_StorageDisposalStatement", zPOS_LAST )
   mMasLC.M_StorageDisposalStatement.NotForUseType = "NA"

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: GOTO_StorageDispSubStmtUpdate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
GOTO_StorageDispSubStmtUpdate( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC
   SHORT nRC

   SetViewToSubobject( mMasLC, "M_StorageDisposalSubStatement" )
   CreateTemporalSubobjectVersion( mMasLC, "M_StorageDisposalStatement" )

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: GOTO_DirsForUseCategoryDelete
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
GOTO_DirsForUseCategoryDelete( VIEW ViewToWindow )

   VIEW mMasLC   REGISTERED AS mMasLC

   mMasLC.MasterLabelContent.wDeleteType       = "Directions For Use Category"
   mMasLC.MasterLabelContent.wDeleteText       = mMasLC.M_DirectionsForUseCategory.Name
   mMasLC.MasterLabelContent.wDeleteEntityName = "M_DirectionsForUseCategory"

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: GOTO_DirsForUseSectionDelete
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
GOTO_DirsForUseSectionDelete( VIEW ViewToWindow )

   VIEW mMasLC   REGISTERED AS mMasLC

   mMasLC.MasterLabelContent.wDeleteType       = "Directions For Use Section"
   mMasLC.MasterLabelContent.wDeleteText       = mMasLC.M_DirectionsForUseSection.Name
   mMasLC.MasterLabelContent.wDeleteEntityName = "M_DirectionsForUseSection"

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: DELETE_DirectionsForUseStatement
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
DELETE_DirectionsForUseStatement( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC
   
   DELETE ENTITY mMasLC.M_DirectionsForUseStatement NONE

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: GOTO_SelectRemoveDrivingDU
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
GOTO_SelectRemoveDrivingDU( VIEW ViewToWindow )

   VIEW mMasLC  REGISTERED AS mMasLC

   // Initialize the mMasLC  for selecting Driving Claims.
   mMasLC.MasterLabelContent.wSelectedUsageType = "DC"

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: GOTO_SelectRemoveDUEntries
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
GOTO_SelectRemoveDUEntries( VIEW ViewToWindow )

   VIEW mMasLC  REGISTERED AS mMasLC

   // Initialize the mMasLC for selecting Statement Usage entries.
   mMasLC.MasterLabelContent.wSelectedUsageType = "D"

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: GOTO_DirsForUseStatementAdd
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
GOTO_DirsForUseStatementAdd( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC

   // Add new temporal entity as last statement under section.
   CreateTemporalEntity( mMasLC, "M_DirectionsForUseStatement", zPOS_LAST )

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: GOTO_DirsForUseSubStatementAdd
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
GOTO_DirsForUseSubStatementAdd( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC

   SetViewToSubobject( mMasLC, "M_DirectionsForUseSubStatement" )
   CreateTemporalEntity( mMasLC, "M_DirectionsForUseStatement", zPOS_LAST )

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: GOTO_DirsForUseSubStmtUpdate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
GOTO_DirsForUseSubStmtUpdate( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC

   SetViewToSubobject( mMasLC, "M_DirectionsForUseSubStatement" )
   CreateTemporalSubobjectVersion( mMasLC, "M_DirectionsForUseStatement" )

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: AcceptDirectionsSubStatement
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptDirectionsSubStatement( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC
   SHORT nRC

   nRC = AcceptSubobject( mMasLC, "M_DirectionsForUseStatement" )
   IF nRC < 0
      MessageSend( ViewToWindow, "", "Accept Directions For Use Sub-statement",
                   "The Directions For Use Sub-Statement (Accept) contains errors.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN nRC
   END
   ResetViewFromSubobject( mMasLC )

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: AddNewDirectionsSubStatement
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AddNewDirectionsSubStatement( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC
   SHORT nRC

   nRC = AcceptSubobject( mMasLC, "M_DirectionsForUseStatement" )
   IF nRC < 0
      MessageSend( ViewToWindow, "", "Accept Directions For Use Sub-statement",
                   "The Directions For Use Sub-Statement (Accept) contains errors.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN nRC
   END
   CreateTemporalEntity( mMasLC, "M_DirectionsForUseStatement", zPOS_AFTER )

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: NextDirectionsSubStatement
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
NextDirectionsSubStatement( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC
   SHORT nRC

   nRC = AcceptSubobject( mMasLC, "M_DirectionsForUseStatement" )
   IF nRC < 0
      MessageSend( ViewToWindow, "", "Accept Directions For Use Sub-statement",
                   "The Directions For Use Sub-Statement (Accept) contains errors.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN nRC
   END
   SET CURSOR NEXT mMasLC.M_DirectionsForUseStatement
   CreateTemporalSubobjectVersion( mMasLC, "M_DirectionsForUseStatement" )

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: PreviousDirectionsSubStatement
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
PreviousDirectionsSubStatement( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC
   SHORT nRC

   nRC = AcceptSubobject( mMasLC, "M_DirectionsForUseStatement" )
   IF nRC < 0
      MessageSend( ViewToWindow, "", "Accept Directions For Use Sub-statement",
                   "The Directions For Use Sub-Statement (Accept) contains errors.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN nRC
   END
   SET CURSOR PREVIOUS mMasLC.M_DirectionsForUseStatement
   CreateTemporalSubobjectVersion( mMasLC, "M_DirectionsForUseStatement" )

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: CancelDirectionsSubStatement
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelDirectionsSubStatement( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC
   SHORT nRC

   nRC = CancelSubobject( mMasLC, "M_DirectionsForUseStatement" )
   IF nRC < 0
      MessageSend( ViewToWindow, "", "Cancel Directions For Use Sub-statement",
                   "The Directions For Use Sub-Statement (Cancel) contains errors.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN nRC
   END
   ResetViewFromSubobject( mMasLC )

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: AcceptAddNewDU_Stmt
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptAddNewDU_Stmt( VIEW ViewToWindow )

   VIEW  mMasLC   REGISTERED AS mMasLC
   SHORT nRC

   // Accept Direction for Use Statement and add new temporal one.
   nRC = AcceptSubobject( mMasLC, "M_DirectionsForUseStatement" )
   IF nRC < 0
      MessageSend( ViewToWindow, "", "Add New Directions for Use Statement",
                   "Error saving Directions for Use statement.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      RETURN 2
   END

   CreateTemporalEntity( mMasLC, "M_DirectionsForUseStatement", zPOS_AFTER )

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: AddNewDFU_Section
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AddNewDFU_Section( VIEW ViewToWindow )

   VIEW  mMasLC   REGISTERED AS mMasLC
   SHORT nRC

   // Accept Direction for Use Section and add new temporal one.
   nRC = AcceptSubobject( mMasLC, "M_DirectionsForUseSection" )
   IF nRC < 0
      MessageSend( ViewToWindow, "", "Add New Directions for Use Section",
                   "Error saving Directions for Use section.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      RETURN 2
   END

   CreateTemporalEntity( mMasLC, "M_DirectionsForUseSection", zPOS_AFTER )

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: AddNewDFU_Category
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AddNewDFU_Category( VIEW ViewToWindow )

   VIEW  mMasLC   REGISTERED AS mMasLC
   SHORT nRC

   // Accept Direction for Use Section and add new temporal one.
   nRC = AcceptSubobject( mMasLC, "M_DirectionsForUseCategory" )
   IF nRC < 0
      MessageSend( ViewToWindow, "", "Add New Directions for Use Category",
                   "Error saving Directions for Use category.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      RETURN 2
   END

   CreateTemporalEntity( mMasLC, "M_DirectionsForUseCategory", zPOS_AFTER )

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: AcceptAddNewDU_SectionKeyword
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptAddNewDU_SectionKeyword( VIEW ViewToWindow )

   VIEW  mMasLC   REGISTERED AS mMasLC
   SHORT nRC

   // Accept Direction for Use Statement and add new temporal one.
   nRC = AcceptSubobject( mMasLC, "M_InsertTextKeywordSectionDU" ) 
   IF nRC < 0
      MessageSend( ViewToWindow, "", "Accept and Add New Directions for Use Section Keyword",
                   "Error saving Directions for Use Section Keyword.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      RETURN 2
   END

   CreateTemporalEntity( mMasLC, "M_InsertTextKeywordSectionDU", zPOS_AFTER )
   mMasLC.M_InsertTextKeywordSectionDU.Type = "A"

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: ConfirmDeleteComponent
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
ConfirmDeleteComponent( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC
   STRING ( 32 ) szEntityName

   // The entity to delete is passed in the wDeleteEntityName attribute.
   szEntityName = mMasLC.MasterLabelContent.wDeleteEntityName
   DeleteEntity( mMasLC, szEntityName, zREPOS_NONE )

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: CancelDeleteComponent
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelDeleteComponent( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC

   mMasLC.MasterLabelContent.wDeleteType = ""
   mMasLC.MasterLabelContent.wDeleteText = ""

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: GOTO_UpdateMasterProduct
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
GOTO_UpdateMasterProduct( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasProdLST REGISTERED AS mMasProdLST
   VIEW mMasProd    BASED ON LOD  mMasProd

   ACTIVATE mMasProd WHERE mMasProd.MasterProduct.ID = mMasProdLST.MasterProduct.ID
   NAME VIEW mMasProd "mMasProd"

   wWebXfer.Root.AttemptProductName = mMasProd.MasterProduct.Name
   wWebXfer.Root.AttemptProductNumber = mMasProd.MasterProduct.Number
END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: NEW_MasterProduct
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
NEW_MasterProduct( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasProd BASED ON LOD  mMasProd

   GET VIEW mMasProd NAMED "mMasProd"
   IF mMasProd != 0
      DropObjectInstance( mMasProd )
   END

   // Initialize empty Product object.
   ACTIVATE mMasProd EMPTY
   NAME VIEW mMasProd "mMasProd"
   CREATE ENTITY mMasProd.MasterProduct

   SetDynamicBannerName( ViewToWindow, "wMLC", "PrimaryRegistrantProduct" )

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: InitListMasterProducts
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitListMasterProducts( VIEW ViewToWindow )

   VIEW lPrimReg    REGISTERED AS lPrimReg
   VIEW mMasProdLST BASED ON LOD mMasProd

   GET VIEW mMasProdLST NAMED "mMasProdLST"
   IF RESULT >= 0
      DropObjectInstance( mMasProdLST )
   END
   ACTIVATE mMasProdLST RootOnlyMultiple WHERE mMasProdLST.PrimaryRegistrant.ID = lPrimReg.PrimaryRegistrant.ID
   NAME VIEW mMasProdLST "mMasProdLST"
   OrderEntityForView( mMasProdLST, "MasterProduct", "Name A" )
   SET CURSOR FIRST mMasProdLST.MasterProduct

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: SAVE_MasterProduct
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SAVE_MasterProduct( VIEW ViewToWindow )

   VIEW wWebXfer  REGISTERED AS wWebXfer
   VIEW lPrimReg  REGISTERED AS lPrimReg
   VIEW mMasProd  REGISTERED AS mMasProd
   STRING ( 50 ) szProductName
   STRING ( 50 ) szProductNumber
   STRING ( 50 ) szVersion
   INTEGER lProductNameLth
   INTEGER lProductNumberLth
   INTEGER lVersionLth
   INTEGER lControl
   INTEGER Ignore
   SHORT   nRC

   IF mMasProd = 0
      MessageSend( ViewToWindow, "", "Update Master Product",
                   "The Master Product view is empty.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      RETURN 2
   END

   szProductName = mMasProd.MasterProduct.Name

   // Ensure product name is not blank and is unique.
   IF szProductName = ""
      MessageSend( ViewToWindow, "", "Update Master Product",
                   "The Master Product Name cannot be blank.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      RETURN 2
   ELSE
      SET CURSOR FIRST lPrimReg.MasterProduct WHERE lPrimReg.MasterProduct.Name = szProductName
                                                AND lPrimReg.MasterProduct.ID  != mMasProd.MasterProduct.ID
      IF RESULT >= zCURSOR_SET
         MessageSend( ViewToWindow, "", "New Master Product",
                      "The Master Product Name must be unique.",
                      zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
         RETURN 2
      END
   END

   IF mMasProd.PrimaryRegistrant DOES NOT EXIST
      IncludeSubobjectFromSubobject( mMasProd, "PrimaryRegistrant",
                                     lPrimReg, "PrimaryRegistrant", zPOS_BEFORE )
   END

   COMMIT mMasProd

   // Make sure product list is updated.
   InitListMasterProducts( ViewToWindow )

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: CANCEL_MasterProduct
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CANCEL_MasterProduct( VIEW ViewToWindow )

   VIEW mMasProd REGISTERED AS mMasProd

TraceLineS( "$$$$$ Before Drop", "" )
   DropObjectInstance( mMasProd )
TraceLineS( "$$$$$ After Drop", "" )

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: GOTO_UpdateMLC
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
GOTO_UpdateMLC( VIEW ViewToWindow )

   VIEW mMasProd REGISTERED AS mMasProd
   VIEW mMasLC   BASED ON LOD  mMasLC
   VIEW mMasLC_Root BASED ON LOD mMasLC

   GET VIEW mMasLC NAMED "mMasLC"
   IF mMasLC != 0
      DropObjectInstance( mMasLC )
   END

   ACTIVATE mMasLC WHERE mMasLC.MasterLabelContent.ID = mMasProd.MasterLabelContent.ID
   NAME VIEW mMasLC "mMasLC"
   OrderEntityForView( mMasLC, "M_Usage", "UsageType A ClaimsClassification A Name A" )
   SET CURSOR FIRST mMasLC.M_Usage

   // Create/Include Hazard, Precautionary and First Aid derived sections.

   // First Aid
   SET CURSOR FIRST mMasLC.M_GeneralSection WHERE mMasLC.M_GeneralSection.SectionType = "F"
   IF RESULT < zCURSOR_SET
      CREATE ENTITY mMasLC.M_GeneralSection
      mMasLC.M_GeneralSection.SectionType = "F" // First Aid
      mMasLC.M_GeneralSection.Title = "FIRST AID"
   END
   INCLUDE mMasLC.MI_FirstAidSection FROM mMasLC.M_GeneralSection

   // Precautionary
   SET CURSOR FIRST mMasLC.M_GeneralSection WHERE mMasLC.M_GeneralSection.SectionType = "P"
   IF RESULT < zCURSOR_SET
      CREATE ENTITY mMasLC.M_GeneralSection
      mMasLC.M_GeneralSection.SectionType = "P" // Precautionary
   END
   INCLUDE mMasLC.MI_PrecautionarySection FROM mMasLC.M_GeneralSection

   // Hazard
   SET CURSOR FIRST mMasLC.M_GeneralSection WHERE mMasLC.M_GeneralSection.SectionType = "E"
   IF RESULT < zCURSOR_SET
      CREATE ENTITY mMasLC.M_GeneralSection
      mMasLC.M_GeneralSection.SectionType = "E" // Environmental/Physical Hazard
   END
   INCLUDE mMasLC.MI_HazardSection FROM mMasLC.M_GeneralSection

   // Convert any original Usage entries to the new UsageType subobject.
   FOR EACH mMasLC.OrigM_Usage
      SET CURSOR FIRST mMasLC.M_UsageType WHERE mMasLC.M_UsageType.UsageType = mMasLC.OrigM_Usage.UsageType
      IF RESULT < zCURSOR_SET
         CREATE ENTITY mMasLC.M_UsageType
         mMasLC.M_UsageType.UsageType = mMasLC.OrigM_Usage.UsageType
      END
      CREATE ENTITY mMasLC.M_Usage
      SetMatchingAttributesByName( mMasLC, "M_Usage", mMasLC, "OrigM_Usage", zSET_NULL )
      DELETE ENTITY mMasLC.OrigM_Usage NONE
   END

   // Delete any M_DirectionsUsageOrdering entities without children.
   FOR EACH mMasLC.M_DirectionsForUseSection
      FOR EACH mMasLC.M_DirectionsForUseStatement
         FOR EACH mMasLC.M_DirectionsUsageOrdering
            IF mMasLC.M_DirectionsUsage DOES NOT EXIST
               DELETE ENTITY mMasLC.M_DirectionsUsageOrdering NONE
            END
         END
      END
   END

   // Make sure Usage Entries are sorted.
   FOR EACH mMasLC.M_UsageType
      OrderEntityForView( mMasLC, "M_Usage", "ClaimsClassification A Name A" )
   END
   SET CURSOR FIRST mMasLC.M_UsageType

   CreateViewFromView( mMasLC_Root, mMasLC )
   NAME VIEW mMasLC_Root "mMasLC_Root"

   // Build Usage Group Usage entries.
   BuildUsageGroupEntries( mMasLC )

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: NEW_MLC
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
NEW_MLC( VIEW ViewToWindow )

   VIEW mMasProd REGISTERED AS mMasProd
   VIEW mMasLC   BASED ON LOD  mMasLC
   VIEW mMasLC_Root BASED ON LOD mMasLC

   ACTIVATE mMasLC EMPTY
   NAME VIEW mMasLC "mMasLC"
   CREATE ENTITY mMasLC.MasterLabelContent
   INCLUDE mMasLC.MasterProduct FROM mMasProd.MasterProduct

   CreateViewFromView( mMasLC_Root, mMasLC )
   NAME VIEW mMasLC_Root "mMasLC_Root"
END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: GenerateNewMLC_Version
//
// Creates a new version of an MLC from a previous version. It copies one
// MLC to another and ties the second back to the first.
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
GenerateNewMLC_Version( VIEW ViewToWindow )

   VIEW mMasProd    REGISTERED AS mMasProd
   VIEW OriginalMLC BASED ON LOD  mMasLC
   VIEW NewMLC      BASED ON LOD  mMasLC
   INTEGER lID
   SHORT   nRC

   // Generate new MLC from the selected MLC.
   ACTIVATE OriginalMLC WHERE OriginalMLC.MasterLabelContent.ID = mMasProd.MasterLabelContent.ID
   NAME VIEW OriginalMLC "OriginalMLC"

   ACTIVATE NewMLC EMPTY
   NAME VIEW NewMLC "mMasLC"

   BuildNewMLC_Version( NewMLC, OriginalMLC )    // Create NewMLC from OriginalMLC
   NewMLC.MasterLabelContent.Finalized = "W"

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: CompareToPreviousMLC
//
// Used by the Primary Registrant to analyze changes made to an MLC by
// comparing it to the MLC from which it was created. It's not for comparing
// any two MLC's, but only two MLC's where one was created from the other.
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CompareToPreviousMLC( VIEW ViewToWindow )

   VIEW mMasProd    REGISTERED AS mMasProd
   VIEW lMLCATgt    BASED ON LOD  lMLCATgt
   VIEW lMLCASrc    BASED ON LOD  lMLCASrc
   INTEGER lID
   SHORT   nRC

   lID = mMasProd.MasterLabelContent.ID
   ACTIVATE lMLCATgt WHERE lMLCATgt.MasterLabelContent.ID = lID
   NAME VIEW lMLCATgt "lMLCATgt"

   IF lMLCATgt.MP_MasterLabelContent DOES NOT EXIST
      MessageSend( ViewToWindow, "", "Compare MLC's",
                   "The selected MLC is not a source MLC.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      DropObjectInstance( lMLCATgt )
      nRC = 2
   ELSE
      ACTIVATE lMLCASrc WHERE lMLCASrc.MasterLabelContent.ID = lMLCATgt.MP_MasterLabelContent.ID
      NAME VIEW lMLCASrc "lMLCASrc"
      BuildDifferencesMLC( lMLCATgt, lMLCASrc )
      DropObjectInstance( lMLCASrc )
      nRC = 0
   END

   RETURN nRC

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: CancelDeleteMasterProduct
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelDeleteMasterProduct( VIEW ViewToWindow )

   VIEW mMasProd REGISTERED AS mMasProd

   DropObjectInstance( mMasProd )

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: ConfirmDeleteMasterProduct
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
ConfirmDeleteMasterProduct( VIEW ViewToWindow )

   VIEW mMasProdLST REGISTERED AS mMasProdLST
   VIEW mMasProd    REGISTERED AS mMasProd

   IF mMasProd.SubregProduct EXISTS

      MessageSend( ViewToWindow, "", "Delete Master Product",
                   "The Master Product has associated Subregistrant Products.  It cannot be deleted",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      RETURN 2
   END

   DELETE ENTITY mMasProd.MasterProduct
   COMMIT mMasProd
   DropObjectInstance( mMasProd )

   InitListMasterProducts( ViewToWindow )

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: GOTO_StorageDispSectionUpdate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
GOTO_StorageDispSectionUpdate( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC

   // Create Temporal subobject version.
   CreateTemporalSubobjectVersion( mMasLC, "M_StorageDisposalSection" )

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: ConfirmDeleteMasterLabelContent
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
ConfirmDeleteMasterLabelContent( VIEW ViewToWindow )

   VIEW mMasProd REGISTERED AS mMasProd
   VIEW mMasLC   BASED ON LOD  mMasLC

   ACTIVATE mMasLC WHERE mMasLC.MasterLabelContent.ID = mMasProd.MasterLabelContent.ID
   NAME VIEW mMasLC "mMasLCDelete"
   DELETE ENTITY mMasLC.MasterLabelContent
   COMMIT  mMasLC
   DropObjectInstance( mMasLC )
   EXCLUDE mMasProd.MasterLabelContent NONE

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: InitIngredientsSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitIngredientsSect( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC

// AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "InitIngredientsSect: " )

   IF mMasLC.M_IngredientsSection DOES NOT EXIST
      CREATE ENTITY mMasLC.M_IngredientsSection
   END

   wWebXfer.Root.CurrentContentType = "I"  // Ingredients
   wWebXfer.Root.FormValidationDLL = "wMLC"
   wWebXfer.Root.FormValidationOperation = "ValidateIngredientsSection"

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: InitHumanHazardSect
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitHumanHazardSect( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer
   VIEW mMasLC   REGISTERED AS mMasLC

// AcceptCurrentTemporalSubobject( ViewToWindow, TRUE, "InitHumanHazardSect: " )

   IF mMasLC.M_HumanHazardSection DOES NOT EXIST
      CREATE ENTITY mMasLC.M_HumanHazardSection
      mMasLC.M_HumanHazardSection.PrecautionaryStatement = "See {{Precautionary Panel Location}} Panel {{Precautionary Label Location}} for Precautionary Statements"
      mMasLC.M_HumanHazardSection.PanelLoc1 = "[Back]"
      mMasLC.M_HumanHazardSection.PanelLoc2 = "[Side]"
      mMasLC.M_HumanHazardSection.PanelLoc3 = "[Left]"
      mMasLC.M_HumanHazardSection.PanelLoc4 = "[Right]"
      mMasLC.M_HumanHazardSection.LabelLoc1 = "[of Panel]"
      mMasLC.M_HumanHazardSection.LabelLoc2 = "[below]"
   END

   wWebXfer.Root.CurrentContentType = "H"  // Hazard

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: GOTO_PrecautionaryStmtDelete
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
GOTO_PrecautionaryStmtDelete( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC

   mMasLC.MasterLabelContent.wDeleteType       = "Precautionary Statement"
   mMasLC.MasterLabelContent.wDeleteText       = mMasLC.M_GeneralStatement.Text
   mMasLC.MasterLabelContent.wDeleteEntityName = "M_GeneralStatement"

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: EditPrecautionarySection
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
EditPrecautionarySection( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC

   // Position on "Precautionary" General Statement.
   SET CURSOR FIRST mMasLC.M_GeneralSection WHERE mMasLC.M_GeneralSection.SectionType = "P"
   IF RESULT < zCURSOR_SET
      CREATE ENTITY mMasLC.M_GeneralSection
      mMasLC.M_GeneralSection.SectionType = "P"
   END

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: GOTO_FirstAidStmtDelete
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
GOTO_FirstAidStmtDelete( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC

   mMasLC.MasterLabelContent.wDeleteType       = "First Aid Statement"
   mMasLC.MasterLabelContent.wDeleteText       = mMasLC.M_GeneralStatement.Text
   mMasLC.MasterLabelContent.wDeleteEntityName = "M_GeneralStatement"

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: EditFirstAidSection
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
EditFirstAidSection( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC

   // Position on "First Aid" General Statement.
   SET CURSOR FIRST mMasLC.M_GeneralSection WHERE mMasLC.M_GeneralSection.SectionType = "F"
   IF RESULT < zCURSOR_SET
      CREATE ENTITY mMasLC.M_GeneralSection
      mMasLC.M_GeneralSection.SectionType = "F"
   END

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: GOTO_HazardsStmtDelete
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
GOTO_HazardsStmtDelete( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC

   mMasLC.MasterLabelContent.wDeleteType       = "Hazards Statement"
   mMasLC.MasterLabelContent.wDeleteText       = mMasLC.M_GeneralStatement.Text
   mMasLC.MasterLabelContent.wDeleteEntityName = "M_GeneralStatement"

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: EditEnvironmentalHazardsSection
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
EditEnvironmentalHazardsSection( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC

   // Position on "Environmental Hazards" General Statement.
   SET CURSOR FIRST mMasLC.M_GeneralSection WHERE mMasLC.M_GeneralSection.SectionType = "E"
   IF RESULT < zCURSOR_SET
      CREATE ENTITY mMasLC.M_GeneralSection
      mMasLC.M_GeneralSection.SectionType = "E"
   END

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: EditChemicalHazardsSection
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
EditChemicalHazardsSection( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC

   // Position on "Physical and Chemical Hazards" General Statement.
   SET CURSOR FIRST mMasLC.M_GeneralSection WHERE mMasLC.M_GeneralSection.SectionType = "C"
   IF RESULT < zCURSOR_SET
      CREATE ENTITY mMasLC.M_GeneralSection
      mMasLC.M_GeneralSection.SectionType = "C"
   END

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: DELETE_SelectedUsageEntries
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
DELETE_SelectedUsageEntries( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC
   SHORT nRC

   FOR EACH mMasLC.M_Usage
      IF mMasLC.M_Usage.wSelected = "Y"
         SET CURSOR FIRST mMasLC.M_UsageNonGroupUsage WHERE mMasLC.M_UsageNonGroupUsage.Name = mMasLC.M_Usage.Name
         IF RESULT >= zCURSOR_SET
            EXCLUDE mMasLC.M_UsageNonGroupUsage NONE
         ELSE
            SET CURSOR FIRST mMasLC.M_UsageGroupUsage WITHIN mMasLC.M_UsageType
                       WHERE mMasLC.M_UsageGroupUsage.Name = mMasLC.M_Usage.Name
            IF RESULT >= zCURSOR_SET
               EXCLUDE mMasLC.M_UsageGroupUsage NONE
            END
         END
         DELETE ENTITY  mMasLC.M_Usage NONE
      END
   END

   // Go to build the NonGroup Usage entries.
   BuildNonGroupEntries( mMasLC )

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: SaveAddNewUsage
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SaveAddNewUsage( VIEW ViewToWindow )

   VIEW  mMasLC REGISTERED AS mMasLC
   SHORT nRC

   nRC = AcceptSubobject( mMasLC, "M_Usage" )
   IF nRC < 0
      MessageSend( ViewToWindow, "", "Save And Add New Usage Statement",
                   "Error accepting Statement.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      RETURN 2
   END

   CreateTemporalEntity( mMasLC, "M_Usage", zPOS_AFTER )

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: AcceptAndNextUsage
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptAndNextUsage( VIEW ViewToWindow )

   VIEW  mMasLC REGISTERED AS mMasLC
   SHORT nRC

   nRC = AcceptSubobject( mMasLC, "M_Usage" )
   IF nRC < 0
      MessageSend( ViewToWindow, "", "Next Usage Statement",
                   "Error accepting current Statement.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      RETURN 2
   END

   SET CURSOR NEXT mMasLC.M_Usage
   CreateTemporalSubobjectVersion( mMasLC, "M_Usage" )

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: AcceptAndNextUsage
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptAndPreviousUsage( VIEW ViewToWindow )

   VIEW  mMasLC REGISTERED AS mMasLC
   SHORT nRC

   nRC = AcceptSubobject( mMasLC, "M_Usage" )
   IF nRC < 0
      MessageSend( ViewToWindow, "", "Next Usage Statement",
                   "Error accepting current Statement.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      RETURN 2
   END

   SET CURSOR PREVIOUS mMasLC.M_Usage
   CreateTemporalSubobjectVersion( mMasLC, "M_Usage" )

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: ConfirmDeleteUsageEntry
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
ConfirmDeleteUsageEntry( VIEW ViewToWindow )

/*
   VIEW mMasLC REGISTERED AS mMasLC
   VIEW mMasLC2 BASED ON LOD mMasLC
   SHORT nContinue
   CreateViewFromView( mMasLC2, mMasLC )
   // Delete all selected Usage entries.
   FOR EACH mMasLC.M_Usage
      IF mMasLC.M_Usage.wSelected = "Y"
         nContinue = 1
         SET CURSOR FIRST mMasLC2.M_MarketingSection
         LOOP WHILE RESULT >= zCURSOR_SET AND nContinue > 0
            SET CURSOR FIRST mMasLC2.M_MarketingStatement
            LOOP WHILE RESULT >= zCURSOR_SET AND nContinue > 0
               SET CURSOR FIRST mMasLC2.M_MarketingUsage  WHERE mMasLC2.M_MarketingUsage.ID = mMasLC.M_Usage.ID
               IF RESULT >= zCURSOR_SET
                  DELETE ENTITY mMasLC2.M_MarketingUsageOrdering NONE
                  nContinue = -1
                  RESULT = zCURSOR_UNCHANGED
               END
               IF nContinue > 0
                  SET CURSOR NEXT mMasLC2.M_MarketingStatement
               END
            END
            IF nContinue > 0
               SET CURSOR NEXT mMasLC2.M_MarketingSection
            END
         END
         DELETE ENTITY mMasLC.M_Usage NONE
      END
   END
*/

   VIEW mMasLC REGISTERED AS mMasLC

   // Delete all selected Usage entries.
   FOR EACH mMasLC.M_Usage
      IF mMasLC.M_Usage.wSelected = "Y"
         // Delete any Usage entries that have been tied to a Marketing Statement.
         FOR EACH mMasLC.M_MarketingStatement WITHIN mMasLC.MasterLabelContent
            SET CURSOR FIRST mMasLC.M_MarketingUsage WITHIN mMasLC.M_MarketingStatement
                       WHERE mMasLC.M_MarketingUsage.ID = mMasLC.M_Usage.ID
            IF RESULT >= zCURSOR_SET
               DELETE ENTITY mMasLC.M_MarketingUsageOrdering
            END
         END

         // Delete any Usage entries that have been tied to a Directions For Use Statement or that
         // drive a Directions For Use Section.
         FOR EACH mMasLC.M_DirectionsForUseSection
            FOR EACH mMasLC.M_DirectionsForUseStatement
               SET CURSOR FIRST mMasLC.M_DirectionsUsage WITHIN mMasLC.M_DirectionsForUseStatement
                          WHERE mMasLC.M_DirectionsUsage.ID = mMasLC.M_Usage.ID
               IF RESULT >= zCURSOR_SET
                  DELETE ENTITY mMasLC.M_DirectionsUsageOrdering
               END
            END
            SET CURSOR FIRST mMasLC.M_DrivingUsage WHERE mMasLC.M_DrivingUsage.ID = mMasLC.M_Usage.ID
            IF RESULT >= zCURSOR_SET
               EXCLUDE mMasLC.M_DrivingUsage
            END
         END

         // Delete the actual Usage entry.

         // We don't believe this should be necessary, but JOE is being extremely picky ... DKS 2016.01.23
         SET CURSOR FIRST mMasLC.M_UsageNonGroupUsage WHERE mMasLC.M_UsageNonGroupUsage.Name = mMasLC.M_Usage.Name 
         IF RESULT >= zCURSOR_SET
            EXCLUDE mMasLC.M_UsageNonGroupUsage NONE
         ELSE
            SET CURSOR FIRST mMasLC.M_UsageGroupUsage WITHIN mMasLC.M_UsageType 
                       WHERE mMasLC.M_UsageGroupUsage.Name = mMasLC.M_Usage.Name 
            IF RESULT >= zCURSOR_SET
               EXCLUDE mMasLC.M_UsageGroupUsage NONE
            END
         END
         // We don't believe the above should be necessary, but JOE is being extremely picky ... DKS 2016.01.23

         DELETE ENTITY mMasLC.M_Usage NONE
      END
   END

END


/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: CancelDeleteUsageEntry
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelDeleteUsageEntry( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC

   // Cancel delete and clear selected entries.
   FOR EACH mMasLC.M_Usage
      IF mMasLC.M_Usage.wSelected = "Y"
         mMasLC.M_Usage.wSelected = ""
      END
   END

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: PrebuildDeleteUsageStatements
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
PrebuildDeleteUsageStatements( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC

   // Create list of Usage Entries selected for delete.
   FOR EACH mMasLC.MI_UsageList
      EXCLUDE mMasLC.MI_UsageList NONE
   END
   FOR EACH mMasLC.M_Usage
      IF mMasLC.M_Usage.wSelected = "Y"
         INCLUDE mMasLC.MI_UsageList FROM mMasLC.M_Usage
      END
   END

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: EditClaimsSection
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
EditClaimsSection( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC

   // Position on Claims Usage Type.
   SET CURSOR FIRST mMasLC.M_UsageType WHERE mMasLC.M_UsageType.UsageType = "C"
   IF RESULT < zCURSOR_SET
      CREATE ENTITY mMasLC.M_UsageType
      mMasLC.M_UsageType.UsageType = "C"
   END

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: EditLocationsSection
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
EditLocationsSection( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC

   // Position on Claims Usage Type.
   SET CURSOR FIRST mMasLC.M_UsageType WHERE mMasLC.M_UsageType.UsageType = "L"
   IF RESULT < zCURSOR_SET
      CREATE ENTITY mMasLC.M_UsageType
      mMasLC.M_UsageType.UsageType = "L"
   END

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: EditSurfacesSection
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
EditSurfacesSection( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC

   // Position on Claims Usage Type.
   SET CURSOR FIRST mMasLC.M_UsageType WHERE mMasLC.M_UsageType.UsageType = "S"
   IF RESULT < zCURSOR_SET
      CREATE ENTITY mMasLC.M_UsageType
      mMasLC.M_UsageType.UsageType = "S"
   END

   // Go to build the NonGroup Usage entries.
   BuildNonGroupEntries( mMasLC )

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: EditApplicationTypesSection
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
EditApplicationTypesSection( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC

   // Position on Claims Usage Type.
   SET CURSOR FIRST mMasLC.M_UsageType WHERE mMasLC.M_UsageType.UsageType = "T"
   IF RESULT < zCURSOR_SET
      CREATE ENTITY mMasLC.M_UsageType
      mMasLC.M_UsageType.UsageType = "T"
   END

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: SelectMLC_UsageEntries
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SelectMLC_UsageEntries( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC

   // Include each selected Usage Source entry in the Target subobject.
   FOR EACH mMasLC.M_Usage
      IF mMasLC.M_Usage.wSelected = "Y"
         // The target entity depends on the type of select set earlier.
         IF mMasLC.MasterLabelContent.wSelectedUsageType = "DC"   // Dir for Use Driving Claim
            SET CURSOR FIRST mMasLC.M_DrivingUsage WHERE mMasLC.M_DrivingUsage.ID = mMasLC.M_Usage.ID
            IF RESULT < zCURSOR_SET
               INCLUDE mMasLC.M_DrivingUsage FROM mMasLC.M_Usage
            END
         END
         IF mMasLC.MasterLabelContent.wSelectedUsageType = "D"   // Dir for Use Statement
            SET CURSOR FIRST mMasLC.M_DirectionsUsage WITHIN mMasLC.M_DirectionsForUseStatement
                       WHERE mMasLC.M_DirectionsUsage.ID = mMasLC.M_Usage.ID
            IF RESULT < zCURSOR_SET
               SET CURSOR LAST mMasLC.M_DirectionsUsageOrdering
               CREATE ENTITY  mMasLC.M_DirectionsUsageOrdering
               INCLUDE mMasLC.M_DirectionsUsage FROM mMasLC.M_Usage
            END
         END
         IF mMasLC.MasterLabelContent.wSelectedUsageType = "M"   // Marketing Statement
            SET CURSOR FIRST mMasLC.M_MarketingUsage WITHIN mMasLC.M_MarketingStatement
                       WHERE mMasLC.M_MarketingUsage.ID = mMasLC.M_Usage.ID
            IF RESULT < zCURSOR_SET
               SET CURSOR LAST mMasLC.M_MarketingUsageOrdering
               CREATE ENTITY  mMasLC.M_MarketingUsageOrdering
               INCLUDE mMasLC.M_MarketingUsage FROM mMasLC.M_Usage
            END
         END

         mMasLC.M_Usage.wSelected = ""
      END
   END

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: RemoveMLC_UsageEntries
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
RemoveMLC_UsageEntries( VIEW ViewToWindow )

   VIEW mMasLC  REGISTERED AS mMasLC

   // Remove depends on the target entity.
   IF mMasLC.MasterLabelContent.wSelectedUsageType = "DC"   // Dir for Use Driving Claim
      FOR EACH mMasLC.M_DrivingUsage
         IF mMasLC.M_DrivingUsage.wSelected = "Y"
            EXCLUDE  mMasLC.M_DrivingUsage NONE
         END
      END
   END
   IF mMasLC.MasterLabelContent.wSelectedUsageType = "D"   // Dir for Use Statement
      FOR EACH mMasLC.M_DirectionsUsageOrdering
         IF mMasLC.M_DirectionsUsageOrdering.wSelected = "Y"
            DELETE ENTITY mMasLC.M_DirectionsUsageOrdering NONE
         END
      END
   END
   IF mMasLC.MasterLabelContent.wSelectedUsageType = "M"   // Marketing Statement
      FOR EACH mMasLC.M_MarketingUsageOrdering
         IF mMasLC.M_MarketingUsageOrdering.wSelected = "Y"
            DELETE ENTITY mMasLC.M_MarketingUsageOrdering NONE
         END
      END
   END

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: CLEAR_MLC_UsageTarget
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CLEAR_MLC_UsageTarget( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC

   // Clear depends on the target entity.
   IF mMasLC.MasterLabelContent.wSelectedUsageType = "DC"   // Dir for Use Driving Claim
      FOR EACH mMasLC.M_DrivingUsage
         mMasLC.M_DrivingUsage.wSelected = ""
      END
   END
   IF mMasLC.MasterLabelContent.wSelectedUsageType = "D"   // Dir for Use Statement
      FOR EACH mMasLC.M_DirectionsUsageOrdering
         mMasLC.M_DirectionsUsageOrdering.wSelected = ""
      END
   END
   IF mMasLC.MasterLabelContent.wSelectedUsageType = "M"   // Marketing Statement
      FOR EACH mMasLC.M_MarketingUsageOrdering
         mMasLC.M_MarketingUsageOrdering.wSelected = ""
      END
   END

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: SETALL_MLC_UsageTarget
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SETALL_MLC_UsageTarget( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC

   // Set All depends on the target entity.
   IF mMasLC.MasterLabelContent.wSelectedUsageType = "DC"   // Dir for Use Driving Claim
      FOR EACH mMasLC.M_DrivingUsage
         mMasLC.M_DrivingUsage.wSelected = "Y"
      END
   END
   IF mMasLC.MasterLabelContent.wSelectedUsageType = "D"   // Dir for Use Statement
      FOR EACH mMasLC.M_DirectionsUsageOrdering
         mMasLC.M_DirectionsUsageOrdering.wSelected = "Y"
      END
   END
   IF mMasLC.MasterLabelContent.wSelectedUsageType = "M"   // Marketing Statement
      FOR EACH mMasLC.M_MarketingUsageOrdering
         mMasLC.M_MarketingUsageOrdering.wSelected = "Y"
      END
   END

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: CLEAR_MLC_UsageSource
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CLEAR_MLC_UsageSource( VIEW ViewToWindow )

   VIEW mMasLC  REGISTERED AS mMasLC

   FOR EACH mMasLC.M_Usage
      mMasLC.M_Usage.wSelected = ""
   END

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: SETALL_MLC_UsageSource
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SETALL_MLC_UsageSource( VIEW ViewToWindow )

   VIEW mMasLC  REGISTERED AS mMasLC

   FOR EACH mMasLC.M_Usage
      mMasLC.M_Usage.wSelected = "Y"
   END

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: GOTO_DirsForUseStatementDelete
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
GOTO_DirsForUseStatementDelete( VIEW ViewToWindow )

   VIEW mMasLC   REGISTERED AS mMasLC

   mMasLC.MasterLabelContent.wDeleteType       = "Directions For Use Statement"
   mMasLC.MasterLabelContent.wDeleteText       = mMasLC.M_DirectionsForUseStatement.Text
   mMasLC.MasterLabelContent.wDeleteEntityName = "M_DirectionsForUseStatement"

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: GOTO_MarketingSectionDelete
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
GOTO_MarketingSectionDelete( VIEW ViewToWindow )

   VIEW mMasLC   REGISTERED AS mMasLC

   mMasLC.MasterLabelContent.wDeleteType       = "Marketing Section"
   mMasLC.MasterLabelContent.wDeleteText       = mMasLC.M_MarketingSection.Name
   mMasLC.MasterLabelContent.wDeleteEntityName = "M_MarketingSection"

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: GOTO_SelectRemoveMktgEntries
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
GOTO_SelectRemoveMktgEntries( VIEW ViewToWindow )

   VIEW mMasLC  REGISTERED AS mMasLC

   // Initialize the mMasLC for selecting Statement Usage entries.
   mMasLC.MasterLabelContent.wSelectedUsageType = "M"

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: GOTO_FootnoteStmtDelete
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
GOTO_FootnoteStmtDelete( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC

   mMasLC.MasterLabelContent.wDeleteType       = "Footnote Statement"
   mMasLC.MasterLabelContent.wDeleteText       = mMasLC.M_UsageFootnote.Text
   mMasLC.MasterLabelContent.wDeleteEntityName = "M_UsageFootnote"

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: GOTO_DilutionGroupDelete
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
GOTO_DilutionGroupDelete( VIEW ViewToWindow )

   VIEW mMasLC   REGISTERED AS mMasLC

   mMasLC.MasterLabelContent.wDeleteType       = "Dilution Group"
   mMasLC.MasterLabelContent.wDeleteText       = mMasLC.M_DilutionGroup.DilutionRatioText
   mMasLC.MasterLabelContent.wDeleteEntityName = "M_DilutionGroup"

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: GOTO_DilutionGroupItemDelete
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
GOTO_DilutionGroupItemDelete( VIEW ViewToWindow )

   VIEW mMasLC   REGISTERED AS mMasLC

   mMasLC.MasterLabelContent.wDeleteType       = "Dilution Group Item"
   mMasLC.MasterLabelContent.wDeleteText       = mMasLC.M_DilutionGroupItem.Text
   mMasLC.MasterLabelContent.wDeleteEntityName = "M_DilutionGroupItem"

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: GOTO_DilutionChartItemDelete
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
GOTO_DilutionChartItemDelete( VIEW ViewToWindow )

   VIEW mMasLC   REGISTERED AS mMasLC

   mMasLC.MasterLabelContent.wDeleteType       = "Dilution Chart Item"
   mMasLC.MasterLabelContent.wDeleteText       = mMasLC.M_DilutionChartEntry.Use
   mMasLC.MasterLabelContent.wDeleteEntityName = "M_DilutionChartEntry"

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: ConfirmAddClaimsStmts
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
ConfirmAddClaimsStmts( VIEW ViewToWindow )

   VIEW mMasLC   REGISTERED AS mMasLC
   VIEW mEPA     REGISTERED AS mEPA
   STRING ( 256 ) szName
   SHORT   nRC

   AcceptSubobject( mMasLC, "M_Usage" )
   FOR EACH mMasLC.M_Usage
      szName = mMasLC.M_Usage.Name
      IF szName = ""
         DeleteEntity( mMasLC, "M_Usage", zREPOS_NONE )
      END
   END
   FOR EACH mEPA.EPA_Claim
      IF mEPA.EPA_Claim.wkSelected = "Y"
         szName = mEPA.EPA_Claim.Name
         IF szName != ""
            CreateEntity( mMasLC, "M_Usage", zPOS_LAST )
            mMasLC.M_Usage.UsageType = "C" // Claim
            mMasLC.M_Usage.ClaimsClassification = mEPA.EPA_Claim.ClaimsClassification
            mMasLC.M_Usage.Name = szName
         END
      END
   END

   COMMIT mMasLC
   DropObjectInstance( mEPA )
   CreateTemporalSubobjectVersion( mMasLC, "M_Usage" )

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: CancelAddClaimsStmts
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelAddClaimsStmts( VIEW ViewToWindow )

   VIEW mEPA     REGISTERED AS mEPA

   DropObjectInstance( mEPA )

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: ConfirmAddAppTypesStmts
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
ConfirmAddAppTypesStmts( VIEW ViewToWindow )

   VIEW mMasLC   REGISTERED AS mMasLC
   VIEW mEPA     REGISTERED AS mEPA
   STRING ( 256 ) szName
   SHORT   nRC

   AcceptSubobject( mMasLC, "M_Usage" )
   FOR EACH mMasLC.M_Usage
      szName = mMasLC.M_Usage.Name
      IF szName = ""
         DeleteEntity( mMasLC, "M_Usage", zREPOS_NONE )
      END
   END
   FOR EACH mEPA.EPA_ApplicationType
      IF mEPA.EPA_ApplicationType.wkSelected = "Y"
         szName = mEPA.EPA_ApplicationType.Name
         IF szName != ""
            CreateEntity( mMasLC, "M_Usage", zPOS_LAST )
            mMasLC.M_Usage.UsageType = "T" // Application Type
            mMasLC.M_Usage.Name = szName
         END
      END
   END

   COMMIT mMasLC
   DropObjectInstance( mEPA )
   CreateTemporalSubobjectVersion( mMasLC, "M_Usage" )

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: CancelAddAppTypesStmts
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelAddAppTypesStmts( VIEW ViewToWindow )

   VIEW mEPA     REGISTERED AS mEPA

   DropObjectInstance( mEPA )

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: ConfirmAddLocationsStmts
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
ConfirmAddLocationsStmts( VIEW ViewToWindow )

   VIEW mMasLC   REGISTERED AS mMasLC
   VIEW mEPA     REGISTERED AS mEPA
   STRING ( 256 ) szName
   SHORT   nRC

   AcceptSubobject( mMasLC, "M_Usage" )
   FOR EACH mMasLC.M_Usage
      szName = mMasLC.M_Usage.Name
      IF szName = ""
         DeleteEntity( mMasLC, "M_Usage", zREPOS_NONE )
      END
   END
   FOR EACH mEPA.EPA_Location
      IF mEPA.EPA_Location.wkSelected = "Y"
         szName = mEPA.EPA_Location.Name
         IF szName != ""
            CreateEntity( mMasLC, "M_Usage", zPOS_LAST )
            mMasLC.M_Usage.UsageType = "L" // Location
            mMasLC.M_Usage.Name = szName
         END
      END
   END

   COMMIT mMasLC
   DropObjectInstance( mEPA )
   CreateTemporalSubobjectVersion( mMasLC, "M_Usage" )

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: CancelAddLocationsStmts
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelAddLocationsStmts( VIEW ViewToWindow )

   VIEW mEPA     REGISTERED AS mEPA

   DropObjectInstance( mEPA )

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: ConfirmAddSurfacesStmts
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
ConfirmAddSurfacesStmts( VIEW ViewToWindow )

   VIEW mMasLC   REGISTERED AS mMasLC
   VIEW mEPA     REGISTERED AS mEPA
   STRING ( 256 ) szName
   SHORT   nRC

   AcceptSubobject( mMasLC, "M_Usage" )
   FOR EACH mMasLC.M_Usage
      szName = mMasLC.M_Usage.Name
      IF szName = ""
         DeleteEntity( mMasLC, "M_Usage", zREPOS_NONE )
      END
   END
   FOR EACH mEPA.EPA_Surface
      IF mEPA.EPA_Surface.wkSelected = "Y"
         szName = mEPA.EPA_Surface.Name
         IF szName != ""
            CreateEntity( mMasLC, "M_Usage", zPOS_LAST )
            mMasLC.M_Usage.UsageType = "S" // Surface
            mMasLC.M_Usage.Name = szName
         END
      END
   END

   COMMIT mMasLC
   DropObjectInstance( mEPA )
   CreateTemporalSubobjectVersion( mMasLC, "M_Usage" )

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: CancelAddSurfacesStmts
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelAddSurfacesStmts( VIEW ViewToWindow )

   VIEW mEPA     REGISTERED AS mEPA

   DropObjectInstance( mEPA )

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: InitClaimsStmtsForInsert
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitClaimsStmtsForInsert( VIEW ViewToWindow )

   VIEW mMasLC   REGISTERED AS mMasLC
   VIEW mEPA     BASED ON LOD  mEPA
   STRING ( 16 ) szClass

// CancelCurrentTemporalSubobject( ViewToWindow, "InitClaimsStmtsForInsert: " )
   GET VIEW mEPA NAMED "mEPA"
   IF mEPA != 0
      DropObjectInstance( mEPA )
   END

   ACTIVATE mEPA WHERE mEPA.EPA_ChemicalFamily.ChemicalFamily = mMasLC.MasterProduct.ChemicalFamily
   FOR EACH mEPA.EPA_Claim
      szClass = mEPA.EPA_Claim.ClaimsClassification
      IF szClass = "Bacteria" OR szClass = "Fungi" OR szClass = "Viruses" OR szClass = "Protozoa"
         CreateEntity( mEPA, szClass, zPOS_LAST )
      ELSE
         TraceLineS( "Invalid ClaimsClassification: ", szClass )
      END
   END

   NAME VIEW mEPA "mEPA"

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: InitSurfacesStmtsForInsert
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitSurfacesStmtsForInsert( VIEW ViewToWindow )

   VIEW mMasLC   REGISTERED AS mMasLC
   VIEW mEPA     BASED ON LOD  mEPA

// CancelCurrentTemporalSubobject( ViewToWindow, "InitSurfacesStmtsForInsert: " )
   GET VIEW mEPA NAMED "mEPA"
   IF mEPA != 0
      DropObjectInstance( mEPA )
   END

   ACTIVATE mEPA WHERE mEPA.EPA_ChemicalFamily.ChemicalFamily = mMasLC.MasterProduct.ChemicalFamily
   NAME VIEW mEPA "mEPA"

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: InitLocationsStmtsForInsert
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitLocationsStmtsForInsert( VIEW ViewToWindow )

   VIEW mMasLC   REGISTERED AS mMasLC
   VIEW mEPA     BASED ON LOD  mEPA

// CancelCurrentTemporalSubobject( ViewToWindow, "InitLocationsStmtsForInsert: " )
   GET VIEW mEPA NAMED "mEPA"
   IF mEPA != 0
      DropObjectInstance( mEPA )
   END

   ACTIVATE mEPA WHERE mEPA.EPA_ChemicalFamily.ChemicalFamily = mMasLC.MasterProduct.ChemicalFamily
   NAME VIEW mEPA "mEPA"

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: InitAppTypesStmtsForInsert
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitAppTypesStmtsForInsert( VIEW ViewToWindow )

   VIEW mMasLC   REGISTERED AS mMasLC
   VIEW mEPA     BASED ON LOD  mEPA

// CancelCurrentTemporalSubobject( ViewToWindow, "InitAppTypesStmtsForInsert: " )
   GET VIEW mEPA NAMED "mEPA"
   IF mEPA != 0
      DropObjectInstance( mEPA )
   END

   ACTIVATE mEPA WHERE mEPA.EPA_ChemicalFamily.ChemicalFamily = mMasLC.MasterProduct.ChemicalFamily
   NAME VIEW mEPA "mEPA"

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: InitAddItems
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitAddItems( VIEW ViewToWindow )

   VIEW wWebXfer REGISTERED AS wWebXfer

   wWebXfer.Root.String = "\r\n"
   wWebXfer.Root.Note = ","

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: ConfirmAddSubitems
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
ConfirmAddSubitems( VIEW ViewToWindow )

   VIEW mMasLC   REGISTERED AS mMasLC
   VIEW wWebXfer REGISTERED AS wWebXfer
   SHORT nCount

   // Call operation to split text up into one or more entities, depending on the view, EntityName and
   // AttributeName passed in mMasLC root work entities.
   nCount = SplitParagraphOnLinefeed( mMasLC.MasterLabelContent.wAddStatementsWorkText,
                                      mMasLC,
                                      mMasLC.MasterLabelContent.wAddStatementsEntityName,
                                      mMasLC.MasterLabelContent.wAddStatementsAttributeName,
                                      wWebXfer.Root.String ) // delimiters

   // Set Usage Type and Claims Classification for any entry for which the values haven't been set.
   IF mMasLC.MasterLabelContent.wAddStatementsEntityName = "M_SubUsage"
      FOR EACH mMasLC.M_SubUsage
         mMasLC.M_SubUsage.UsageType = mMasLC.M_UsageType.UsageType
      END
   END
   RETURN nCount
END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: ConfirmAddItemsMultiple
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
ConfirmAddItemsMultiple( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC
   VIEW wWebXfer REGISTERED AS wWebXfer
   STRING ( 2048 ) szName
   SHORT nCount
   SHORT nSubCount

   // Call operation to split text up into one or more entities, depending on the view, EntityName and
   // AttributeName passed in mMasLC root work entities.
   nCount = SplitParagraphOnLinefeed( mMasLC.MasterLabelContent.wAddStatementsWorkText,
                                      mMasLC,
                                      mMasLC.MasterLabelContent.wAddStatementsEntityName,
                                      mMasLC.MasterLabelContent.wAddStatementsAttributeName,
                                      wWebXfer.Root.String ) // delimiters

   // Usage Type Processing
   // Set Usage Type and Claims Classification for any entry for which the values haven't been set.
   IF mMasLC.MasterLabelContent.wAddStatementsEntityName = "M_Usage"
      // Set Usage Type for any entry for which the value hasn't been set.
      FOR EACH mMasLC.M_Usage
         IF mMasLC.M_Usage.UsageType = ""
            mMasLC.M_Usage.UsageType = mMasLC.M_UsageType.UsageType
         END
      END
   END

   // Convert UsageGroup temporary entries into persistent entries
   IF mMasLC.MasterLabelContent.wAddStatementsEntityName = "M_UsageGroupUsageTemp"
      // Transfer temp entries to real entries.
      FOR EACH mMasLC.M_UsageGroupUsageTemp
         CREATE ENTITY mMasLC.M_Usage
         mMasLC.M_Usage.Name = mMasLC.M_UsageGroupUsageTemp.Name
         mMasLC.M_Usage.UsageType = mMasLC.M_UsageType.UsageType
         //INCLUDE mMasLC.M_UsageUsageGroup FROM mMasLC.M_UsageGroup
         INCLUDE mMasLC.M_UsageGroupUsage FROM mMasLC.M_Usage
         INCLUDE mMasLC.M_UsageUsageGroup FROM mMasLC.M_UsageGroup
         DELETE ENTITY mMasLC.M_UsageGroupUsageTemp NONE
      END

      // Sort the Usage entries just added.
      OrderEntityForView( mMasLC, "M_Usage", "Name A" )
      OrderEntityForView( mMasLC, "M_UsageGroupUsage", "Name A" )
   END
   
   IF wWebXfer.Root.Note != ""
      wWebXfer.Root.String = wWebXfer.Root.Note
      mMasLC.MasterLabelContent.wAddStatementsEntityName = "M_SubUsage"
      FOR EACH mMasLC.M_Usage
         mMasLC.MasterLabelContent.wAddStatementsWorkText = mMasLC.M_Usage.Name
         nSubCount = ConfirmAddSubitems( ViewToWindow )
         IF nSubCount >= 2
            SET CURSOR FIRST mMasLC.M_SubUsage
            mMasLC.M_Usage.Name = "{{}}"
            szName = mMasLC.M_SubUsage.Name
            SetFirstCharacterCase( szName, 0 )
            mMasLC.M_SubUsage.Name = szName
         ELSE
            FOR EACH mMasLC.M_SubUsage
               DELETE ENTITY mMasLC.M_SubUsage NONE
            END
         END
      END
   END
END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: ConfirmAddItemsMultipleClaims
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
ConfirmAddItemsMultipleClaims( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC
   VIEW wWebXfer REGISTERED AS wWebXfer
   SHORT nRC

   // Make sure that a Claims Classification has been selected.
   IF mMasLC.MasterLabelContent.wSelectedClaimsClassification = ""
      MessageSend( ViewToWindow, "", "Add Claims Entries",
                   "A Claims Classification value must be selected.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN 2
   END

   // Call operation to split text up into one or more entities, depending on the view, EntityName and
   // AttributeName passed in mMasLC root work entities.
   SplitParagraphOnLinefeed( mMasLC.MasterLabelContent.wAddStatementsWorkText,
                             mMasLC,
                             mMasLC.MasterLabelContent.wAddStatementsEntityName,
                             mMasLC.MasterLabelContent.wAddStatementsAttributeName,
                             wWebXfer.Root.String ) // delimiters

   // Set Usage Type and Claims Classification for any entry for which the values haven't been set.
   FOR EACH mMasLC.M_Usage
      IF mMasLC.M_Usage.UsageType = ""
         mMasLC.M_Usage.UsageType = "C"
         mMasLC.M_Usage.ClaimsClassification = mMasLC.MasterLabelContent.wSelectedClaimsClassification
      END
   END

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: GOTO_MarketingStatementAdd
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
GOTO_MarketingStatementAdd( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC

   // Set up the work areas that define to the Add Items page that the items being added are
   // Marketing Statements.
   mMasLC.MasterLabelContent.wAddStatementsEntityName    = "M_MarketingStatement"
   mMasLC.MasterLabelContent.wAddStatementsAttributeName = "Text"
   mMasLC.MasterLabelContent.wAddStatementsPageTitle     = "Marketing Statements"
   mMasLC.MasterLabelContent.wAddStatementsWorkText      = ""

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: GOTO_LocationStatementAdd
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
GOTO_LocationStatementAdd( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC

   // Set up the work areas that define to the Add Items page that the items being added are
   // Marketing Statements.
   mMasLC.MasterLabelContent.wAddStatementsEntityName    = "M_Usage"
   mMasLC.MasterLabelContent.wAddStatementsAttributeName = "Name"
   mMasLC.MasterLabelContent.wAddStatementsPageTitle     = "Location Statements"
   mMasLC.MasterLabelContent.wAddStatementsWorkText      = ""

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: GOTO_AddUsageStatements
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
GOTO_AddUsageStatements( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC

   // Set up the work areas that define to the Add Items page which items are being added.
   mMasLC.MasterLabelContent.wAddStatementsEntityName    = "M_Usage"
   mMasLC.MasterLabelContent.wAddStatementsAttributeName = "Name"
   mMasLC.MasterLabelContent.wAddStatementsWorkText      = ""
   IF mMasLC.M_UsageType.UsageType = "S"
      // Surfaces
      mMasLC.MasterLabelContent.wAddStatementsPageTitle = "Surfaces"
   ELSE
      IF mMasLC.M_UsageType.UsageType = "L"
         // Locations
         mMasLC.MasterLabelContent.wAddStatementsPageTitle = "Locations"
      ELSE
         IF mMasLC.M_UsageType.UsageType = "T"
            mMasLC.MasterLabelContent.wAddStatementsPageTitle = "Application Use"
         ELSE
            mMasLC.MasterLabelContent.wAddStatementsPageTitle = "Unknown"
         END
      END
   END

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: GOTO_AddSubUsageStatements
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
GOTO_AddSubUsageStatements( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC

   // Set up the work areas that define to the Add SubItems page which items are being added.
   mMasLC.MasterLabelContent.wAddStatementsEntityName    = "M_SubUsage"
   mMasLC.MasterLabelContent.wAddStatementsAttributeName = "Name"
   mMasLC.MasterLabelContent.wAddStatementsWorkText      = ""
   IF mMasLC.M_UsageType.UsageType = "S"
      // Surfaces
      mMasLC.MasterLabelContent.wAddStatementsPageTitle = "Surfaces"
   ELSE
      IF mMasLC.M_UsageType.UsageType = "L"
         // Locations
         mMasLC.MasterLabelContent.wAddStatementsPageTitle = "Locations"
      ELSE
         IF mMasLC.M_UsageType.UsageType = "T"
            mMasLC.MasterLabelContent.wAddStatementsPageTitle = "Application Use"
         ELSE
            mMasLC.MasterLabelContent.wAddStatementsPageTitle = "Unknown"
         END
      END
   END

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: GOTO_AddGroupUsageStatements
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
GOTO_AddGroupUsageStatements( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC

   // Set up the work areas that define to the Add Items page which items are being added.
   mMasLC.MasterLabelContent.wAddStatementsEntityName    = "M_UsageGroupUsageTemp"
   mMasLC.MasterLabelContent.wAddStatementsAttributeName = "Name"
   mMasLC.MasterLabelContent.wAddStatementsWorkText      = ""
   IF mMasLC.M_UsageType.UsageType = "S"
      // Surfaces
      mMasLC.MasterLabelContent.wAddStatementsPageTitle = "Surfaces"
   ELSE
      IF mMasLC.M_UsageType.UsageType = "L"
         // Locations
         mMasLC.MasterLabelContent.wAddStatementsPageTitle = "Locations"
      ELSE
         IF mMasLC.M_UsageType.UsageType = "T"
            mMasLC.MasterLabelContent.wAddStatementsPageTitle = "Application Use"
         ELSE
            mMasLC.MasterLabelContent.wAddStatementsPageTitle = "Unknown"
         END
      END
   END

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: GOTO_UpdateGroupUsageStatement
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
GOTO_UpdateGroupUsageStatement( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC

   // Position on the corresponding M_Usage entity and create temporal subobject version.
   IF mMasLC.M_UsageGroupUsage.ID = ""
      SET CURSOR FIRST mMasLC.M_Usage WHERE mMasLC.M_Usage.Name = mMasLC.M_UsageGroupUsage.Name
   ELSE
      SET CURSOR FIRST mMasLC.M_Usage WHERE mMasLC.M_Usage.ID = mMasLC.M_UsageGroupUsage.ID
   END
   CreateTemporalSubobjectVersion( mMasLC, "M_Usage" )

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: GOTO_DisplayGeneratedTextMktg
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
GOTO_DisplayGeneratedTextMktg( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC

   // Build the display Keyword entries from the Marketing keyword entries.
   BuildUsageKeyEntries( mMasLC,
                         "M_InsertTextKeywordMarketing",
                         "M_InsertTextMarketing",
                         mMasLC.M_MarketingStatement.Text,
                         mMasLC.M_MarketingStatement.Title )

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: GOTO_DisplayGeneratedTextDU
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
GOTO_DisplayGeneratedTextDU( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC

   // Build the display Keyword entries from the Directions For Use keyword entries.
   BuildUsageKeyEntries( mMasLC,
                         "M_InsertTextKeywordDU",
                         "M_InsertTextDU",
                         mMasLC.M_DirectionsForUseStatement.Text,
                         mMasLC.M_DirectionsForUseStatement.Title )

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: GOTO_DisplayGeneratedTextSD
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
GOTO_DisplayGeneratedTextSD( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC

   // Build the display Keyword entries from the Directions For Use keyword entries.
   BuildUsageKeyEntries( mMasLC,
                         "M_InsertTextKeywordSD",
                         "M_InsertTextSD",
                         mMasLC.M_StorageDisposalStatement.Text,
                         mMasLC.M_StorageDisposalStatement.Title )

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: GOTO_DisplayGeneratedTextGeneral
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
GOTO_DisplayGeneratedTextGeneral( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC

   // Build the display Keyword entries from the Directions For Use keyword entries.
   BuildUsageKeyEntries( mMasLC,
                         "M_InsertTextKeywordGeneral",
                         "M_InsertTextGeneral",
                         mMasLC.M_GeneralStatement.Text ,
                         mMasLC.M_GeneralStatement.Title )

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: GOTO_DisplayGeneratedTextUsage
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
GOTO_DisplayGeneratedTextUsage( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC

   BuildUsageKeyEntries( mMasLC, "M_InsertTextKeywordUsage",
                         "M_InsertTextUsage", mMasLC.M_Usage.Name, "" )

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: GOTO_AddFirstAidStatements
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
GOTO_AddFirstAidStatements( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC

   // Set up the work areas that define to the Add Items page that the items being added are First Aid
   // Statements.
   mMasLC.MasterLabelContent.wAddStatementsEntityName    = "M_GeneralStatement"
   mMasLC.MasterLabelContent.wAddStatementsAttributeName = "Text"
   mMasLC.MasterLabelContent.wAddStatementsPageTitle     = "First Aid Statements"
   mMasLC.MasterLabelContent.wAddStatementsWorkText      = ""

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: GOTO_AddUsageGroup
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
GOTO_AddUsageGroup( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC
   INTEGER       SeqNo
   STRING ( 3 )  szSeqNo

   // Create a new Usage Group temporal entity and set Seq. No to last entry.
   SeqNo = 0
   FOR EACH mMasLC.M_UsageGroup
      SeqNo = SeqNo + 1
   END
   SeqNo = SeqNo + 1
   szSeqNo = SeqNo
   CREATE ENTITY mMasLC.M_UsageGroup
   mMasLC.M_UsageGroup.Name = szSeqNo

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: REGENERATE_TitleText
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
REGENERATE_TitleText( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC

   // Rebuild the M_InsertTextKeyword subobject from the selected entries in M_InsertTextKeywordBase.
   FOR EACH mMasLC.M_InsertTextKeyword
      DELETE ENTITY mMasLC.M_InsertTextKeyword NONE
   END
   FOR EACH mMasLC.M_InsertTextKeywordBase
      CREATE ENTITY mMasLC.M_InsertTextKeyword
      SetMatchingAttributesByName( mMasLC, "M_InsertTextKeyword", mMasLC, "M_InsertTextKeywordBase", zSET_ALL )
      FOR EACH mMasLC.M_InsertTextBase
         IF mMasLC.M_InsertTextBase.wSelected = "Y"
            CREATE ENTITY mMasLC.M_InsertText
            SetMatchingAttributesByName( mMasLC, "M_InsertText", mMasLC, "M_InsertTextBase", zSET_ALL )
         END
      END
   END

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: COPY_InsertKeywordMarketing
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
COPY_InsertKeywordMarketing( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC

   // Copy the M_InsertTextKeywordMarketing subobject to the base derived subobject.

   IF mMasLC.DisplayKeywordText EXISTS
      DELETE ENTITY mMasLC.DisplayKeywordText
   END
   CREATE ENTITY mMasLC.DisplayKeywordText
   CREATE ENTITY mMasLC.M_InsertTextKeywordBase
   SetMatchingAttributesByName( mMasLC, "M_InsertTextKeywordBase", mMasLC, "M_InsertTextKeywordMarketing", zSET_ALL )
   FOR EACH mMasLC.M_InsertTextMarketing
      CREATE ENTITY mMasLC.M_InsertTextBase
      SetMatchingAttributesByName( mMasLC, "M_InsertTextBase", mMasLC, "M_InsertTextMarketing", zSET_ALL )
   END

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: COPY_InsertKeywordDU
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
COPY_InsertKeywordDU( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC

   // Copy the M_InsertTextKeywordDU subobject to the base derived subobject.

   IF mMasLC.DisplayKeywordText EXISTS
      DELETE ENTITY mMasLC.DisplayKeywordText
   END
   CREATE ENTITY mMasLC.DisplayKeywordText
   CREATE ENTITY mMasLC.M_InsertTextKeywordBase
   SetMatchingAttributesByName( mMasLC, "M_InsertTextKeywordBase", mMasLC, "M_InsertTextKeywordDU", zSET_ALL )
   FOR EACH mMasLC.M_InsertTextDU
      CREATE ENTITY mMasLC.M_InsertTextBase
      SetMatchingAttributesByName( mMasLC, "M_InsertTextBase", mMasLC, "M_InsertTextDU", zSET_ALL )
   END

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: COPY_InsertKeywordTitleDU
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
COPY_InsertKeywordTitleDU( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC

   // Copy the M_InsertTextKeywordDU subobject to the base derived subobject.

   IF mMasLC.DisplayKeywordText EXISTS
      DELETE ENTITY mMasLC.DisplayKeywordText
   END
   CREATE ENTITY mMasLC.DisplayKeywordText
   CREATE ENTITY mMasLC.M_InsertTextKeywordBase
   SetMatchingAttributesByName( mMasLC, "M_InsertTextKeywordBase", mMasLC, "M_InsertTextKeywordSectionDU", zSET_ALL )
   FOR EACH mMasLC.M_InsertTextDU
      CREATE ENTITY mMasLC.M_InsertTextBase
      SetMatchingAttributesByName( mMasLC, "M_InsertTextBase", mMasLC, "M_InsertTextSectionDU", zSET_ALL )
   END

END


/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: CopyAndAddSectionDU
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CopyAndAddSectionDU( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC
   VIEW mMasLC2 BASED ON LOD mMasLC
   STRING ( 254 ) szName
   SHORT  nRC
   
   nRC = AcceptSubobject( mMasLC, "M_DirectionsForUseSection" )
   IF nRC < 0
      MessageSend( ViewToWindow, "", "Copy Directions For Use Section",
                   "Error saving Directions For Use Section.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      RETURN 2
   END

   CreateViewFromView( mMasLC2, mMasLC )
   CreateTemporalEntity( mMasLC, "M_DirectionsForUseSection", zPOS_LAST )
   SetMatchingAttributesByName( mMasLC, "M_DirectionsForUseSection", mMasLC2, "M_DirectionsForUseSection", zSET_NULL )
   szName = mMasLC2.M_DirectionsForUseSection.Name + " - copy"
   mMasLC.M_DirectionsForUseSection.Name = szName

   FOR EACH mMasLC2.M_InsertTextKeywordSectionDU
      CREATE ENTITY mMasLC.M_InsertTextKeywordSectionDU
      SetMatchingAttributesByName( mMasLC, "M_InsertTextKeywordSectionDU", mMasLC2, "M_InsertTextKeywordSectionDU", zSET_NULL )
      FOR EACH mMasLC2.M_InsertTextSectionDU 
         CREATE ENTITY mMasLC.M_InsertTextSectionDU
         SetMatchingAttributesByName( mMasLC, "M_InsertTextSectionDU", mMasLC2, "M_InsertTextSectionDU", zSET_NULL )
      END
   END
   DropView( mMasLC2 )
END


/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: COPY_InsertKeywordSD
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
COPY_InsertKeywordSD( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC

   // Copy the M_InsertTextKeywordSD subobject to the base derived subobject.

   IF mMasLC.DisplayKeywordText EXISTS
      DELETE ENTITY mMasLC.DisplayKeywordText
   END
   CREATE ENTITY mMasLC.DisplayKeywordText
   CREATE ENTITY mMasLC.M_InsertTextKeywordBase
   SetMatchingAttributesByName( mMasLC, "M_InsertTextKeywordBase", mMasLC, "M_InsertTextKeywordSD", zSET_ALL )
   FOR EACH mMasLC.M_InsertTextSD
      CREATE ENTITY mMasLC.M_InsertTextBase
      SetMatchingAttributesByName( mMasLC, "M_InsertTextBase", mMasLC, "M_InsertTextSD", zSET_ALL )
   END

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: COPY_InsertKeywordGeneral
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
COPY_InsertKeywordGeneral( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC

   // Copy the M_InsertTextKeywordGeneral subobject to the base derived subobject.

   IF mMasLC.DisplayKeywordText EXISTS
      DELETE ENTITY mMasLC.DisplayKeywordText
   END
   CREATE ENTITY mMasLC.DisplayKeywordText
   CREATE ENTITY mMasLC.M_InsertTextKeywordBase
   SetMatchingAttributesByName( mMasLC, "M_InsertTextKeywordBase", mMasLC, "M_InsertTextKeywordGeneral", zSET_ALL )
   FOR EACH mMasLC.M_InsertTextGeneral
      CREATE ENTITY mMasLC.M_InsertTextBase
      SetMatchingAttributesByName( mMasLC, "M_InsertTextBase", mMasLC, "M_InsertTextGeneral", zSET_ALL )
   END

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: PASTE_InsertKeywordMarketing
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
PASTE_InsertKeywordMarketing( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC

   // Paste the M_InsertTextKeywordBase subobject under the current M_MarketingStatement.

   IF mMasLC.M_InsertTextKeywordBase DOES NOT EXIST
      MessageSend( ViewToWindow, "", "Paste Keyword",
                   "No Insert Keyword entry have been copied.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN 2
   END

   FOR EACH mMasLC.M_InsertTextKeywordBase
      CREATE ENTITY mMasLC.M_InsertTextKeywordMarketing
      SetMatchingAttributesByName( mMasLC, "M_InsertTextKeywordMarketing", mMasLC, "M_InsertTextKeywordBase", zSET_NULL )
      FOR EACH mMasLC.M_InsertTextBase
         CREATE ENTITY mMasLC.M_InsertTextMarketing
         SetMatchingAttributesByName( mMasLC, "M_InsertTextMarketing", mMasLC, "M_InsertTextBase", zSET_NULL )
      END
   END

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: PASTE_InsertKeywordDU
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
PASTE_InsertKeywordDU( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC

   // Paste the M_InsertTextKeywordBase subobject under the current M_DirectionsForUseStatement.

   IF mMasLC.M_InsertTextKeywordBase DOES NOT EXIST
      MessageSend( ViewToWindow, "", "Paste Keyword",
                   "No Insert Keyword entry have been copied.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN 2
   END

   FOR EACH mMasLC.M_InsertTextKeywordBase
      CREATE ENTITY mMasLC.M_InsertTextKeywordDU
      SetMatchingAttributesByName( mMasLC, "M_InsertTextKeywordDU", mMasLC, "M_InsertTextKeywordBase", zSET_NULL )
      FOR EACH mMasLC.M_InsertTextBase
         CREATE ENTITY mMasLC.M_InsertTextDU
         SetMatchingAttributesByName( mMasLC, "M_InsertTextDU", mMasLC, "M_InsertTextBase", zSET_NULL )
      END
   END

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: PASTE_InsertKeywordSD
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
PASTE_InsertKeywordSD( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC

   // Paste the M_InsertTextKeywordBase subobject under the current M_DirectionsForUseStatement.

   IF mMasLC.M_InsertTextKeywordBase DOES NOT EXIST
      MessageSend( ViewToWindow, "", "Paste Keyword",
                   "No Insert Keyword entry have been copied.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN 2
   END

   FOR EACH mMasLC.M_InsertTextKeywordBase
      CREATE ENTITY mMasLC.M_InsertTextKeywordSD
      SetMatchingAttributesByName( mMasLC, "M_InsertTextKeywordSD", mMasLC, "M_InsertTextKeywordBase", zSET_NULL )
      FOR EACH mMasLC.M_InsertTextBase
         CREATE ENTITY mMasLC.M_InsertTextSD
         SetMatchingAttributesByName( mMasLC, "M_InsertTextSD", mMasLC, "M_InsertTextBase", zSET_NULL )
      END
   END

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: PASTE_InsertKeywordGeneral
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
PASTE_InsertKeywordGeneral( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC

   // Paste the M_InsertTextKeywordBase subobject under the current M_DirectionsForUseStatement.

   IF mMasLC.M_InsertTextKeywordBase DOES NOT EXIST
      MessageSend( ViewToWindow, "", "Paste Keyword",
                   "No Insert Keyword entry have been copied.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN 2
   END

   FOR EACH mMasLC.M_InsertTextKeywordBase
      CREATE ENTITY mMasLC.M_InsertTextKeywordGeneral
      SetMatchingAttributesByName( mMasLC, "M_InsertTextKeywordGeneral", mMasLC, "M_InsertTextKeywordBase", zSET_NULL )
      FOR EACH mMasLC.M_InsertTextBase
         CREATE ENTITY mMasLC.M_InsertTextGeneral
         SetMatchingAttributesByName( mMasLC, "M_InsertTextGeneral", mMasLC, "M_InsertTextBase", zSET_NULL )
      END
   END

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: GOTO_EnvironmentalSectionBefore
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
GOTO_EnvironmentalSectionBefore( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC

   CreateTemporalEntity( mMasLC, "M_GeneralSection", zPOS_BEFORE )

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: GOTO_StorageDispSectionAddBefore
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
GOTO_StorageDispSectionAddBefore( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC

   CreateTemporalEntity( mMasLC, "M_StorageDisposalSection", zPOS_BEFORE )

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: GOTO_DU_CategoryUpdate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
GOTO_DU_CategoryUpdate( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC

   CreateTemporalSubobjectVersion( mMasLC, "M_DirectionsForUseCategory" )

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: GOTO_DU_CategoryAdd
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
GOTO_DU_CategoryAdd( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC

   CreateTemporalEntity( mMasLC, "M_DirectionsForUseCategory", zPOS_LAST )
   
END


/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: CreateIncludeExcludeView
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CreateIncludeExcludeView( VIEW mMasLC )

   VIEW mMasLCIncludeExclude BASED ON LOD mMasLC

   CreateViewFromView( mMasLCIncludeExclude, mMasLC )
   NAME VIEW mMasLCIncludeExclude "mMasLCIncludeExclude"
END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: IncludeExclusiveOrDU_Section
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
ChangeSectionCategory( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC
   VIEW mMasLCIncludeExclude REGISTERED AS mMasLCIncludeExclude
   
   STRING ( 256 ) szNewCategoryName
   STRING ( 256 ) szCurrentCategoryName
   STRING ( 256 ) szNameTarget
   STRING ( 512 ) szMsg
   SHORT  nRC

   szNewCategoryName = mMasLC.DFU_CategoryNames.Name
   szCurrentCategoryName = mMasLC.M_DirectionsForUseCategory.Name
   TraceLineS( "Attempt to switch to DFU Category: ", szNewCategoryName )
   TraceLineS( "                from DFU Category: ", szCurrentCategoryName )

   nRC = SetCursorFirstEntityByString( mMasLCIncludeExclude, "M_DirectionsForUseCategory", "Name", szNewCategoryName, "" )
   IF nRC >= 0
      // Accept Direction for Use Section to get ready for move.
      nRC = AcceptSubobject( mMasLC, "M_DirectionsForUseSection" )
      nRC = AcceptSubobject( mMasLC, "M_DirectionsForUseCategory" )
      IF nRC < 0
         MessageSend( ViewToWindow, "", "Change Section Category Directions For Use Section",
                      "Error saving Directions For Use Section.",
                      zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
         RETURN 2
      END

      MoveSubobject( mMasLCIncludeExclude, "M_DirectionsForUseSection",
                     mMasLC, "M_DirectionsForUseSection", zPOS_LAST, zREPOS_NEXT )
      SetViewFromView( mMasLC, mMasLCIncludeExclude )
      CreateTemporalSubobjectVersion( mMasLC, "M_DirectionsForUseCategory" )
      CreateTemporalSubobjectVersion( mMasLC, "M_DirectionsForUseSection" )
   ELSE
      szMsg = "Cannot move section from: " + szCurrentCategoryName
      szMsg = szMsg + " to: "
      szMsg = szMsg + szNewCategoryName
      MessageSend( ViewToWindow, "", "Directions for Use Section", szMsg,
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN 2
   END

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: IncludeExclusiveOrDU_Section
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
IncludeExclusiveOrDU_Section( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC
   VIEW mMasLCIncludeExclude REGISTERED AS mMasLCIncludeExclude
   STRING ( 256 ) szNameXOR
   STRING ( 256 ) szNameCurrent
   STRING ( 256 ) szNameTarget
   STRING ( 512 ) szMsg

   szNameXOR = mMasLC.DFU_SectionNames.Name
   TraceLineS( "Attempt to include DFU Section: ", szNameXOR )
   
   // For the moment, we do not permit "XOR Chaining" ... e.g. A XOR B XOR C XOR A.  Not sure we need it ...
   IF szNameXOR != ""
      SetCursorFirstEntityByString( mMasLCIncludeExclude, "M_DirectionsForUseSection", "Name", szNameXOR, "" )
      IF mMasLCIncludeExclude.M_DirectionsForUseXOR_Section EXISTS
         szNameCurrent = mMasLC.M_DirectionsForUseSection.Name
         szNameTarget = mMasLCIncludeExclude.M_DirectionsForUseXOR_Section.Name
         IF szNameCurrent = szNameTarget
            IF mMasLCIncludeExclude.M_DirectionsForUseXOR_Section EXISTS
               EXCLUDE mMasLCIncludeExclude.M_DirectionsForUseXOR_Section NONE
            END
         ELSE
            szMsg = szNameXOR + ": Already exclusive to section: "
            szMsg = szMsg + szNameTarget
            MessageSend( ViewToWindow, "", "Directions for Use Section", szMsg,
                         zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
            SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
            RETURN 2
         END
      END
      IF mMasLC.M_DirectionsForUseXOR_Section EXISTS
         EXCLUDE mMasLC.M_DirectionsForUseXOR_Section NONE
      END
      
      INCLUDE mMasLC.M_DirectionsForUseXOR_Section FROM mMasLCIncludeExclude.M_DirectionsForUseSection 
      INCLUDE mMasLCIncludeExclude.M_DirectionsForUseXOR_Section FROM mMasLC.M_DirectionsForUseSection 
   ELSE
      IF mMasLC.M_DirectionsForUseXOR_Section EXISTS
         EXCLUDE mMasLC.M_DirectionsForUseXOR_Section NONE
      END
   END

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: BuildDFU_CategoryNameList
//
/////////////////////////////////////////////////////////////////////////////
LOCAL OPERATION
BuildDFU_CategoryNameList( VIEW mMasLC )

   VIEW mMasLCIncludeExclude REGISTERED AS mMasLCIncludeExclude
   STRING ( 256 ) szCurrentName
   
   FOR EACH mMasLC.DFU_CategoryNames
      DELETE ENTITY mMasLC.DFU_CategoryNames NONE
   END
   FOR EACH mMasLCIncludeExclude.M_DirectionsForUseCategory
      szCurrentName = mMasLCIncludeExclude.M_DirectionsForUseCategory.Name
      CREATE ENTITY mMasLC.DFU_CategoryNames
      mMasLC.DFU_CategoryNames.Name = szCurrentName
   END
END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: BuildDFU_SectionNameList
//
/////////////////////////////////////////////////////////////////////////////
LOCAL OPERATION
BuildDFU_SectionNameList( VIEW mMasLC, STRING ( 256 ) szSectionName )

   VIEW mMasLCIncludeExclude REGISTERED AS mMasLCIncludeExclude
   STRING ( 256 ) szCurrentName

   SetViewFromView( mMasLCIncludeExclude, mMasLC )
   FOR EACH mMasLC.DFU_SectionNames
      DELETE ENTITY mMasLC.DFU_SectionNames NONE
   END
   CREATE ENTITY mMasLC.DFU_SectionNames  // entry for blank section name
   FOR EACH mMasLCIncludeExclude.M_DirectionsForUseSection
      szCurrentName = mMasLCIncludeExclude.M_DirectionsForUseSection.Name
      IF szCurrentName != szSectionName
         CREATE ENTITY mMasLC.DFU_SectionNames
         mMasLC.DFU_SectionNames.Name = szCurrentName
      END
   END
END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: GOTO_DU_SectionUpdate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
GOTO_DU_SectionUpdate( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC
   STRING ( 256 ) szName

   CreateIncludeExcludeView( mMasLC )
   szName = mMasLC.M_DirectionsForUseSection.Name
   CreateTemporalSubobjectVersion( mMasLC, "M_DirectionsForUseSection" )
   BuildDFU_CategoryNameList( mMasLC )
   BuildDFU_SectionNameList( mMasLC, szName )
END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: GOTO_DU_SectionAdd
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
GOTO_DU_SectionAdd( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC

   CreateIncludeExcludeView( mMasLC )
   CreateTemporalEntity( mMasLC, "M_DirectionsForUseSection", zPOS_LAST )
   BuildDFU_CategoryNameList( mMasLC )
   BuildDFU_SectionNameList( mMasLC, "" )
   
END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: AcceptDirectionsForUseSection
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptDirectionsForUseSection( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC
   VIEW mMasLCIncludeExclude REGISTERED AS mMasLCIncludeExclude
   
   AcceptSubobject( mMasLC, "M_DirectionsForUseSection" )

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: AcceptDirectionsForUseCategory
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptDirectionsForUseCategory( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC
   VIEW mMasLCIncludeExclude REGISTERED AS mMasLCIncludeExclude
   
   AcceptSubobject( mMasLC, "M_DirectionsForUseCategory" )

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: AcceptDFU_CategoryGoNext
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptDFU_CategoryGoNext( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC

   AcceptSubobject( mMasLC, "M_DirectionsForUseCategory" )
   SetCursorNextEntity( mMasLC, "M_DirectionsForUseCategory", "" )
   CreateTemporalSubobjectVersion( mMasLC, "M_DirectionsForUseCategory" )

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: AcceptDFU_CategoryGoPrev
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptDFU_CategoryGoPrev( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC

   AcceptSubobject( mMasLC, "M_DirectionsForUseCategory" )
   SetCursorPrevEntity( mMasLC, "M_DirectionsForUseCategory", "" )
   CreateTemporalSubobjectVersion( mMasLC, "M_DirectionsForUseCategory" )

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: AcceptDFU_SectionGoNext
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptDFU_SectionGoNext( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC
   VIEW mMasLCIncludeExclude REGISTERED AS mMasLCIncludeExclude
   STRING ( 256 ) szName

   AcceptSubobject( mMasLC, "M_DirectionsForUseSection" )
   SetCursorNextEntity( mMasLC, "M_DirectionsForUseSection", "" )
   szName = mMasLC.M_DirectionsForUseSection.Name
   CreateTemporalSubobjectVersion( mMasLC, "M_DirectionsForUseSection" )
   BuildDFU_SectionNameList( mMasLC, szName )

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: AcceptDFU_SectionGoPrev
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptDFU_SectionGoPrev( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC
   VIEW mMasLCIncludeExclude REGISTERED AS mMasLCIncludeExclude
   STRING ( 256 ) szName

   AcceptSubobject( mMasLC, "M_DirectionsForUseSection" )
   SetCursorPrevEntity( mMasLC, "M_DirectionsForUseSection", "" )
   szName = mMasLC.M_DirectionsForUseSection.Name
   CreateTemporalSubobjectVersion( mMasLC, "M_DirectionsForUseSection" )
   BuildDFU_SectionNameList( mMasLC, szName )

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: AcceptDFU_StatementGoNext
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptDFU_StatementGoNext( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC

   AcceptSubobject( mMasLC, "M_DirectionsForUseStatement" )
   SetCursorNextEntity( mMasLC, "M_DirectionsForUseStatement", "" )
   CreateTemporalSubobjectVersion( mMasLC, "M_DirectionsForUseStatement" )

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: AcceptDFU_StatementGoPrev
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptDFU_StatementGoPrev( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC

   AcceptSubobject( mMasLC, "M_DirectionsForUseStatement" )
   SetCursorPrevEntity( mMasLC, "M_DirectionsForUseStatement", "" )
   CreateTemporalSubobjectVersion( mMasLC, "M_DirectionsForUseStatement" )

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: AcceptDFU_KeywordGoPrev
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptDFU_KeywordGoPrev( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC
 
   AcceptSubobject( mMasLC, "M_InsertTextKeywordDU" )
   SetCursorPrevEntity( mMasLC, "M_InsertTextKeywordDU", "" )
   CreateTemporalSubobjectVersion( mMasLC, "M_InsertTextKeywordDU" )

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: AcceptDFU_KeywordGoNext
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptDFU_KeywordGoNext( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC
 
   AcceptSubobject( mMasLC, "M_InsertTextKeywordDU" )
   SetCursorNextEntity( mMasLC, "M_InsertTextKeywordDU", "" )
   CreateTemporalSubobjectVersion( mMasLC, "M_InsertTextKeywordDU" )

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: AcceptDirectionsForUseSection
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelDirectionsForUseSection( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC
   VIEW mMasLCIncludeExclude REGISTERED AS mMasLCIncludeExclude
   
   CancelSubobject( mMasLC, "M_DirectionsForUseSection" )
   DropView( mMasLCIncludeExclude )

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: GOTO_MarketingSectionAddBefore
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
GOTO_MarketingSectionAddBefore( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC

   CreateTemporalEntity( mMasLC, "M_MarketingSection", zPOS_BEFORE )

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: ADD_BlankClaimsKeywordAndText
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
ADD_BlankClaimsKeywordAndText( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC

   // Create Usage Keyword and one subordinate text entity.
   CREATE ENTITY mMasLC.M_InsertTextKeywordUsage
   CREATE ENTITY mMasLC.M_InsertTextUsage

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: AttemptDecipheredEntry
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AttemptDecipheredEntry( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC
   STRING ( 2048 ) szName
   STRING ( 256 ) szKeyword
   STRING ( 256 ) szKeyValue
   SHORT  nRC
      
   // Try to decipher the Keyword and the Text
   szName = mMasLC.M_Usage.Name
   nRC = DecipherUsageKeyword( szName, "{(", ")}", szKeyword, 256, szKeyValue, 256 )
   IF nRC = 0
      // Create Usage Keyword and one subordinate text entity.
      CREATE ENTITY mMasLC.M_InsertTextKeywordUsage
      CREATE ENTITY mMasLC.M_InsertTextUsage
      mMasLC.M_Usage.Name = szName
      mMasLC.M_InsertTextKeywordUsage.Name = szKeyword
      mMasLC.M_InsertTextUsage.Text = szKeyValue
   END
END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: AttemptEmbedKeywords
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AttemptEmbedKeywords( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC

   FOR EACH mMasLC.M_Usage
      AttemptDecipheredEntry( ViewToWindow )
   END
END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: AcceptAndReturnUsageStatement
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptAndReturnUsageStatement( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC

   // Accept temporal Usage statement and go to build nongroup entries.
   AcceptSubobject( mMasLC, "M_Usage" )
   BuildNonGroupEntries( mMasLC )

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: AcceptAndReturnSubUsageStatement
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptAndReturnSubUsageStatement( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC

   mMasLC.M_SubUsage.UsageType = "S"
      
   // Accept temporal Usage statement.
   AcceptSubobject( mMasLC, "M_SubUsage" )

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: AcceptAddNewSubUsageStatement
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptAddNewSubUsageStatement( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC
   SHORT nRC

   mMasLC.M_SubUsage.UsageType = "S"
      
   // Accept temporal Usage statement.
   nRC = AcceptSubobject( mMasLC, "M_SubUsage" )
   IF nRC < 0
      MessageSend( ViewToWindow, "", "Accept and Add New Surface Statement",
                   "Error saving sub-surface statement.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      RETURN 2
   END
   CreateTemporalEntity( mMasLC, "M_SubUsage", zPOS_AFTER )

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: DELETE_UsageGroupEntriesOnly
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
DELETE_UsageGroupEntriesOnly( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC
   SHORT nRC

   // Delete each selected Group and the corresponding M_Usage entity.
   FOR EACH mMasLC.M_UsageGroup
      IF mMasLC.M_UsageGroup.wSelected = "Y"
         FOR EACH mMasLC.M_Usage
            IF mMasLC.M_UsageUsageGroup EXISTS
               IF mMasLC.M_UsageUsageGroup.Name = mMasLC.M_UsageGroup.Name
                  EXCLUDE mMasLC.M_UsageUsageGroup
                  SET CURSOR FIRST mMasLC.M_UsageGroupUsage WHERE mMasLC.M_UsageGroupUsage.Name = mMasLC.M_Usage.Name
                  EXCLUDE mMasLC.M_UsageGroupUsage NONE
               END
            END
         END
         DELETE ENTITY  mMasLC.M_UsageGroup NONE
      END
   END

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: DELETE_UsageGroupEntries
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
DELETE_UsageGroupEntries( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC
   SHORT nRC

   // Delete each selected Group and exclude the Group from the corresponding M_Usage entity.
   FOR EACH mMasLC.M_UsageGroup
      IF mMasLC.M_UsageGroup.wSelected = "Y"
         FOR EACH mMasLC.M_Usage
            IF mMasLC.M_UsageUsageGroup EXISTS
               IF mMasLC.M_UsageUsageGroup.Name = mMasLC.M_UsageGroup.Name
                  EXCLUDE mMasLC.M_UsageUsageGroup
                  SET CURSOR FIRST mMasLC.M_UsageGroupUsage WHERE mMasLC.M_UsageGroupUsage.Name = mMasLC.M_Usage.Name
                  EXCLUDE mMasLC.M_UsageGroupUsage NONE
                  DELETE ENTITY mMasLC.M_Usage NONE
               END
            END
         END
         DELETE ENTITY  mMasLC.M_UsageGroup NONE
      END
   END

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: DELETE_SelectedGroupUsageEntries
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
DELETE_SelectedGroupUsageEntries( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC
   SHORT nRC

   FOR EACH mMasLC.M_UsageGroupUsage
      IF mMasLC.M_UsageGroupUsage.wSelected = "Y"
         // Position on corresponding M_Usage entry.
         IF mMasLC.M_UsageGroupUsage.ID = ""
            SET CURSOR FIRST mMasLC.M_Usage WHERE mMasLC.M_Usage.Name = mMasLC.M_UsageGroupUsage.Name
         ELSE
            SET CURSOR FIRST mMasLC.M_Usage WHERE mMasLC.M_Usage.ID = mMasLC.M_UsageGroupUsage.ID
         END
         EXCLUDE mMasLC.M_UsageGroupUsage NONE
         DELETE ENTITY  mMasLC.M_Usage NONE
      END
   END

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: SelectMLC_UsageEntriesForGroup
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SelectMLC_UsageEntriesForGroup( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC

   // Include each selected M_Usage entry under the current Group.
   FOR EACH mMasLC.M_UsageNonGroupUsage
      IF mMasLC.M_UsageNonGroupUsage.wSelected = "Y"
         SET CURSOR FIRST mMasLC.M_Usage WHERE mMasLC.M_Usage.Name = mMasLC.M_UsageNonGroupUsage.Name
         INCLUDE mMasLC.M_UsageUsageGroup FROM mMasLC.M_UsageGroup
         INCLUDE mMasLC.M_UsageGroupUsage FROM mMasLC.M_Usage
         EXCLUDE mMasLC.M_UsageNonGroupUsage NONE
      END
   END
   OrderEntityForView( mMasLC, "M_UsageGroupUsage", "Name A" )

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: RemoveMLC_UsageEntriesFromGroup
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
RemoveMLC_UsageEntriesFromGroup( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC

   // Exclude each selected M_Usage from under the group.
   FOR EACH mMasLC.M_UsageGroupUsage
      IF mMasLC.M_UsageGroupUsage.wSelected = "Y"
         SET CURSOR FIRST mMasLC.M_Usage WHERE mMasLC.M_Usage.Name = mMasLC.M_UsageGroupUsage.Name
         INCLUDE mMasLC.M_UsageNonGroupUsage FROM mMasLC.M_Usage
         EXCLUDE mMasLC.M_UsageUsageGroup NONE
         EXCLUDE mMasLC.M_UsageGroupUsage NONE
      END
   END

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: COPY_UsageKeywordAndText
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
COPY_UsageKeywordAndText( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC

   // Copy the current Usage Keyword subobject to the Keyword work subobject.

   // First delete any current copy entry.
   FOR EACH mMasLC.CopyM_InsertTextKeyword
      DELETE ENTITY mMasLC.CopyM_InsertTextKeyword NONE
   END

   // Copy in the current subobject.
   CREATE ENTITY mMasLC.CopyM_InsertTextKeyword
   SetMatchingAttributesByName( mMasLC, "CopyM_InsertTextKeyword", mMasLC, "M_InsertTextKeywordUsage", zSET_NULL )
   FOR EACH mMasLC.M_InsertTextUsage
      CREATE ENTITY mMasLC.CopyM_InsertText
      SetMatchingAttributesByName( mMasLC, "CopyM_InsertText", mMasLC, "M_InsertTextUsage", zSET_NULL )
   END

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: PASTE_UsageKeywordAndText
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
PASTE_UsageKeywordAndText( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC

   // Copy the Keyword work subobject to create a new CopyM_InsertTextKeyword subobject.

   IF mMasLC.CopyM_InsertTextKeyword DOES NOT EXIST
      MessageSend( ViewToWindow, "", "Paste Usage Keyword",
                   "No current Keyword Copy exists.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      RETURN 2
   END

   // Copy in the current copy subobject.
   CREATE ENTITY mMasLC.M_InsertTextKeywordUsage
   SetMatchingAttributesByName( mMasLC, "M_InsertTextKeywordUsage", mMasLC, "CopyM_InsertTextKeyword", zSET_NULL )
   FOR EACH mMasLC.CopyM_InsertText
      CREATE ENTITY mMasLC.M_InsertTextUsage
      SetMatchingAttributesByName( mMasLC, "M_InsertTextUsage", mMasLC, "CopyM_InsertText", zSET_NULL )
   END

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: GOTO_CopyMLC_Version
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
GOTO_CopyMLC_Version( VIEW ViewToWindow )

   VIEW mMasProd  REGISTERED AS mMasProd
   VIEW wWebXfer  REGISTERED AS wWebXfer
   VIEW mMasLCNew BASED ON LOD  mMasLC

   // Initialize a new MLC for Copy.
   ACTIVATE mMasLCNew EMPTY
   NAME VIEW mMasLCNew "mMasLC"
   CREATE ENTITY mMasLCNew.MasterLabelContent
   INCLUDE mMasLCNew.MasterProduct FROM mMasProd.MasterProduct
   mMasLCNew.MasterLabelContent.Finalized        = "W"
   mMasLCNew.MasterLabelContent.RevisionDate     = wWebXfer.Root.dCurrentDateTime
   mMasLCNew.MasterLabelContent.CreatedDateTime  = wWebXfer.Root.dCurrentDateTime
   mMasLCNew.MasterLabelContent.ModifiedDateTime = wWebXfer.Root.dCurrentDateTime

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: CANCEL_MLC_Version
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CANCEL_MLC_Version( VIEW ViewToWindow )

   VIEW mMasLCNew REGISTERED AS mMasLC

   // Drop the temporary object.
   DropObjectInstance( mMasLCNew )

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: COPY_MLC_Version
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
COPY_MLC_Version( VIEW ViewToWindow )

   VIEW mMasProd  REGISTERED AS mMasProd
   VIEW wWebXfer  REGISTERED AS wWebXfer
   VIEW mMasLCNew REGISTERED AS mMasLC
   VIEW mMasLCOld BASED ON LOD  mMasLC

   // Copy the selected MLC in mMasProd, creating a new version of the content in mMasLCNew.
   ACTIVATE mMasLCOld WHERE mMasLCOld.MasterLabelContent.ID = mMasProd.MasterLabelContent.ID
   NAME VIEW mMasLCOld "mMasLCOld"
   CopyMLCToNewProduct( mMasLCNew,mMasLCOld )
   COMMIT mMasLCNew
   DropObjectInstance( mMasLCNew )

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: AddUpdateNetContents
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AddUpdateNetContents( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC

   IF mMasLC.NetContents EXISTS
      CreateTemporalSubobjectVersion( mMasLC, "NetContents" )
   ELSE
      CreateTemporalEntity( mMasLC, "NetContents", zPOS_AFTER )
   END
END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: SaveNetContents
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SaveNetContents( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC
      
   // Accept temporal NetContents.
   AcceptSubobject( mMasLC, "NetContents" )
   COMMIT mMasLC
   
END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: SaveTOC
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SaveTOC( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC

   COMMIT mMasLC
   
END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: SaveMarketingSection
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SaveMarketingSection( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC
      
   // Accept temporal NetContents.
   AcceptSubobject( mMasLC, "M_MarketingSection" )
   COMMIT mMasLC
   
END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: SaveMarketingSectionVersion
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SaveMarketingSectionVersion( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC
      
   // Accept temporal NetContents.
   AcceptSubobject( mMasLC, "M_MarketingSection" )
   COMMIT mMasLC
   CreateTemporalSubobjectVersion( mMasLC, "M_MarketingSection" )
   
END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: DummyOperationForPositioning
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
DummyOperationForPositioning( VIEW ViewToWindow )

   // Do nothing ... for positioning only

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: ParseMarketingStatementText
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
ParseMarketingStatementText( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC
   ParseStatementForKeywords( mMasLC, "M_MarketingStatement", "Text",
                              "M_InsertTextKeywordMarketing", "M_InsertTextMarketing", "{}" )
END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: ParseDFU_StatementText
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
ParseDFU_StatementText( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC
   ParseStatementForKeywords( mMasLC, "M_DirectionsForUseStatement", "Text",
                              "M_InsertTextKeywordDU", "M_InsertTextDU", "{}" )
END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: ParseDFU_SectionText
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
ParseDFU_SectionText( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC
   ParseStatementForKeywords( mMasLC, "M_DirectionsForUseSection", "Title",
                              "M_InsertTextKeywordSectionDU", "M_InsertTextSectionDU", "{}" )
   ParseStatementForKeywords( mMasLC, "M_DirectionsForUseSection", "Subtitle",
                              "M_InsertTextKeywordSectionDU", "M_InsertTextSectionDU", "{}" )

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: AcceptMarketingStatementGoNext
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptMarketingStatementGoNext( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC
 
   AcceptSubobject( mMasLC, "M_MarketingStatement" )
   SetCursorNextEntity( mMasLC, "M_MarketingStatement", "" )
   CreateTemporalSubobjectVersion( mMasLC, "M_MarketingStatement" )

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: AcceptMarketingStatementGoPrev
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptMarketingStatementGoPrev( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC
 
   AcceptSubobject( mMasLC, "M_MarketingStatement" )
   SetCursorPrevEntity( mMasLC, "M_MarketingStatement", "" )
   CreateTemporalSubobjectVersion( mMasLC, "M_MarketingStatement" )

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: AcceptMarketingSectionGoNext
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptMarketingSectionGoNext( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC
 
   AcceptSubobject( mMasLC, "M_MarketingSection" )
   SetCursorNextEntity( mMasLC, "M_MarketingSection", "" )
   CreateTemporalSubobjectVersion( mMasLC, "M_MarketingSection" )

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: AcceptMarketingSectionGoPrev
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AcceptMarketingSectionGoPrev( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC
 
   AcceptSubobject( mMasLC, "M_MarketingSection" )
   SetCursorPrevEntity( mMasLC, "M_MarketingSection", "" )
   CreateTemporalSubobjectVersion( mMasLC, "M_MarketingSection" )

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: CancelTableUpdate
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
CancelTableUpdate( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC
   VIEW wWebXfer REGISTERED AS wWebXfer

   FOR EACH wWebXfer.Work
      DELETE ENTITY wWebXfer.Work NONE
   END
   CancelSubobject( mMasLC, "M_MetaTable" )

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: SetCursorNextWithData
//
/////////////////////////////////////////////////////////////////////////////
LOCAL OPERATION
SetCursorNextWithData( VIEW wWebXfer,
                       STRING ( 256 ) szText )

   INTEGER nRC

   nRC = zCURSOR_SET
   LOOP WHILE nRC >= zCURSOR_SET
      nRC = SetCursorNextEntity( wWebXfer, "Work", "" )
      IF nRC >= zCURSOR_SET
         GetStringFromAttribute( szText, wWebXfer, "Work", "Text" )
         IF szText != ""
            RETURN nRC
         END
      END
   END
   RETURN -1
END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: SaveTableColumns
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
SaveTableColumns( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC
   VIEW wWebXfer REGISTERED AS wWebXfer
   STRING ( 256 ) szText
   SHORT  nCnt
   SHORT  nRC

   mMasLC.M_MetaTable.Title1 = ""
   mMasLC.M_MetaTable.Title2 = ""
   mMasLC.M_MetaTable.Title3 = ""
   mMasLC.M_MetaTable.Title4 = ""
   mMasLC.M_MetaTable.Title5 = ""
   mMasLC.M_MetaTable.Title6 = ""
   mMasLC.M_MetaTable.Title7 = ""
   mMasLC.M_MetaTable.Title8 = ""
   mMasLC.M_MetaTable.Title9 = ""
   mMasLC.M_MetaTable.Title10 = ""

   nCnt = 0
   nRC = SetCursorFirstEntity( wWebXfer, "Work", "" )
   IF nRC >= zCURSOR_SET
      szText = wWebXfer.Work.Text
      IF szText = ""
         nRC = SetCursorNextWithData( wWebXfer, szText )
         IF nRC >= zCURSOR_SET 
            nCnt = 1
            mMasLC.M_MetaTable.Title1 = szText
         END
      ELSE
         nCnt = 1
         mMasLC.M_MetaTable.Title1 = szText
      END
   END

   // Indentation below is whacked for readability.
   nRC = SetCursorNextWithData( wWebXfer, szText )
   IF nRC >= zCURSOR_SET
      nCnt = 2
      mMasLC.M_MetaTable.Title2 = szText
      nRC = SetCursorNextWithData( wWebXfer, szText )
   IF nRC >= zCURSOR_SET
      nCnt = 3
      mMasLC.M_MetaTable.Title3 = szText
      nRC = SetCursorNextWithData( wWebXfer, szText )
   IF nRC >= zCURSOR_SET
      nCnt = 4
      mMasLC.M_MetaTable.Title4 = szText
      nRC = SetCursorNextWithData( wWebXfer, szText )
   IF nRC >= zCURSOR_SET
      nCnt = 5
      mMasLC.M_MetaTable.Title5 = szText
      nRC = SetCursorNextWithData( wWebXfer, szText )
   IF nRC >= zCURSOR_SET
      nCnt = 6
      mMasLC.M_MetaTable.Title6 = szText
      nRC = SetCursorNextWithData( wWebXfer, szText )
   IF nRC >= zCURSOR_SET
      nCnt = 7
      mMasLC.M_MetaTable.Title7 = szText
      nRC = SetCursorNextWithData( wWebXfer, szText )
   IF nRC >= zCURSOR_SET
      nCnt = 8
      mMasLC.M_MetaTable.Title8 = szText
      nRC = SetCursorNextWithData( wWebXfer, szText )
   IF nRC >= zCURSOR_SET
      nCnt = 9
      mMasLC.M_MetaTable.Title9 = szText
      nRC = SetCursorNextWithData( wWebXfer, szText )
   IF nRC >= zCURSOR_SET
      nCnt = 10
      mMasLC.M_MetaTable.Title10 = szText
   END
   END
   END
   END
   END
   END
   END
   END
   END

   mMasLC.M_MetaTable.Columns = nCnt
   FOR EACH wWebXfer.Work
      DELETE ENTITY wWebXfer.Work NONE
   END
   AcceptSubobject( mMasLC, "M_MetaTable" )
END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: InitTableColumns
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
InitTableColumns( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC
   VIEW wWebXfer REGISTERED AS wWebXfer
   SHORT nRC

   FOR EACH wWebXfer.Work
      DELETE ENTITY wWebXfer.Work NONE
   END
   IF mMasLC.M_MetaTable.Title1 != ""
      CreateEntity( wWebXfer, "Work", zPOS_LAST )
      wWebXfer.Work.Text = mMasLC.M_MetaTable.Title1
   END
   IF mMasLC.M_MetaTable.Title2 != ""
      CreateEntity( wWebXfer, "Work", zPOS_LAST )
      wWebXfer.Work.Text = mMasLC.M_MetaTable.Title2
   END
   IF mMasLC.M_MetaTable.Title3 != ""
      CreateEntity( wWebXfer, "Work", zPOS_LAST )
      wWebXfer.Work.Text = mMasLC.M_MetaTable.Title3
   END
   IF mMasLC.M_MetaTable.Title4 != ""
      CreateEntity( wWebXfer, "Work", zPOS_LAST )
      wWebXfer.Work.Text = mMasLC.M_MetaTable.Title4
   END
   IF mMasLC.M_MetaTable.Title5 != ""
      CreateEntity( wWebXfer, "Work", zPOS_LAST )
      wWebXfer.Work.Text = mMasLC.M_MetaTable.Title5
   END
   IF mMasLC.M_MetaTable.Title6 != ""
      CreateEntity( wWebXfer, "Work", zPOS_LAST )
      wWebXfer.Work.Text = mMasLC.M_MetaTable.Title6
   END
   IF mMasLC.M_MetaTable.Title7 != ""
      CreateEntity( wWebXfer, "Work", zPOS_LAST )
      wWebXfer.Work.Text = mMasLC.M_MetaTable.Title7
   END
   IF mMasLC.M_MetaTable.Title8 != ""
      CreateEntity( wWebXfer, "Work", zPOS_LAST )
      wWebXfer.Work.Text = mMasLC.M_MetaTable.Title8
   END
   IF mMasLC.M_MetaTable.Title9 != ""
      CreateEntity( wWebXfer, "Work", zPOS_LAST )
      wWebXfer.Work.Text = mMasLC.M_MetaTable.Title9
   END
   IF mMasLC.M_MetaTable.Title10 != ""
      CreateEntity( wWebXfer, "Work", zPOS_LAST )
      wWebXfer.Work.Text = mMasLC.M_MetaTable.Title10
   END

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: AddTable
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
AddTable( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC

   CreateTemporalEntity( mMasLC, "M_MetaTable", zPOS_AFTER )
   InitTableColumns( ViewToWindow )

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: UpdateTable
//
/////////////////////////////////////////////////////////////////////////////
DIALOG OPERATION
UpdateTable( VIEW ViewToWindow )

   VIEW mMasLC REGISTERED AS mMasLC

   CreateTemporalSubobjectVersion( mMasLC, "M_MetaTable" )
   InitTableColumns( ViewToWindow )

END
