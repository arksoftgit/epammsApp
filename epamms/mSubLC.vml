/////////////////////////////////////////////////////////////////////////////
// Project ePamms
//
// This is a part of the ePamms applications package.
// Copyright (c) 2007 - 2016 Arksoft, Inc.
// All Rights Reserved.
//
// SUBSYSTEM:    mSubLC        - Subregistrant Label Content operations
// FILE:         mSubLC.vml
// AUTHOR:       Doug Sorensen
//
/////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: dFullNameLFM
//
/////////////////////////////////////////////////////////////////////////////
DERIVED ATTRIBUTE OPERATION
dFullNameLFM( VIEW mSubLC BASED ON LOD mSubLC,
              STRING ( 32 ) InternalEntityStructure,
              STRING ( 32 ) InternalAttribStructure,
              SHORT GetOrSetFlag )

   CASE GetOrSetFlag
   OF   zDERIVED_GET:
        PersonName_LastFirstMiddle( mSubLC, InternalEntityStructure,
                                    InternalAttribStructure, GetOrSetFlag )

        // end zDERIVED_GET
   OF   zDERIVED_SET:

        // end zDERIVED_SET
   END  // case

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: dFullNameFML
//
/////////////////////////////////////////////////////////////////////////////
DERIVED ATTRIBUTE OPERATION
dFullNameFML( VIEW mSubLC BASED ON LOD mSubLC,
              STRING ( 32 ) InternalEntityStructure,
              STRING ( 32 ) InternalAttribStructure,
              SHORT GetOrSetFlag )

   CASE GetOrSetFlag
   OF   zDERIVED_GET:
        PersonName_FirstMiddleLast( mSubLC, InternalEntityStructure,
                                    InternalAttribStructure, GetOrSetFlag )
        // end zDERIVED_GET
   OF   zDERIVED_SET:

        // end zDERIVED_SET
   END  // case

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: dSubregNameID
// Subregistrant Name + EPA Company Number
//
/////////////////////////////////////////////////////////////////////////////
DERIVED ATTRIBUTE OPERATION
dSubregNameID( VIEW mSubLC BASED ON LOD mSubLC,
               STRING ( 32 ) InternalEntityStructure,
               STRING ( 32 ) InternalAttribStructure,
               SHORT GetOrSetFlag )

   STRING ( 1000 ) szString

   CASE GetOrSetFlag
   OF   zDERIVED_GET:

      IF mSubLC.SubregOrganization EXISTS
         szString = mSubLC.SubregOrganization.Name
         IF mSubLC.Subregistrant.EPA_CompanyNumber = ""
            szString = szString + " (Non EPA)"
         ELSE
            szString = szString + " (" + mSubLC.Subregistrant.EPA_CompanyNumber + ")"
         END
       ELSE
          szString = ""
       END

       // Store the calculated value in the object.
       StoreStringInRecord( mSubLC,
                            InternalEntityStructure,
                            InternalAttribStructure, szString )
       RETURN 0
        // end zDERIVED_GET
   OF   zDERIVED_SET:

        // end zDERIVED_SET
   END  // case

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: dSD_TitleText
//
/////////////////////////////////////////////////////////////////////////////
DERIVED ATTRIBUTE OPERATION
dSD_TitleText( VIEW mSubLC BASED ON LOD mSubLC,
               STRING ( 32 ) InternalEntityStructure,
               STRING ( 32 ) InternalAttribStructure,
               SHORT GetOrSetFlag )

   STRING ( 2048 ) szDisplayStatement
   STRING ( 2048 ) szStatementText
   STRING ( 256 )  szTitle

   CASE GetOrSetFlag
   OF   zDERIVED_GET:

      // Storage and Disposal Display Statement Text is a combination of Title and Text.
      szTitle = mSubLC.S_StorageDisposalStatement.Title
      szStatementText = mSubLC.S_StorageDisposalStatement.Text
      IF szTitle != ""
         szDisplayStatement = szTitle + " --- " + szStatementText
      ELSE
         szDisplayStatement = szStatementText
      END


      // Store the calculated value in the object.
      StoreStringInRecord( mSubLC, InternalEntityStructure, InternalAttribStructure, szDisplayStatement )
      RETURN 0

        // end zDERIVED_GET
   OF   zDERIVED_SET:

        // end zDERIVED_SET
   END  // case

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: dSD_SubTitleText
//
/////////////////////////////////////////////////////////////////////////////
DERIVED ATTRIBUTE OPERATION
dSD_SubTitleText( VIEW mSubLC BASED ON LOD mSubLC,
                  STRING ( 32 ) InternalEntityStructure,
                  STRING ( 32 ) InternalAttribStructure,
                  SHORT GetOrSetFlag )

   STRING ( 2048 ) szDisplayStatement
   STRING ( 2048 ) szStatementText
   STRING ( 256 )  szTitle

   CASE GetOrSetFlag
   OF   zDERIVED_GET:

      // Storage and Disposal Display Statement Text is a combination of Title and Text.
      szTitle = mSubLC.S_StorageDisposalSubStatement.Title
      szStatementText = mSubLC.S_StorageDisposalSubStatement.Text
      IF szTitle != ""
         szDisplayStatement = szTitle + " --- " + szStatementText
      ELSE
         szDisplayStatement = szStatementText
      END


      // Store the calculated value in the object.
      StoreStringInRecord( mSubLC, InternalEntityStructure, InternalAttribStructure, szDisplayStatement )
      RETURN 0

        // end zDERIVED_GET
   OF   zDERIVED_SET:

        // end zDERIVED_SET
   END  // case

END

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: dSD_StmtTitleKey
//
/////////////////////////////////////////////////////////////////////////////
DERIVED ATTRIBUTE OPERATION
dSD_StmtTitleKey( VIEW mSubLC BASED ON LOD mSubLC,
                  STRING ( 32 ) InternalEntityStructure,
                  STRING ( 32 ) InternalAttribStructure,
                  SHORT GetOrSetFlag )

   STRING ( 2048 ) szStatementTitle

   CASE GetOrSetFlag
   OF   zDERIVED_GET:

      // Storage and Disposal Display Statement Title is a combination of Title/Keywords.
      szStatementTitle = mSubLC.S_StorageDisposalStatement.Title
      IF szStatementTitle != ""
         GenerateKeywordTextIntoString( mSubLC, szStatementTitle,
                                        "S_InsertTextKeywordSD", "S_InsertTextSD", ", " )
      END

      // Store the calculated value in the object.
      StoreStringInRecord( mSubLC, InternalEntityStructure, InternalAttribStructure, szStatementTitle )

        // end zDERIVED_GET
   OF   zDERIVED_SET:

        // end zDERIVED_SET
   END  // case

END

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: dSD_StmtTextKey
//
/////////////////////////////////////////////////////////////////////////////
DERIVED ATTRIBUTE OPERATION
dSD_StmtTextKey( VIEW mSubLC BASED ON LOD mSubLC,
                 STRING ( 32 ) InternalEntityStructure,
                 STRING ( 32 ) InternalAttribStructure,
                 SHORT GetOrSetFlag )

   STRING ( 2048 ) szStatementText

   CASE GetOrSetFlag
   OF   zDERIVED_GET:

      // Storage and Disposal Display Statement Text is a combination of Text/Keywords.
      szStatementText = mSubLC.S_StorageDisposalStatement.Text
      IF szStatementText != ""
         GenerateKeywordTextIntoString( mSubLC, szStatementText,
                                        "S_InsertTextKeywordSD", "S_InsertTextSD", ", " )
      END

      // Store the calculated value in the object.
      StoreStringInRecord( mSubLC, InternalEntityStructure, InternalAttribStructure, szStatementText )

        // end zDERIVED_GET
   OF   zDERIVED_SET:

        // end zDERIVED_SET
   END  // case

END

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: dSD_StmtTitleTxtKey
//
/////////////////////////////////////////////////////////////////////////////
DERIVED ATTRIBUTE OPERATION
dSD_StmtTitleTxtKey( VIEW mSubLC BASED ON LOD mSubLC,
                     STRING ( 32 ) InternalEntityStructure,
                     STRING ( 32 ) InternalAttribStructure,
                     SHORT GetOrSetFlag )

   STRING ( 2048 ) szDisplayStatement
   STRING ( 256 )  szStatementTitle
   STRING ( 2048 ) szStatementText

   CASE GetOrSetFlag
   OF   zDERIVED_GET:

      // Storage and Disposal Display Statement Text is a combination of Title/Text/Keywords.
      szStatementText = mSubLC.S_StorageDisposalStatement.Text
      IF szStatementText != ""
         GenerateKeywordTextIntoString( mSubLC, szStatementText,
                                        "S_InsertTextKeywordSD", "S_InsertTextSD", ", " )
      END

      szStatementTitle = mSubLC.S_StorageDisposalStatement.Title
      IF szStatementTitle != ""
         GenerateKeywordTextIntoString( mSubLC, szStatementTitle,
                                        "S_InsertTextKeywordSD", "S_InsertTextSD", ", " )
         szDisplayStatement = szStatementTitle
         IF szStatementText != ""
            szDisplayStatement = szDisplayStatement + " --- " + szStatementText
         END
      ELSE
         szDisplayStatement = szStatementText
      END

      // Store the calculated value in the object.
      StoreStringInRecord( mSubLC, InternalEntityStructure, InternalAttribStructure, szDisplayStatement )

        // end zDERIVED_GET
   OF   zDERIVED_SET:

        // end zDERIVED_SET
   END  // case

END

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: dSD_SubStmtTitleTxtKey
//
/////////////////////////////////////////////////////////////////////////////
DERIVED ATTRIBUTE OPERATION
dSD_SubStmtTitleTxtKey( VIEW mSubLC BASED ON LOD mSubLC,
                        STRING ( 32 ) InternalEntityStructure,
                        STRING ( 32 ) InternalAttribStructure,
                        SHORT GetOrSetFlag )

   STRING ( 2048 ) szDisplayStatement
   STRING ( 256 )  szStatementTitle
   STRING ( 2048 ) szStatementText

   CASE GetOrSetFlag
   OF   zDERIVED_GET:

      // Storage and Disposal Display Statement Text is a combination of Title/Text/Keywords.
      SetViewToSubobject( mSubLC, "S_StorageDisposalSubStatement" )
      szStatementText = mSubLC.S_StorageDisposalStatement.Text
      IF szStatementText != ""
         GenerateKeywordTextIntoString( mSubLC, szStatementText,
                                        "S_InsertTextKeywordSD", "S_InsertTextSD", ", " )
      END

      szStatementTitle = mSubLC.S_StorageDisposalStatement.Title
      IF szStatementTitle != ""
         GenerateKeywordTextIntoString( mSubLC, szStatementTitle,
                                        "S_InsertTextKeywordSD", "S_InsertTextSD", ", " )
      END

      IF szStatementTitle != ""
         szDisplayStatement = szStatementTitle
         IF szStatementText != ""
            szDisplayStatement = szDisplayStatement + " --- " + szStatementText
         END
      ELSE
         szDisplayStatement = szStatementText
      END

      ResetViewFromSubobject( mSubLC )
      
      // Store the calculated value in the object.
      StoreStringInRecord( mSubLC, InternalEntityStructure, InternalAttribStructure, szDisplayStatement )

        // end zDERIVED_GET
   OF   zDERIVED_SET:

        // end zDERIVED_SET
   END  // case

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: dSD_KeywordText
//
/////////////////////////////////////////////////////////////////////////////
DERIVED ATTRIBUTE OPERATION
dSD_KeywordText( VIEW mSubLC BASED ON LOD mSubLC,
                 STRING ( 32 ) InternalEntityStructure,
                 STRING ( 32 ) InternalAttribStructure,
                 SHORT GetOrSetFlag )

   STRING ( 2048 ) szGeneratedString

   CASE GetOrSetFlag
   OF   zDERIVED_GET:

      // Concatenate all the Keyword values for a Storage & Disposal Keyword entry.
      szGeneratedString = ""
      FOR EACH mSubLC.S_InsertTextSD
         IF szGeneratedString = ""
            szGeneratedString = mSubLC.S_InsertTextSD.Text
         ELSE
            szGeneratedString = szGeneratedString + ", " + mSubLC.S_InsertTextSD.Text
         END
      END

      // Store the resulting value in the object.
      StoreStringInRecord( mSubLC, InternalEntityStructure, InternalAttribStructure, szGeneratedString )
      RETURN 0

        // end zDERIVED_GET
   OF   zDERIVED_SET:

        // end zDERIVED_SET
   END  // case

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: dGenStmtTitleText
//
/////////////////////////////////////////////////////////////////////////////
DERIVED ATTRIBUTE OPERATION
dGenStmtTitleText( VIEW mSubLC BASED ON LOD mSubLC,
                   STRING ( 32 ) InternalEntityStructure,
                   STRING ( 32 ) InternalAttribStructure,
                   SHORT GetOrSetFlag )

   VIEW mSubLC2 BASED ON LOD mSubLC
   STRING ( 2048 ) szCombinedText

   CASE GetOrSetFlag
   OF   zDERIVED_GET:

      // If Combined and a Title exists, concatenate Title and Text.  Otherwise, just show text.
      // Bold Title and Text as specified.
      IF mSubLC.S_GeneralSection.Combined = "Y" AND mSubLC.S_GeneralStatement.Title != ""
         IF mSubLC.S_GeneralSection.BoldTitle = "Y"
            szCombinedText = "<b>" + mSubLC.S_GeneralStatement.Title + "</b>"
         ELSE
            szCombinedText = mSubLC.S_GeneralStatement.Title
         END
      END
      IF mSubLC.S_GeneralSection.BoldText = "Y"
         szCombinedText = szCombinedText + "<b> " + mSubLC.S_GeneralStatement.Text + "</b>"
      ELSE
         szCombinedText = szCombinedText + " " + mSubLC.S_GeneralStatement.Text
      END

      // Store the calculated value in the object.
      StoreStringInRecord( mSubLC, InternalEntityStructure, InternalAttribStructure, szCombinedText )

        // end zDERIVED_GET
   OF   zDERIVED_SET:

        // end zDERIVED_SET
   END  // case

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: dRegistrantNameID
// Primary Registrant Name + EPA Company Number
//
/////////////////////////////////////////////////////////////////////////////
DERIVED ATTRIBUTE OPERATION
dRegistrantNameID( VIEW mSubLC BASED ON LOD mSubLC,
                   STRING ( 32 ) InternalEntityStructure,
                   STRING ( 32 ) InternalAttribStructure,
                   SHORT GetOrSetFlag )

   STRING ( 1000 ) szString

   CASE GetOrSetFlag
   OF   zDERIVED_GET:

      IF mSubLC.Organization EXISTS
         szString = mSubLC.Organization.Name
         IF mSubLC.PrimaryRegistrant.EPA_CompanyNumber = ""
            szString = szString + " (Non EPA)"
         ELSE
            szString = szString + " (" +
                    mSubLC.PrimaryRegistrant.EPA_CompanyNumber + ")"
         END
       ELSE
          szString = ""
       END

       // Store the calculated value in the object.
       StoreStringInRecord( mSubLC,
                            InternalEntityStructure,
                            InternalAttribStructure, szString )
       RETURN 0
        // end zDERIVED_GET
   OF   zDERIVED_SET:

        // end zDERIVED_SET
   END  // case

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: dIngredientName
//
/////////////////////////////////////////////////////////////////////////////
DERIVED ATTRIBUTE OPERATION
dIngredientName( VIEW mSubLC BASED ON LOD mSubLC,
                 STRING ( 32 ) InternalEntityStructure,
                 STRING ( 32 ) InternalAttribStructure,
                 SHORT GetOrSetFlag )

   STRING ( 1000 ) szString

   CASE GetOrSetFlag
   OF   zDERIVED_GET:

      IF mSubLC.S_IngredientsStatement EXISTS
         szString = mSubLC.S_IngredientsStatement.CommonName
      IF szString = ""
            szString = mSubLC.S_IngredientsStatement.ChemicalName
         END
       ELSE
          szString = ""
       END

       // Store the calculated value in the object.
       StoreStringInRecord( mSubLC,
                            InternalEntityStructure,
                            InternalAttribStructure, szString )
       RETURN 0

        // end zDERIVED_GET
   OF   zDERIVED_SET:

        // end zDERIVED_SET
   END  // case

END


/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: dMasterProductNameNbr
//
/////////////////////////////////////////////////////////////////////////////
DERIVED ATTRIBUTE OPERATION
dMasterProductNameNbr( VIEW mSubLC BASED ON LOD mSubLC,
                       STRING ( 32 ) InternalEntityStructure,
                       STRING ( 32 ) InternalAttribStructure,
                       SHORT GetOrSetFlag )

   STRING ( 1000 ) szString

   CASE GetOrSetFlag
   OF   zDERIVED_GET:

      IF mSubLC.MasterProduct  EXISTS
         szString = mSubLC.MasterProduct.Name + " (" +
                    mSubLC.PrimaryRegistrant.EPA_CompanyNumber + "-" +
                    mSubLC.MasterProduct.Number + ")"
       ELSE
          szString = ""
       END

       // Store the calculated value in the object.
       StoreStringInRecord( mSubLC,
                            InternalEntityStructure,
                            InternalAttribStructure, szString )
       RETURN 0

        // end zDERIVED_GET
   OF   zDERIVED_SET:

        // end zDERIVED_SET
   END  // case

END


/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: dSubregProductNameNbr
//
/////////////////////////////////////////////////////////////////////////////
DERIVED ATTRIBUTE OPERATION
dSubregProductNameNbr( VIEW mSubLC BASED ON LOD mSubLC,
                       STRING ( 32 ) InternalEntityStructure,
                       STRING ( 32 ) InternalAttribStructure,
                       SHORT GetOrSetFlag )

   STRING ( 1000 ) szString

   CASE GetOrSetFlag
   OF   zDERIVED_GET:

       szString = mSubLC.SubregProduct.Name
       IF mSubLC.SubregProduct.Number != 0
          szString = szString + " (" + mSubLC.SubregProduct.Number + ")"
       END

       // Store the calculated value in the object.
       StoreStringInRecord( mSubLC,
                            InternalEntityStructure,
                            InternalAttribStructure, szString )
       RETURN 0
        // end zDERIVED_GET
   OF   zDERIVED_SET:

        // end zDERIVED_SET
   END  // case

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: dMarkUsgTxtSubUsgNames
//  Display required text + optional atomic usages
//
/////////////////////////////////////////////////////////////////////////////
DERIVED ATTRIBUTE OPERATION
dMarkUsgTxtSubUsgNames( VIEW mSubLC BASED ON LOD mSubLC,
                        STRING ( 32 ) InternalEntityStructure,
                        STRING ( 32 ) InternalAttribStructure,
                        SHORT GetOrSetFlag )

   VIEW mSubLC2 BASED ON LOD mSubLC
   STRING ( 2048 ) szDisplayStatement
   STRING ( 100 ) szUsageName
   STRING ( 100 ) szUsageText

   CASE GetOrSetFlag
   OF   zDERIVED_GET:

      // Display required text combined with optional usage(s).
      szDisplayStatement = mSubLC.S_MarketingUsage.Name
      InsertOptionalSubUsages( mSubLC, szDisplayStatement, "S_MarketingSubUsage", 1 )

      IF mSubLC.S_InsertTextKeywordMarketUsage EXISTS
         CreateViewFromView( mSubLC2, mSubLC )
         FOR EACH mSubLC2.S_InsertTextKeywordMarketUsage
            szUsageName = "{" + mSubLC2.S_InsertTextKeywordMarketUsage.Name + "}"
            szUsageText = "<b>" + mSubLC2.S_InsertTextMarketUsage.Text + "</b>"
            zSearchAndReplace( szDisplayStatement, 2048, szUsageName, szUsageText )
         END
         DropView( mSubLC2 )
      END

      // Store the calculated value in the object.
      StoreStringInRecord( mSubLC, InternalEntityStructure, InternalAttribStructure, szDisplayStatement )

        // end zDERIVED_GET
   OF   zDERIVED_SET:

        // end zDERIVED_SET
   END  // case

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: dDisplayPathogenName
//
/////////////////////////////////////////////////////////////////////////////
DERIVED ATTRIBUTE OPERATION
dDisplayPathogenName( VIEW mSubLC BASED ON LOD mSubLC,
                      STRING ( 32 ) InternalEntityStructure,
                      STRING ( 32 ) InternalAttribStructure,
                      SHORT GetOrSetFlag )

   VIEW mSubLC2 BASED ON LOD mSubLC
   STRING ( 32 )  szEntityName
   STRING ( 100 ) szUsageType
   STRING ( 100 ) szClassification
   STRING ( 100 ) szCombinedName
   STRING ( 3 )   szFootnoteNumber
   INTEGER        Count

   CASE GetOrSetFlag
   OF   zDERIVED_GET:

      // Combine the Footnote Number as a subscript to the Claim Name, if it exists.
      GetEntityNameFromStructure( InternalEntityStructure, szEntityName )
      GetStringFromAttribute( szUsageType, mSubLC, szEntityName, "UsageType" )
      GetStringFromAttribute( szClassification, mSubLC, szEntityName, "ClaimsClassification" )
      GetStringFromAttribute( szCombinedName, mSubLC, szEntityName, "Name" )

      // Set Footnote Number, if footnote exists.
      IF mSubLC.S_UsageFootnoteUsed EXISTS
         IF mSubLC.S_UsageFootnoteUsed.ID != ""
            SET CURSOR FIRST mSubLC.MLC_UsageFootnote WHERE mSubLC.MLC_UsageFootnote.ID = mSubLC.S_UsageFootnoteUsed.ID
            IF mSubLC.MLC_UsageFootnote.wFootNoteRelativeNumber = ""
               // Relative numbers haven't be set, so set them here.
               CreateViewFromView( mSubLC2, mSubLC )
               Count = 0
               FOR EACH mSubLC2.MLC_UsageFootnote
                  Count = Count + 1
                  mSubLC2.MLC_UsageFootnote.wFootNoteRelativeNumber = Count
               END
               DropView( mSubLC2 )
            END
            szFootnoteNumber = mSubLC.MLC_UsageFootnote.wFootNoteRelativeNumber
            szCombinedName = szCombinedName + "<sup> " + szFootnoteNumber + "</sup>"
         END
      END

      // Store the calculated value in the object.
      StoreStringInRecord( mSubLC,
                           InternalEntityStructure,
                           InternalAttribStructure, szCombinedName )

        // end zDERIVED_GET
   OF   zDERIVED_SET:

        // end zDERIVED_SET
   END  // case

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: dPathogenNameKeyFoot
//
/////////////////////////////////////////////////////////////////////////////
DERIVED ATTRIBUTE OPERATION
dPathogenNameKeyFoot( VIEW mSubLC BASED ON LOD mSubLC,
                      STRING ( 32 ) InternalEntityStructure,
                      STRING ( 32 ) InternalAttribStructure,
                      SHORT GetOrSetFlag )

   VIEW mSubLC2 BASED ON LOD mSubLC
   STRING ( 32 )  szEntityName
   STRING ( 100 ) szUsageType
   STRING ( 100 ) szClassification
   STRING ( 512 ) szCombinedName
   STRING ( 32 )  szFootnoteNumber
   INTEGER        Count

   CASE GetOrSetFlag
   OF   zDERIVED_GET:

      // Combine the Footnote Number as a subscript to the Claim Name, if it exists.
      GetEntityNameFromStructure( InternalEntityStructure, szEntityName )
      GetStringFromAttribute( szUsageType, mSubLC, szEntityName, "UsageType" )
      GetStringFromAttribute( szClassification, mSubLC, szEntityName, "ClaimsClassification" )
      GetStringFromAttribute( szCombinedName, mSubLC, szEntityName, "Name" )

      // Set Footnote Number, if footnote exists.
      IF mSubLC.S_UsageFootnoteUsed EXISTS
         IF mSubLC.S_UsageFootnoteUsed.ID != ""
            SET CURSOR FIRST mSubLC.S_UsageFootnote WHERE mSubLC.S_UsageFootnote.ID = mSubLC.S_UsageFootnoteUsed.ID
            IF mSubLC.S_UsageFootnote.wFootNoteRelativeNumber = ""
               // Relative numbers haven't been set, so set them here.
               CreateViewFromView( mSubLC2, mSubLC )
               Count = 0
               FOR EACH mSubLC2.S_UsageFootnote
                  Count = Count + 1
                  mSubLC2.S_UsageFootnote.wFootNoteRelativeNumber = Count
               END
               DropView( mSubLC2 )
            END
            szFootnoteNumber = mSubLC.S_UsageFootnote.Symbol
            IF szFootnoteNumber = ""
               szFootnoteNumber = mSubLC.S_UsageFootnote.wFootNoteRelativeNumber
            END
            szCombinedName = szCombinedName + "<sup> " + szFootnoteNumber + "</sup>"
         END
      END
      IF mSubLC.S_InsertTextKeywordUsage EXISTS
         CreateViewFromView( mSubLC2, mSubLC )
         FOR EACH mSubLC2.S_InsertTextKeywordUsage
            // Reuse (borrow) szUsageType and szClassification
            szUsageType = "{" + mSubLC2.S_InsertTextKeywordUsage.Name + "}"
            szClassification = "<b>" + mSubLC2.S_InsertTextUsage.Text + "</b>"
            zSearchAndReplace( szCombinedName, 512, szUsageType, szClassification )
         END
         DropView( mSubLC2 )
      END

      // Store the calculated value in the object.
      StoreStringInRecord( mSubLC, InternalEntityStructure, InternalAttribStructure, szCombinedName )

        // end zDERIVED_GET
   OF   zDERIVED_SET:

        // end zDERIVED_SET
   END  // case

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: dUsgTextSubUsageNames
//  Display required text + optional atomic usages
//
/////////////////////////////////////////////////////////////////////////////
DERIVED ATTRIBUTE OPERATION
dUsgTextSubUsageNames( VIEW mSubLC BASED ON LOD mSubLC,
                       STRING ( 32 ) InternalEntityStructure,
                       STRING ( 32 ) InternalAttribStructure,
                       SHORT GetOrSetFlag )

   VIEW mSubLC2 BASED ON LOD mSubLC
   STRING ( 2048 ) szDisplayStatement
   STRING ( 100 ) szUsageName
   STRING ( 100 ) szUsageText

   CASE GetOrSetFlag
   OF   zDERIVED_GET:

      IF mSubLC.S_Usage EXISTS
         // Display required text combined with optional usage(s).
         szDisplayStatement = mSubLC.S_Usage.Name
         InsertOptionalSubUsages( mSubLC, szDisplayStatement, "S_SubUsage", 1 )

         IF mSubLC.S_InsertTextKeywordUsage EXISTS
            CreateViewFromView( mSubLC2, mSubLC )
            FOR EACH mSubLC2.S_InsertTextKeywordUsage
               szUsageName = "{" + mSubLC2.S_InsertTextKeywordUsage.Name + "}"
               szUsageText = "<b>" + mSubLC2.S_InsertTextUsage.Text + "</b>"
               zSearchAndReplace( szDisplayStatement, 2048, szUsageName, szUsageText )
            END
            DropView( mSubLC2 )
         END
      ELSE
         szDisplayStatement = ""
      END

      // Store the calculated value in the object.
      StoreStringInRecord( mSubLC, InternalEntityStructure, InternalAttribStructure, szDisplayStatement )

        // end zDERIVED_GET
   OF   zDERIVED_SET:

        // end zDERIVED_SET
   END  // case

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: dUsageNameFootnote
//
/////////////////////////////////////////////////////////////////////////////
DERIVED ATTRIBUTE OPERATION
dUsageNameFootnote( VIEW mSubLC BASED ON LOD mSubLC,
                    STRING ( 32 ) InternalEntityStructure,
                    STRING ( 32 ) InternalAttribStructure,
                    SHORT GetOrSetFlag )

   VIEW mSubLC2 BASED ON LOD mSubLC
   STRING ( 32 )  szEntityName
   STRING ( 100 ) szUsageType
   STRING ( 100 ) szClassification
   STRING ( 100 ) szName
   STRING ( 512 ) szCombinedName
   STRING ( 32 )  szFootnoteNumber
   INTEGER        Count

   CASE GetOrSetFlag
   OF   zDERIVED_GET:

      // For a Claim Usage entity, this is the combined name of Classification and Name.
      // For all others, it is simply the name.
      GetEntityNameFromStructure( InternalEntityStructure, szEntityName )
      GetStringFromAttribute( szUsageType, mSubLC, szEntityName, "UsageType" )
      GetStringFromAttribute( szClassification, mSubLC, szEntityName, "ClaimsClassification" )
      GetStringFromAttribute( szName, mSubLC, szEntityName, "Name" )
      IF szUsageType = "C"
         szCombinedName = szClassification + " - " + szName
      ELSE
         szCombinedName = szName
      END

      // Set Footnote Number, if footnote exists.
      IF mSubLC.S_UsageFootnoteUsed EXISTS
         IF mSubLC.S_UsageFootnoteUsed.ID != ""
            SET CURSOR FIRST mSubLC.S_UsageFootnote WHERE mSubLC.S_UsageFootnote.ID = mSubLC.S_UsageFootnoteUsed.ID
            IF mSubLC.S_UsageFootnote.wFootNoteRelativeNumber = ""
               // Relative numbers haven't been set, so set them here.
               CreateViewFromView( mSubLC2, mSubLC )
               Count = 0
               FOR EACH mSubLC2.S_UsageFootnote
                  Count = Count + 1
                  mSubLC2.S_UsageFootnote.wFootNoteRelativeNumber = Count
               END
               DropView( mSubLC2 )
            END
            szFootnoteNumber = mSubLC.S_UsageFootnote.Symbol
            IF szFootnoteNumber = ""
               szFootnoteNumber = mSubLC.S_UsageFootnote.wFootNoteRelativeNumber
            END
            szCombinedName = szCombinedName + "<sup> " + szFootnoteNumber + "</sup>"
         END
      END
      IF mSubLC.S_InsertTextKeywordUsage EXISTS
         CreateViewFromView( mSubLC2, mSubLC )
         FOR EACH mSubLC2.S_InsertTextKeywordUsage
            // Reuse (borrow) szUsageType and szClassification
            szUsageType = "{" + mSubLC2.S_InsertTextKeywordUsage.Name + "}"
            szClassification = "<b>" + mSubLC2.S_InsertTextUsage.Text + "</b>"
            zSearchAndReplace( szCombinedName, 512, szUsageType, szClassification )
         END
         DropView( mSubLC2 )
      END

      // Store the calculated value in the object.
      StoreStringInRecord( mSubLC, InternalEntityStructure, InternalAttribStructure, szCombinedName )

        // end zDERIVED_GET
   OF   zDERIVED_SET:

        // end zDERIVED_SET
   END  // case

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: dUsageKeywordText
//
/////////////////////////////////////////////////////////////////////////////
DERIVED ATTRIBUTE OPERATION
dUsageKeywordText( VIEW mSubLC BASED ON LOD mSubLC,
                   STRING ( 32 ) InternalEntityStructure,
                   STRING ( 32 ) InternalAttribStructure,
                   SHORT GetOrSetFlag )

   STRING ( 2048 ) szGeneratedString

   CASE GetOrSetFlag
   OF   zDERIVED_GET:

      // Concatenate all the Keyword values for a Marketing Keyword entry.
      szGeneratedString = ""
      FOR EACH mSubLC.S_InsertTextUsage
         IF szGeneratedString = ""
            szGeneratedString = mSubLC.S_InsertTextUsage.Text
         ELSE
            szGeneratedString = szGeneratedString + ", " + mSubLC.S_InsertTextUsage.Text
         END
      END

      // Store the resulting value in the object.
      StoreStringInRecord( mSubLC, InternalEntityStructure, InternalAttribStructure, szGeneratedString )
      RETURN 0

        // end zDERIVED_GET
   OF   zDERIVED_SET:

        // end zDERIVED_SET
   END  // case

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: dUsageKeywordStmtText
//
/////////////////////////////////////////////////////////////////////////////
DERIVED ATTRIBUTE OPERATION
dUsageKeywordStmtText( VIEW mSubLC BASED ON LOD mSubLC,
                       STRING ( 32 ) InternalEntityStructure,
                       STRING ( 32 ) InternalAttribStructure,
                       SHORT GetOrSetFlag )

   STRING ( 2048 ) szGeneratedString

   CASE GetOrSetFlag
   OF   zDERIVED_GET:

      // Expand the current Text attribute by replacing embedded Keywords with the Keyword
      // values in the S_InsertText subentities.
//?  szGeneratedString = mSubLC.DisplayKeywordText.Text
      IF szGeneratedString != ""
         GenerateKeywordTextIntoString( mSubLC, szGeneratedString,
                                        "S_InsertTextKeyword", "S_InsertText", ", " )
      END

      // Store the resulting value in the object.
      StoreStringInRecord( mSubLC, InternalEntityStructure, InternalAttribStructure, szGeneratedString )
      RETURN 0

        // end zDERIVED_GET
   OF   zDERIVED_SET:

        // end zDERIVED_SET
   END  // case

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: dUsgPathogenOrFullName
//
/////////////////////////////////////////////////////////////////////////////
DERIVED ATTRIBUTE OPERATION
dUsgPathogenOrFullName( VIEW mSubLC BASED ON LOD mSubLC,
                        STRING ( 32 ) InternalEntityStructure,
                        STRING ( 32 ) InternalAttribStructure,
                        SHORT GetOrSetFlag )

   STRING ( 32 )  szEntityName
   STRING ( 100 ) szUsageType

   CASE GetOrSetFlag
   OF   zDERIVED_GET:

      // Combine the Footnote Number as a subscript to the Claim Name, if it exists.
      GetEntityNameFromStructure( InternalEntityStructure, szEntityName )
      GetStringFromAttribute( szUsageType, mSubLC, szEntityName, "UsageType" )
      IF szUsageType = "C"
         dPathogenNameKeyFoot( mSubLC, InternalEntityStructure, InternalAttribStructure, GetOrSetFlag )
      ELSE
         dUsgFullEmbeddedName( mSubLC, InternalEntityStructure, InternalAttribStructure, GetOrSetFlag )
      END

        // end zDERIVED_GET
   OF   zDERIVED_SET:

        // end zDERIVED_SET
   END  // case

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: dUsgFullEmbeddedName
//
/////////////////////////////////////////////////////////////////////////////
DERIVED ATTRIBUTE OPERATION
dUsgFullEmbeddedName( VIEW mSubLC BASED ON LOD mSubLC,
                      STRING ( 32 ) InternalEntityStructure,
                      STRING ( 32 ) InternalAttribStructure,
                      SHORT GetOrSetFlag )

   STRING ( 2048 ) szDisplayStatement

   CASE GetOrSetFlag
   OF   zDERIVED_GET:

      // Display required text combined with optional usage(s).
      szDisplayStatement = mSubLC.S_Usage.Name
      InsertOptionalSubUsages( mSubLC, szDisplayStatement, "S_SubUsage", 0 )
      SetFirstCharacterCase( szDisplayStatement, 1 )

      // Store the calculated value in the object.
      StoreStringInRecord( mSubLC, InternalEntityStructure, InternalAttribStructure, szDisplayStatement )

        // end zDERIVED_GET
   OF   zDERIVED_SET:

        // end zDERIVED_SET
   END  // case

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: dDisplayUsageName
//
/////////////////////////////////////////////////////////////////////////////
DERIVED ATTRIBUTE OPERATION
dDisplayUsageName( VIEW mSubLC BASED ON LOD mSubLC,
                   STRING ( 32 ) InternalEntityStructure,
                   STRING ( 32 ) InternalAttribStructure,
                   SHORT GetOrSetFlag )

   VIEW mSubLC2 BASED ON LOD mSubLC
   STRING ( 32 )  szEntityName
   STRING ( 100 ) szUsageType
   STRING ( 100 ) szClassification
   STRING ( 100 ) szName
   STRING ( 100 ) szCombinedName
   STRING ( 3 )   szFootnoteNumber
   INTEGER        Count

   CASE GetOrSetFlag
   OF   zDERIVED_GET:

      // For a Claim Usage entity, this is the combined name of Classification and Name.
      // For all others, it is simply the name.
      GetEntityNameFromStructure( InternalEntityStructure, szEntityName )
      GetStringFromAttribute( szUsageType, mSubLC, szEntityName, "UsageType" )
      GetStringFromAttribute( szClassification, mSubLC, szEntityName, "ClaimsClassification" )
      GetStringFromAttribute( szName, mSubLC, szEntityName, "Name" )
      IF szUsageType = "C"
         szCombinedName = szClassification + " - " + szName
      ELSE
         szCombinedName = szName
      END

      // Set Footnote Number, if footnote exists.
      IF mSubLC.S_UsageFootnoteUsed EXISTS
         IF mSubLC.S_UsageFootnoteUsed.ID != ""
            SET CURSOR FIRST mSubLC.MLC_UsageFootnote WHERE mSubLC.MLC_UsageFootnote.ID = mSubLC.S_UsageFootnoteUsed.ID
            IF mSubLC.MLC_UsageFootnote.wFootNoteRelativeNumber = ""
               // Relative numbers haven't be set, so set them here.
               CreateViewFromView( mSubLC2, mSubLC )
               Count = 0
               FOR EACH mSubLC2.MLC_UsageFootnote
                  Count = Count + 1
                  mSubLC2.MLC_UsageFootnote.wFootNoteRelativeNumber = Count
               END
               DropView( mSubLC2 )
            END
            szFootnoteNumber = mSubLC.MLC_UsageFootnote.wFootNoteRelativeNumber
            szCombinedName = szCombinedName + "<sup> " + szFootnoteNumber + "</sup>"
         END
      END

      // Store the calculated value in the object.
      StoreStringInRecord( mSubLC,
                           InternalEntityStructure,
                           InternalAttribStructure, szCombinedName )

        // end zDERIVED_GET
   OF   zDERIVED_SET:

        // end zDERIVED_SET
   END  // case

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: dUsageClaimClass
//
/////////////////////////////////////////////////////////////////////////////
DERIVED ATTRIBUTE OPERATION
dUsageClaimClass( VIEW mSubLC BASED ON LOD mSubLC,
                  STRING ( 32 ) InternalEntityStructure,
                  STRING ( 32 ) InternalAttribStructure,
                  SHORT GetOrSetFlag )

   STRING ( 32 )  szEntityName
   STRING ( 64  ) szUsageType
   STRING ( 32 )  szClassification

   CASE GetOrSetFlag
   OF   zDERIVED_GET:

      // Combine the UsageType and the ClaimsClassification.
      GetEntityNameFromStructure( InternalEntityStructure, szEntityName )
      GetStringFromAttributeByContext( szUsageType, mSubLC, szEntityName, "UsageType", "FullUsageType", 32 )
      GetStringFromAttribute( szClassification, mSubLC, szEntityName, "ClaimsClassification" )
      IF szClassification != ""
         szUsageType = szUsageType + "/" + szClassification
      END

      // Store the calculated value in the object.
      StoreStringInRecord( mSubLC, InternalEntityStructure, InternalAttribStructure, szUsageType )

        // end zDERIVED_GET
   OF   zDERIVED_SET:

        // end zDERIVED_SET
   END  // case

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: dMarketUsgNameFootnote
//
/////////////////////////////////////////////////////////////////////////////
DERIVED ATTRIBUTE OPERATION
dMarketUsgNameFootnote( VIEW mSubLC BASED ON LOD mSubLC,
                        STRING ( 32 ) InternalEntityStructure,
                        STRING ( 32 ) InternalAttribStructure,
                        SHORT GetOrSetFlag )

   VIEW mSubLC2 BASED ON LOD mSubLC
   STRING ( 32 )  szEntityName
   STRING ( 100 ) szUsageType
   STRING ( 100 ) szClassification
   STRING ( 512 ) szCombinedName
   STRING ( 32 )  szFootnoteNumber
   INTEGER        Count

   CASE GetOrSetFlag
   OF   zDERIVED_GET:

      // Combine the Footnote Number as a subscript to the Claim Name, if it exists.
      GetEntityNameFromStructure( InternalEntityStructure, szEntityName )
      GetStringFromAttribute( szUsageType, mSubLC, szEntityName, "UsageType" )
      GetStringFromAttribute( szClassification, mSubLC, szEntityName, "ClaimsClassification" )
      GetStringFromAttribute( szCombinedName, mSubLC, szEntityName, "Name" )

      // Set Footnote Number, if footnote exists.
      IF mSubLC.S_UsageFootnoteUsed EXISTS
         IF mSubLC.S_UsageFootnoteUsed.ID != ""
            SET CURSOR FIRST mSubLC.S_UsageFootnote WHERE mSubLC.S_UsageFootnote.ID = mSubLC.S_UsageFootnoteMarketUsed.ID
            IF mSubLC.S_UsageFootnote.wFootNoteRelativeNumber = ""
               // Relative numbers haven't been set, so set them here.
               CreateViewFromView( mSubLC2, mSubLC )
               Count = 0
               FOR EACH mSubLC2.S_UsageFootnote
                  Count = Count + 1
                  mSubLC2.S_UsageFootnote.wFootNoteRelativeNumber = Count
               END
               DropView( mSubLC2 )
            END
            szFootnoteNumber = mSubLC.S_UsageFootnote.Symbol
            IF szFootnoteNumber = ""
               szFootnoteNumber = mSubLC.S_UsageFootnote.wFootNoteRelativeNumber
            END
            szCombinedName = szCombinedName + "<sup> " + szFootnoteNumber + "</sup>"
         END
      END
      IF mSubLC.S_InsertTextKeywordMarketUsage EXISTS
         CreateViewFromView( mSubLC2, mSubLC )
         FOR EACH mSubLC2.S_InsertTextKeywordMarketUsage
            // Reuse (borrow) szUsageType and szClassification
            szUsageType = "{" + mSubLC2.S_InsertTextKeywordMarketUsage.Name + "}"
            szClassification = "<b>" + mSubLC2.S_InsertTextMarketUsage.Text + "</b>"
            zSearchAndReplace( szCombinedName, 512, szUsageType, szClassification )
         END
         DropView( mSubLC2 )
      END

      // Store the calculated value in the object.
      StoreStringInRecord( mSubLC, InternalEntityStructure, InternalAttribStructure, szCombinedName )

        // end zDERIVED_GET
   OF   zDERIVED_SET:

        // end zDERIVED_SET
   END  // case

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: BuildNewSLC_Version
//
/////////////////////////////////////////////////////////////////////////////
TRANSFORMATION OPERATION
BuildNewSLC_Version( VIEW NewSLC BASED ON LOD mSubLC,
                     VIEW PreviousSLC BASED ON LOD mSubLC,
                     VIEW SrcMLC BASED ON LOD mMasLC,
                     VIEW PreviousMLC BASED ON LOD mMasLC )

// STRING ( 10 ) szVersion
   STRING ( 1 )  szEntityFoundFlag
   STRING ( 50 ) szMessageComponent
   STRING ( 50 ) szMessageSubComponent


   // Create a new SLC from a previous SLC, tying the new back to the original.
   // Note that the data content must come from the next MLC for the MLC tied to the original SLC.

   // Root and single includes
   SetMatchingAttributesByName( NewSLC, "SubregLabelContent", PreviousSLC, "SubregLabelContent", zSET_NULL )
   SetAttributeFromCurrentDateTime( NewSLC, "SubregLabelContent", "RevisionDate" )
   NewSLC.SubregLabelContent.CreatedDateTime  = NewSLC.SubregLabelContent.RevisionDate
   NewSLC.SubregLabelContent.ModifiedDateTime = NewSLC.SubregLabelContent.RevisionDate

   // S_Usage
   // Usages come from the MLC.
   FOR EACH PreviousSLC.S_UsageType
      CREATE ENTITY NewSLC.S_UsageType
      SetMatchingAttributesByName( NewSLC, "S_UsageType", PreviousSLC, "S_UsageType", zSET_NULL )
      SET CURSOR FIRST PreviousMLC.M_UsageType WHERE PreviousMLC.M_UsageType.UsageType = PreviousSLC.S_UsageType.UsageType
      SET CURSOR FIRST SrcMLC.M_UsageType WHERE SrcMLC.M_UsageType.UsageType = PreviousSLC.S_UsageType.UsageType
      FOR EACH PreviousSLC.S_Usage
         // Check if the original S_Usage entry is tied to a new MLC M_Usage entry. (In other words, was the M_Usage entry
         // kept when the original usage entry was copied from MLC to MLC.) Use the data from the newer MLC if it exists.
         IF PreviousSLC.M_Usage EXISTS
            SET CURSOR FIRST PreviousMLC.M_Usage WHERE PreviousMLC.M_Usage.ID = PreviousSLC.M_Usage.ID
            IF RESULT < zCURSOR_SET
               TraceLineS( "Programming Error 1", "" )
               IssueError( NewSLC,0,0, "Programming Error 1" )
            END
            SET CURSOR FIRST SrcMLC.MP_Usage WITHIN SrcMLC.M_UsageType
                       WHERE SrcMLC.MP_Usage.ID = PreviousMLC.M_Usage.ID
            IF RESULT >= zCURSOR_SET
               // The Usage entry does exist in the new
               CREATE ENTITY NewSLC.S_Usage
               SetMatchingAttributesByName( NewSLC, "S_Usage", SrcMLC, "M_Usage", zSET_NULL )
               INCLUDE NewSLC.M_Usage FROM SrcMLC.M_Usage
            ELSE
               // The Usage entry doesn't exist, so create a change message notifying the operator.
               CREATE ENTITY NewSLC.S_VersionChangeMessage
               GetStringFromAttributeByContext( szMessageSubComponent, PreviousSLC, "S_UsageType", "UsageType", "FullUsageType", 50 )
               GetStringFromAttributeByContext( szMessageComponent, PreviousSLC, "S_Usage", "Name", "", 50 )
               NewSLC.S_VersionChangeMessage.ChangeNote = "Deleted " + szMessageSubComponent + " Usage: " + szMessageComponent
               CREATE ENTITY NewSLC.S_VersionChangeMessage   // Skip a line
            END
         END
      END
   END

   // S_GeneralSection
   // General Sections must come entirely from the source MLC.
   FOR EACH SrcMLC.M_GeneralSection
      CREATE ENTITY NewSLC.S_GeneralSection
      SetMatchingAttributesByName( NewSLC, "S_GeneralSection", SrcMLC, "M_GeneralSection", zSET_NULL )
      INCLUDE NewSLC.M_GeneralSection FROM SrcMLC.M_GeneralSection
      FOR EACH SrcMLC.M_GeneralStatement
         CREATE ENTITY NewSLC.S_GeneralStatement
         SetMatchingAttributesByName( NewSLC, "S_GeneralStatement", SrcMLC, "M_GeneralStatement", zSET_NULL )
         INCLUDE NewSLC.M_GeneralStatement FROM SrcMLC.M_GeneralStatement
      END
   END

   // S_IngredientsSection
   // The Ingredients Sections must come entirely from the source MLC.
   FOR EACH SrcMLC.M_IngredientsSection
      CREATE ENTITY NewSLC.S_IngredientsSection
      SetMatchingAttributesByName( NewSLC, "S_IngredientsSection", SrcMLC, "M_IngredientsSection", zSET_NULL )
      INCLUDE NewSLC.M_IngredientsSection FROM SrcMLC.M_IngredientsSection
      FOR EACH SrcMLC.M_IngredientsStatement
         CREATE ENTITY NewSLC.S_IngredientsStatement
         SetMatchingAttributesByName( NewSLC, "S_IngredientsStatement", SrcMLC, "M_IngredientsStatement", zSET_NULL )
         INCLUDE NewSLC.M_IngredientsStatement FROM SrcMLC.M_IngredientsStatement
      END
   END

   // S_StorageDisposalSection
   // StorageDisposal Sections must come from the source MLC, except that, which Sections to use come from the previous SLC.
   FOR EACH PreviousSLC.S_StorageDisposalSection
      SET CURSOR FIRST PreviousMLC.M_StorageDisposalSection WHERE PreviousMLC.M_StorageDisposalSection.ID = PreviousSLC.M_StorageDisposalSection.ID
      SET CURSOR FIRST SrcMLC.MP_StorageDisposalSection WITHIN SrcMLC.MasterLabelContent
                 WHERE SrcMLC.MP_StorageDisposalSection.ID = PreviousMLC.M_StorageDisposalSection.ID
      IF RESULT >= zCURSOR_SET
         // Now just copy the entries from the MLC StorageDisposal Section.
         CREATE ENTITY NewSLC.S_StorageDisposalSection
         SetMatchingAttributesByName( NewSLC, "S_StorageDisposalSection", SrcMLC, "M_StorageDisposalSection", zSET_NULL )
         INCLUDE NewSLC.M_StorageDisposalSection FROM SrcMLC.M_StorageDisposalSection
         FOR EACH SrcMLC.M_StorageDisposalStatement
            CREATE ENTITY NewSLC.S_StorageDisposalStatement
            SetMatchingAttributesByName( NewSLC, "S_StorageDisposalStatement", SrcMLC, "M_StorageDisposalStatement", zSET_NULL )
            INCLUDE NewSLC.M_StorageDisposalStatement FROM SrcMLC.M_StorageDisposalStatement
         END
      ELSE
         // Create error message that Storage and Disposal Section does not exist in new MLC.
         CREATE ENTITY NewSLC.S_VersionChangeMessage
         GetStringFromAttributeByContext( szMessageComponent, PreviousSLC, "S_StorageDisposalSection", "ContainerVolume", "", 50 )
         NewSLC.S_VersionChangeMessage.ChangeNote = "Deleted Storage and Disposal Section, " + szMessageComponent
         CREATE ENTITY NewSLC.S_VersionChangeMessage   // Skip a line
      END
   END

   // S_DirectionsForUseSection
   // Until we understand better the rules that drive Directions For Use Sections, we will just use the same sections as those
   // in use by the source SLC.
   FOR EACH PreviousSLC.S_DirectionsForUseSection
      SET CURSOR FIRST PreviousMLC.M_DirectionsForUseSection
                 WHERE PreviousMLC.M_DirectionsForUseSection.ID = PreviousSLC.M_DirectionsForUseSection.ID
      SET CURSOR FIRST SrcMLC.MP_DirectionsForUseSection WITHIN PreviousMLC.MasterLabelContent
                 WHERE SrcMLC.MP_DirectionsForUseSection.ID = PreviousMLC.M_DirectionsForUseSection.ID
      IF RESULT < zCURSOR_SET
         // Create message that the Directions For Use Section has been deleted.
         CREATE ENTITY NewSLC.S_VersionChangeMessage
         GetStringFromAttributeByContext( szMessageComponent, PreviousSLC, "S_DirectionsForUseSection", "Name", "", 50 )
         NewSLC.S_VersionChangeMessage.ChangeNote = "Deleted Directions For Use Section, " + szMessageComponent
         CREATE ENTITY NewSLC.S_VersionChangeMessage   // Skip a line
      ELSE
         // Copy the MLC Section to the SLC.
         CREATE ENTITY NewSLC.S_DirectionsForUseSection
         SetMatchingAttributesByName( NewSLC, "S_DirectionsForUseSection", SrcMLC, "M_DirectionsForUseSection", zSET_NULL )
         INCLUDE NewSLC.M_DirectionsForUseSection FROM SrcMLC.M_DirectionsForUseSection

         // Copy each MLC Directions For Use Statement to SLC.
         FOR EACH SrcMLC.M_DirectionsForUseStatement
            CREATE ENTITY NewSLC.S_DirectionsForUseStatement
            SetMatchingAttributesByName( NewSLC, "S_DirectionsForUseStatement", SrcMLC, "M_DirectionsForUseStatement", zSET_NULL )
            IF NewSLC.S_DirectionsForUseStatement.NotForUseType = ""
               NewSLC.S_DirectionsForUseStatement.NotForUseType = "NA"
            END
            INCLUDE NewSLC.M_DirectionsForUseStatement FROM SrcMLC.M_DirectionsForUseStatement

            // Copy each MLC Statement Usage entry that has been copied to the SLC.
            FOR EACH SrcMLC.M_DirectionsUsageOrdering
               SET CURSOR FIRST NewSLC.M_Usage WITHIN NewSLC.SubregLabelContent
                          WHERE NewSLC.M_Usage.ID = SrcMLC.M_DirectionsUsage.ID
               IF RESULT < zCURSOR_SET
                  CREATE ENTITY NewSLC.S_DirectionsUsageOrdering
                  NewSLC.S_DirectionsUsageOrdering.PrimaryMLC_ID = SrcMLC.M_DirectionsUsage.ID
                  INCLUDE NewSLC.S_DirectionsUsage FROM SrcMLC.M_DirectionsUsage
               END
            END
         END
      END
   END

   // S_MarketingSection
   // Marketing Sections come from the previous SLC.
   // However, we only build sections and statements that are also in the source MLC.
   FOR EACH PreviousSLC.S_MarketingSection
      SET CURSOR FIRST PreviousMLC.M_MarketingSection WHERE PreviousMLC.M_MarketingSection.ID = PreviousSLC.M_MarketingSection.ID
      IF RESULT < zCURSOR_SET
         IssueError( NewSLC,0,0, "Programming Error 2" )
      END
      SET CURSOR FIRST SrcMLC.MP_MarketingSection WITHIN SrcMLC.MasterLabelContent
                 WHERE SrcMLC.MP_MarketingSection.ID = PreviousMLC.M_MarketingSection.ID
      IF RESULT < zCURSOR_SET
         // The Marketing Section from the original MLC was not included in the new MLC, so create change message.
         CREATE ENTITY NewSLC.S_VersionChangeMessage
         GetStringFromAttributeByContext( szMessageComponent, PreviousSLC, "S_MarketingSection", "Name", "", 50 )
         NewSLC.S_VersionChangeMessage.ChangeNote = "Deleted Marketing Section, " + szMessageComponent
         CREATE ENTITY NewSLC.S_VersionChangeMessage   // Skip a line
      ELSE
         // The MLC Marketing Section has been copied, so bring it over.
         CREATE ENTITY NewSLC.S_MarketingSection
         SetMatchingAttributesByName( NewSLC, "S_MarketingSection", SrcMLC, "M_MarketingSection", zSET_NULL )
         INCLUDE NewSLC.M_MarketingSection FROM SrcMLC.M_MarketingSection
         INCLUDE NewSLC.SP_MarketingSection FROM PreviousSLC.S_MarketingSection

         // Create Title has changed message.
         IF PreviousSLC.S_MarketingSection.Title != NewSLC.S_MarketingSection.Title
            CREATE ENTITY NewSLC.S_VersionChangeMessage
            GetStringFromAttributeByContext( szMessageComponent, NewSLC, "S_MarketingSection", "Title", "", 50 )
            GetStringFromAttributeByContext( szMessageSubComponent, PreviousSLC, "S_MarketingSection", "Title", "", 50 )
            NewSLC.S_VersionChangeMessage.ChangeNote = "Marketing Section Title has changed from '" + szMessageSubComponent +
                                                       "' to: '" + szMessageComponent + "'"
            CREATE ENTITY NewSLC.S_VersionChangeMessage   // Skip a line
         END

         // Statements
         FOR EACH PreviousSLC.S_MarketingStatement
            SET CURSOR FIRST PreviousMLC.M_MarketingStatement WHERE PreviousMLC.M_MarketingStatement.ID = PreviousSLC.M_MarketingStatement.ID
            IF RESULT < zCURSOR_SET
               IssueError( NewSLC,0,0, "Programming Error 3" )
            END
            SET CURSOR FIRST SrcMLC.MP_MarketingStatement WITHIN SrcMLC.M_MarketingSection
                       WHERE SrcMLC.MP_MarketingStatement.ID = PreviousMLC.M_MarketingStatement.ID
            IF RESULT < zCURSOR_SET
               // The Marketing Statement from the original MLC was not included in the new MLC, so create change message.
               CREATE ENTITY NewSLC.S_VersionChangeMessage
               GetStringFromAttributeByContext( szMessageComponent, PreviousSLC, "S_MarketingStatement", "Text", "", 50 )
               NewSLC.S_VersionChangeMessage.ChangeNote = "Deleted Marketing Statement, " + NEW_LINE + NEW_LINE + szMessageComponent
               CREATE ENTITY NewSLC.S_VersionChangeMessage   // Skip a line
            ELSE
               CREATE ENTITY NewSLC.S_MarketingStatement
               SetMatchingAttributesByName( NewSLC, "S_MarketingStatement", SrcMLC, "M_MarketingStatement", zSET_NULL )
               INCLUDE NewSLC.M_MarketingStatement FROM SrcMLC.M_MarketingStatement
               INCLUDE NewSLC.SP_MarketingStatement FROM PreviousSLC.S_MarketingStatement

               // If the Marketing Title or Text have changed, create a change message.
               IF PreviousSLC.S_MarketingStatement.Title != NewSLC.S_MarketingStatement.Title
                  CREATE ENTITY NewSLC.S_VersionChangeMessage
                  GetStringFromAttributeByContext( szMessageComponent, NewSLC, "S_MarketingStatement", "Title", "", 50 )
                  NewSLC.S_VersionChangeMessage.ChangeNote = "Marketing Statement Title has changed to: " + szMessageComponent
                  CREATE ENTITY NewSLC.S_VersionChangeMessage   // Skip a line
               END
               IF PreviousSLC.S_MarketingStatement.Text != NewSLC.S_MarketingStatement.Text
                  CREATE ENTITY NewSLC.S_VersionChangeMessage
                  NewSLC.S_VersionChangeMessage.ChangeNote = "Marketing Statement Text has changed from the first statement to the second: "
                  GetStringFromAttributeByContext( szMessageComponent, PreviousSLC, "S_MarketingStatement", "Text", "", 50 )
                  CREATE ENTITY NewSLC.S_VersionChangeMessage
                  NewSLC.S_VersionChangeMessage.ChangeNote = szMessageComponent
                  GetStringFromAttributeByContext( szMessageComponent, NewSLC, "S_MarketingStatement", "Text", "", 50 )
                  CREATE ENTITY NewSLC.S_VersionChangeMessage
                  NewSLC.S_VersionChangeMessage.ChangeNote = szMessageComponent
                  CREATE ENTITY NewSLC.S_VersionChangeMessage   // Skip a line
               END
            END

            // Usages
            // Create only MarketingUsages from the original SLC under the statement that are among the Usage entries included in the NewSLC.
            FOR EACH PreviousSLC.S_MarketingUsageOrdering
               SET CURSOR FIRST NewSLC.S_UsageType WHERE NewSLC.S_UsageType.UsageType = PreviousSLC.S_MarketingUsage.UsageType
               SET CURSOR FIRST NewSLC.S_Usage WHERE NewSLC.S_Usage.Name = PreviousSLC.S_MarketingUsage.Name
               IF RESULT >= zCURSOR_SET
                  CREATE ENTITY NewSLC.S_MarketingUsageOrdering
                  INCLUDE NewSLC.S_MarketingUsage FROM NewSLC.S_Usage
               END
            END
         END
      END
   END

   // S_HumanHazardSection
   // The HumanHazard Sections must come entirely from the source MLC.
   FOR EACH SrcMLC.M_HumanHazardSection
      CREATE ENTITY NewSLC.S_HumanHazardSection
      SetMatchingAttributesByName( NewSLC, "S_HumanHazardSection", SrcMLC, "M_HumanHazardSection", zSET_NULL )
      INCLUDE NewSLC.M_HumanHazardSection FROM SrcMLC.M_HumanHazardSection
   END

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: DuplicateSLC
//
/////////////////////////////////////////////////////////////////////////////
TRANSFORMATION OPERATION
DuplicateSLC( VIEW NewSLC BASED ON LOD mSubLC,
              VIEW PreviousSLC BASED ON LOD mSubLC )

// STRING ( 10 ) szVersion
   STRING ( 1 )  szEntityFoundFlag

   // Create a new SLC from a previous SLC, tying the new back to the original.
   // This differs from BuildNewSLC_Version in that the new SLC created here is tied back to the
   // same MLC as the source SLC.

   // Root and single includes
   CREATE ENTITY NewSLC.SubregLabelContent
   SetMatchingAttributesByName( NewSLC, "SubregLabelContent", PreviousSLC, "SubregLabelContent", zSET_NULL )
   SetAttributeFromCurrentDateTime( NewSLC, "SubregLabelContent", "RevisionDate" )
   NewSLC.SubregLabelContent.Description = PreviousSLC.SubregLabelContent.Description + " (Duplicate)"
   INCLUDE NewSLC.SubregProduct FROM PreviousSLC.SubregProduct
   INCLUDE NewSLC.MasterLabelContent FROM PreviousSLC.MasterLabelContent

   // S_Usage
   FOR EACH PreviousSLC.S_UsageType
      CREATE ENTITY NewSLC.S_UsageType
      SetMatchingAttributesByName( NewSLC, "S_UsageType", PreviousSLC, "S_UsageType", zSET_NULL )
      FOR EACH PreviousSLC.S_Usage
         CREATE ENTITY NewSLC.S_Usage
         SetMatchingAttributesByName( NewSLC, "S_Usage", PreviousSLC, "S_Usage", zSET_NULL )
         INCLUDE NewSLC.M_Usage FROM PreviousSLC.M_Usage
      END
   END

   // S_GeneralSection
   FOR EACH PreviousSLC.S_GeneralSection
      CREATE ENTITY NewSLC.S_GeneralSection
      SetMatchingAttributesByName( NewSLC, "S_GeneralSection", PreviousSLC, "S_GeneralSection", zSET_NULL )
      INCLUDE NewSLC.M_GeneralSection FROM PreviousSLC.M_GeneralSection
      FOR EACH PreviousSLC.S_GeneralStatement
         CREATE ENTITY NewSLC.S_GeneralStatement
         SetMatchingAttributesByName( NewSLC, "S_GeneralStatement", PreviousSLC, "S_GeneralStatement", zSET_NULL )
         INCLUDE NewSLC.M_GeneralStatement FROM PreviousSLC.M_GeneralStatement
      END
   END

   // S_IngredientsSection
   FOR EACH PreviousSLC.S_IngredientsSection
      CREATE ENTITY NewSLC.S_IngredientsSection
      SetMatchingAttributesByName( NewSLC, "S_IngredientsSection", PreviousSLC, "S_IngredientsSection", zSET_NULL )
      INCLUDE NewSLC.M_IngredientsSection FROM PreviousSLC.M_IngredientsSection
      FOR EACH PreviousSLC.S_IngredientsStatement
         CREATE ENTITY NewSLC.S_IngredientsStatement
         SetMatchingAttributesByName( NewSLC, "S_IngredientsStatement", PreviousSLC, "S_IngredientsStatement", zSET_NULL )
         INCLUDE NewSLC.M_IngredientsStatement FROM PreviousSLC.M_IngredientsStatement
      END
   END

   // S_StorageDisposalSection
   FOR EACH PreviousSLC.S_StorageDisposalSection
      CREATE ENTITY NewSLC.S_StorageDisposalSection
      SetMatchingAttributesByName( NewSLC, "S_StorageDisposalSection", PreviousSLC, "S_StorageDisposalSection", zSET_NULL )
      INCLUDE NewSLC.M_StorageDisposalSection FROM PreviousSLC.M_StorageDisposalSection
      FOR EACH PreviousSLC.S_StorageDisposalStatement
         CREATE ENTITY NewSLC.S_StorageDisposalStatement
         SetMatchingAttributesByName( NewSLC, "S_StorageDisposalStatement", PreviousSLC, "S_StorageDisposalStatement", zSET_NULL )
         INCLUDE NewSLC.M_StorageDisposalStatement FROM PreviousSLC.M_StorageDisposalStatement
      END
   END

   // S_DirectionsForUseSection
   FOR EACH PreviousSLC.S_DirectionsForUseSection
      CREATE ENTITY NewSLC.S_DirectionsForUseSection
      SetMatchingAttributesByName( NewSLC, "S_DirectionsForUseSection", PreviousSLC, "S_DirectionsForUseSection", zSET_NULL )
      INCLUDE NewSLC.M_DirectionsForUseSection FROM PreviousSLC.M_DirectionsForUseSection
      FOR EACH PreviousSLC.S_DirectionsForUseStatement
         CREATE ENTITY NewSLC.S_DirectionsForUseStatement
         SetMatchingAttributesByName( NewSLC, "S_DirectionsForUseStatement", PreviousSLC, "S_DirectionsForUseStatement", zSET_NULL )
         IF NewSLC.S_DirectionsForUseStatement.NotForUseType = ""
            NewSLC.S_DirectionsForUseStatement.NotForUseType = "NA"
         END
         INCLUDE NewSLC.M_DirectionsForUseStatement FROM PreviousSLC.M_DirectionsForUseStatement

         // UsageOrder entries
         FOR EACH PreviousSLC.S_DirectionsUsageOrdering
            CREATE ENTITY NewSLC.S_DirectionsUsageOrdering
            SetMatchingAttributesByName( NewSLC, "S_DirectionsUsageOrdering", PreviousSLC, "S_DirectionsUsageOrdering", zSET_NULL )

            // We need to include the new S_Usage entry created in the NewSLC.
            SET CURSOR FIRST PreviousSLC.S_Usage WITHIN NewSLC.SubregLabelContent
                       WHERE PreviousSLC.S_Usage.ID = PreviousSLC.S_DirectionsUsage.ID
            IF RESULT >= zCURSOR_SET
               SET CURSOR FIRST NewSLC.M_Usage WITHIN NewSLC.SubregLabelContent
                          WHERE NewSLC.M_Usage.ID = PreviousSLC.M_Usage.ID
               IF RESULT >= zCURSOR_SET
                  INCLUDE NewSLC.S_DirectionsUsage FROM NewSLC.S_Usage
               END
            END
         END
      END

      // We need to include any NewSLC.S_ClaimsDrivingUsage from the S_Usage entry created in the NewSLC.
      FOR EACH PreviousSLC.S_ClaimsDrivingUsage
         SET CURSOR FIRST PreviousSLC.S_Usage WITHIN PreviousSLC.SubregLabelContent
                    WHERE PreviousSLC.S_Usage.ID = PreviousSLC.S_ClaimsDrivingUsage.ID
         IF RESULT >= zCURSOR_SET
            SET CURSOR FIRST NewSLC.M_Usage WITHIN NewSLC.SubregLabelContent
                       WHERE NewSLC.M_Usage.ID = PreviousSLC.M_Usage.ID
            IF RESULT >= zCURSOR_SET
               INCLUDE NewSLC.S_ClaimsDrivingUsage FROM NewSLC.S_Usage
            END
         END
      END
   END

   // S_MarketingSection
   FOR EACH PreviousSLC.S_MarketingSection
      CREATE ENTITY NewSLC.S_MarketingSection
      SetMatchingAttributesByName( NewSLC, "S_MarketingSection", PreviousSLC, "S_MarketingSection", zSET_NULL )
      INCLUDE NewSLC.M_MarketingSection FROM PreviousSLC.M_MarketingSection
      FOR EACH PreviousSLC.S_MarketingStatement
         CREATE ENTITY NewSLC.S_MarketingStatement
         SetMatchingAttributesByName( NewSLC, "S_MarketingStatement", PreviousSLC, "S_MarketingStatement", zSET_NULL )
         INCLUDE NewSLC.M_MarketingStatement FROM PreviousSLC.M_MarketingStatement

         // UsageOrder entries
         FOR EACH PreviousSLC.S_MarketingUsageOrdering
            IF PreviousSLC.S_MarketingUsage EXISTS
               // Position on equivalent S_Usage entry in new SLC. If it's not there, don't create the S_MarketingUsageOrdering entry.
               SET CURSOR FIRST NewSLC.S_UsageType WHERE NewSLC.S_UsageType.UsageType = PreviousSLC.S_MarketingUsage.UsageType
               IF RESULT < zCURSOR_SET
                  IssueError( PreviousSLC,0,0, "Programming Error UsageType" )
               END
               SET CURSOR FIRST NewSLC.S_Usage WHERE NewSLC.S_Usage.Name = PreviousSLC.S_Usage.Name
               IF RESULT >= zCURSOR_SET
                  // It exists, so create entity and include S_Usage.
                  CREATE ENTITY NewSLC.S_MarketingUsageOrdering
                  SetMatchingAttributesByName( NewSLC, "S_MarketingUsageOrdering", PreviousSLC, "S_MarketingUsageOrdering", zSET_NULL )
                  INCLUDE NewSLC.S_MarketingUsage FROM NewSLC.S_Usage
               END
            END
         END
      END
   END


   // S_HumanHazardSection
   FOR EACH PreviousSLC.S_HumanHazardSection
      CREATE ENTITY NewSLC.S_HumanHazardSection
      SetMatchingAttributesByName( NewSLC, "S_HumanHazardSection", PreviousSLC, "S_HumanHazardSection", zSET_NULL )
      INCLUDE NewSLC.M_HumanHazardSection FROM PreviousSLC.M_HumanHazardSection
   END

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: CopyDirsForUseStatements
//
/////////////////////////////////////////////////////////////////////////////
LOCAL OPERATION
CopyDirsForUseStatements( VIEW NewSLC BASED ON LOD mSubLC,
                          VIEW SrcMLC BASED ON LOD mMasLC )

   FOR EACH SrcMLC.M_DirectionsForUseStatement
      CREATE ENTITY NewSLC.S_DirectionsForUseStatement
      SetMatchingAttributesByName( NewSLC, "S_DirectionsForUseStatement",
                                   SrcMLC, "M_DirectionsForUseStatement", zSET_NULL )
      NewSLC.S_DirectionsForUseStatement.PrimaryMLC_ID = SrcMLC.M_DirectionsForUseStatement.ID
      IF NewSLC.S_DirectionsForUseStatement.NotForUseType = ""
         NewSLC.S_DirectionsForUseStatement.NotForUseType = "NA"
      END
      FOR EACH SrcMLC.M_InsertTextKeywordDU
         CREATE ENTITY NewSLC.S_InsertTextKeywordDU
         SetMatchingAttributesByName( NewSLC, "S_InsertTextKeywordDU", SrcMLC, "M_InsertTextKeywordDU", zSET_NULL )
         FOR EACH SrcMLC.M_InsertTextDU
            CREATE ENTITY NewSLC.S_InsertTextDU
            SetMatchingAttributesByName( NewSLC, "S_InsertTextDU", SrcMLC, "M_InsertTextDU", zSET_NULL )
         END
      END
      FOR EACH SrcMLC.M_DirectionsUsageOrdering
         SET CURSOR FIRST NewSLC.S_Usage WITHIN NewSLC.SubregLabelContent
                    WHERE NewSLC.S_Usage.PrimaryMLC_ID = SrcMLC.M_DirectionsUsage.ID
         IF RESULT >= zCURSOR_SET
            CREATE ENTITY NewSLC.S_DirectionsUsageOrdering
            NewSLC.S_DirectionsUsageOrdering.PrimaryMLC_ID = SrcMLC.M_DirectionsUsageOrdering.ID
            INCLUDE NewSLC.S_DirectionsUsage FROM NewSLC.S_Usage
         END
      END
      IF SrcMLC.M_DirectionsForUseSubStatement EXISTS
         SetViewToSubobject( SrcMLC, "M_DirectionsForUseSubStatement" )
         SetViewToSubobject( NewSLC, "S_DirectionsForUseSubStatement" )
         CopyDirsForUseStatements( NewSLC, SrcMLC )
         ResetViewFromSubobject( NewSLC )
         ResetViewFromSubobject( SrcMLC )
      END
   END

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: CopyDirsForUseSection
//
/////////////////////////////////////////////////////////////////////////////
TRANSFORMATION OPERATION
CopyDirsForUseSection( VIEW NewSLC BASED ON LOD mSubLC,
                       VIEW SrcMLC BASED ON LOD mMasLC )

   // Copy a Directions For Use Section from the MLC to the SLC
   // No Driving Usage entry exists, so always copy the section.
   CREATE ENTITY NewSLC.S_DirectionsForUseSection
   SetMatchingAttributesByName( NewSLC, "S_DirectionsForUseSection",
                                SrcMLC, "M_DirectionsForUseSection", zSET_NULL )
   NewSLC.S_DirectionsForUseSection.PrimaryMLC_ID = SrcMLC.M_DirectionsForUseSection.ID
   FOR EACH SrcMLC.M_InsertTextKeywordSectionDU
      CREATE ENTITY NewSLC.S_InsertTextKeywordSectionDU
      SetMatchingAttributesByName( NewSLC, "S_InsertTextKeywordSectionDU", SrcMLC, "M_InsertTextKeywordSectionDU", zSET_NULL )
      FOR EACH SrcMLC.M_InsertTextSectionDU
         CREATE ENTITY NewSLC.S_InsertTextSectionDU
         SetMatchingAttributesByName( NewSLC, "S_InsertTextSectionDU", SrcMLC, "M_InsertTextSectionDU", zSET_NULL )
      END
   END
   CopyDirsForUseStatements( NewSLC, SrcMLC )
END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: CopyStorageDisposalStmts
//
/////////////////////////////////////////////////////////////////////////////
LOCAL OPERATION
CopyStorageDisposalStmts( VIEW NewSLC, VIEW SrcMLC )

   FOR EACH SrcMLC.M_StorageDisposalStatement
      CREATE ENTITY NewSLC.S_StorageDisposalStatement
      SetMatchingAttributesByName( NewSLC, "S_StorageDisposalStatement", SrcMLC, "M_StorageDisposalStatement", zSET_NULL )
      FOR EACH SrcMLC.M_InsertTextKeywordSD
         CREATE ENTITY NewSLC.S_InsertTextKeywordSD
         SetMatchingAttributesByName( NewSLC, "S_InsertTextKeywordSD", SrcMLC, "M_InsertTextKeywordSD", zSET_NULL )
         FOR EACH SrcMLC.M_InsertTextSD
            CREATE ENTITY NewSLC.S_InsertTextSD
            SetMatchingAttributesByName( NewSLC, "S_InsertTextSD", SrcMLC, "M_InsertTextSD", zSET_NULL )
         END
      END
      IF SrcMLC.M_StorageDisposalSubStatement EXISTS
         SetViewToSubobject( SrcMLC, "M_StorageDisposalSubStatement" )
         SetViewToSubobject( NewSLC, "S_StorageDisposalSubStatement" )
         FOR EACH SrcMLC.M_StorageDisposalStatement
            CopyStorageDisposalStmts( NewSLC, SrcMLC )
         END
         ResetViewFromSubobject( NewSLC )
         ResetViewFromSubobject( SrcMLC )
      END
   END

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: CopyUsagesRecursive
//
/////////////////////////////////////////////////////////////////////////////
LOCAL OPERATION
CopyUsagesRecursive( VIEW NewSLC, VIEW SrcMLC )

   STRING ( 256 ) szText

   FOR EACH SrcMLC.M_Usage
      CREATE ENTITY NewSLC.S_Usage
      SetMatchingAttributesByName( NewSLC, "S_Usage", SrcMLC, "M_Usage", zSET_NULL )
      NewSLC.S_Usage.PrimaryMLC_ID = SrcMLC.M_Usage.ID
      INCLUDE NewSLC.M_Usage FROM SrcMLC.M_Usage
      FOR EACH SrcMLC.M_InsertTextKeywordUsage
         CREATE ENTITY NewSLC.S_InsertTextKeywordUsage
         SetMatchingAttributesByName( NewSLC, "S_InsertTextKeywordUsage", SrcMLC, "M_InsertTextKeywordUsage", zSET_NULL )
         FOR EACH SrcMLC.M_InsertTextUsage
            CREATE ENTITY NewSLC.S_InsertTextUsage
            SetMatchingAttributesByName( NewSLC, "S_InsertTextUsage", SrcMLC, "M_InsertTextUsage", zSET_NULL )
         END
      END
      IF SrcMLC.M_UsageFootnoteUsed EXISTS
         szText = SrcMLC.M_UsageFootnoteUsed.Text
         SET CURSOR FIRST NewSLC.S_UsageFootnote WHERE NewSLC.S_UsageFootnote.Text = szText
         INCLUDE NewSLC.S_UsageFootnoteUsed FROM NewSLC.S_UsageFootnote
      END
      IF SrcMLC.M_SubUsage EXISTS
         SetViewToSubobject( SrcMLC, "M_SubUsage" )
         SetViewToSubobject( NewSLC, "S_SubUsage" )
         FOR EACH SrcMLC.M_Usage
            CopyUsagesRecursive( NewSLC, SrcMLC )
         END
         ResetViewFromSubobject( NewSLC )
         ResetViewFromSubobject( SrcMLC )
      END
   END

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: BuildSLC_FromMLC
//
/////////////////////////////////////////////////////////////////////////////
TRANSFORMATION OPERATION
BuildSLC_FromMLC( VIEW NewSLC BASED ON LOD mSubLC,
                  VIEW SrcMLC BASED ON LOD mMasLC )

   STRING ( 32 ) szVersion

// IssueError( NewSLC, 0, 0, "Start of Build SLC" )

   // Create a new SLC from an MLC and tie it back to the MLC.

   // It is assumed that the root entity (SubregLabelContent) and that Subreg Product
   // includes have been set up prior to execution of this operation.
   IF NewSLC.MasterLabelContent DOES NOT EXIST
      INCLUDE NewSLC.MasterLabelContent FROM SrcMLC.MasterLabelContent
   END

   // General Section ... Precautionary, First Aid, Other Hazard
   FOR EACH SrcMLC.M_GeneralSection
      CREATE ENTITY NewSLC.S_GeneralSection
      SetMatchingAttributesByName( NewSLC, "S_GeneralSection", SrcMLC, "M_GeneralSection", zSET_NULL )
      NewSLC.S_GeneralSection.PrimaryMLC_ID = SrcMLC.M_GeneralSection.ID
      INCLUDE NewSLC.M_GeneralSection FROM SrcMLC.M_GeneralSection
      FOR EACH SrcMLC.M_GeneralStatement
         CREATE ENTITY NewSLC.S_GeneralStatement
         SetMatchingAttributesByName( NewSLC, "S_GeneralStatement", SrcMLC, "M_GeneralStatement", zSET_NULL )
         NewSLC.S_GeneralStatement.PrimaryMLC_ID = SrcMLC.M_GeneralStatement.ID
         FOR EACH SrcMLC.M_InsertTextKeyword
            CREATE ENTITY NewSLC.S_InsertTextKeyword
            SetMatchingAttributesByName( NewSLC, "S_InsertTextKeyword", SrcMLC, "M_InsertTextKeyword", zSET_NULL )
            FOR EACH SrcMLC.M_InsertText
               CREATE ENTITY NewSLC.S_InsertText
               SetMatchingAttributesByName( NewSLC, "S_InsertText", SrcMLC, "M_InsertText", zSET_NULL )
            END
         END
      END
      FOR EACH SrcMLC.M_GeneralSubSection
         CREATE ENTITY NewSLC.S_GeneralSubSection
         SetMatchingAttributesByName( NewSLC, "S_GeneralSubSection", SrcMLC, "M_GeneralSubSection", zSET_NULL )
         NewSLC.S_GeneralSubSection.PrimaryMLC_ID = SrcMLC.M_GeneralSubSection.ID
         FOR EACH SrcMLC.M_GeneralSubStatement
            CREATE ENTITY NewSLC.S_GeneralSubStatement
            SetMatchingAttributesByName( NewSLC, "S_GeneralSubStatement", SrcMLC, "M_GeneralSubStatement", zSET_NULL )
            NewSLC.S_GeneralSubStatement.PrimaryMLC_ID = SrcMLC.M_GeneralSubStatement.ID
            FOR EACH SrcMLC.M_InsertTextKeywordGeneral
               CREATE ENTITY NewSLC.S_InsertTextKeywordGeneral
               SetMatchingAttributesByName( NewSLC, "S_InsertTextKeywordGeneral", SrcMLC, "M_InsertTextKeywordGeneral", zSET_NULL )
               FOR EACH SrcMLC.M_InsertTextGeneral
                  CREATE ENTITY NewSLC.S_InsertTextGeneral
                  SetMatchingAttributesByName( NewSLC, "S_InsertTextGeneral", SrcMLC, "M_InsertTextGeneral", zSET_NULL )
               END
            END
         END
      END
   END

   // Footnotes
   FOR EACH SrcMLC.M_UsageFootnote
      CREATE ENTITY NewSLC.S_UsageFootnote
      SetMatchingAttributesByName( NewSLC, "S_UsageFootnote", SrcMLC, "M_UsageFootnote", zSET_NULL )
      NewSLC.S_UsageFootnote.PrimaryMLC_ID = SrcMLC.M_UsageFootnote.ID
   END

   // Usages ... Claim, Surface, Application Type, Location 
   FOR EACH SrcMLC.M_UsageType
      CREATE ENTITY NewSLC.S_UsageType
      SetMatchingAttributesByName( NewSLC, "S_UsageType", SrcMLC, "M_UsageType", zSET_NULL )
      NewSLC.S_UsageType.PrimaryMLC_ID = SrcMLC.M_UsageType.ID
      INCLUDE NewSLC.M_UsageType FROM SrcMLC.M_UsageType
      CopyUsagesRecursive( NewSLC, SrcMLC )
   END

   // Ingredients Section
   FOR EACH SrcMLC.M_IngredientsSection
      CREATE ENTITY NewSLC.S_IngredientsSection
      SetMatchingAttributesByName( NewSLC, "S_IngredientsSection", SrcMLC, "M_IngredientsSection", zSET_NULL )
      NewSLC.S_IngredientsSection.PrimaryMLC_ID = SrcMLC.M_IngredientsSection.ID
      FOR EACH SrcMLC.M_IngredientsStatement
         CREATE ENTITY NewSLC.S_IngredientsStatement
         SetMatchingAttributesByName( NewSLC, "S_IngredientsStatement", SrcMLC, "M_IngredientsStatement", zSET_NULL )
         NewSLC.S_IngredientsStatement.PrimaryMLC_ID = SrcMLC.M_IngredientsStatement.ID
      END
   END

   // StorageDisposal Section
   // For the moment, copy all Storage & Disposal Sections with child entities.
   FOR EACH SrcMLC.M_StorageDisposalSection
      CREATE ENTITY NewSLC.S_StorageDisposalSection
      SetMatchingAttributesByName( NewSLC, "S_StorageDisposalSection", SrcMLC, "M_StorageDisposalSection", zSET_NULL )
      CopyStorageDisposalStmts( NewSLC, SrcMLC )
   END
   /*
   // Select the Storage & Disposal Section based on Container Size, which is stored as a work attribute in NewSLC.
   IF NewSLC.SubregLabelContent.wContainerSize > 5
      SET CURSOR FIRST SrcMLC.M_StorageDisposalSection WHERE SrcMLC.M_StorageDisposalSection.ContainerVolume = ">5"
   ELSE
      SET CURSOR FIRST SrcMLC.M_StorageDisposalSection WHERE SrcMLC.M_StorageDisposalSection.ContainerVolume = "<=5"
   END
   CREATE ENTITY NewSLC.S_StorageDisposalSection
   SetMatchingAttributesByName( NewSLC, "S_StorageDisposalSection", SrcMLC, "M_StorageDisposalSection", zSET_NULL )
   NewSLC.S_StorageDisposalSection.PrimaryMLC_ID = SrcMLC.M_StorageDisposalSection.ID
   FOR EACH SrcMLC.M_StorageDisposalStatement
      CREATE ENTITY NewSLC.S_StorageDisposalStatement
      SetMatchingAttributesByName( NewSLC, "S_StorageDisposalStatement", SrcMLC, "M_StorageDisposalStatement", zSET_NULL )
      NewSLC.S_StorageDisposalStatement.PrimaryMLC_ID = SrcMLC.M_StorageDisposalStatement.ID
   END
   */

   // Add any Directions For Use Sections that aren't driven by Usage entries.
   FOR EACH SrcMLC.M_DirectionsForUseCategory
      CREATE ENTITY NewSLC.S_DirectionsForUseCategory
      SetMatchingAttributesByName( NewSLC, "S_DirectionsForUseCategory", SrcMLC, "M_DirectionsForUseCategory", zSET_NULL )
      FOR EACH SrcMLC.M_DirectionsForUseSection
         IF SrcMLC.M_ClaimsDrivingUsage DOES NOT EXIST
            // No Driving Usage entry exists, so always copy the section.
            CopyDirsForUseSection( NewSLC, SrcMLC )
         END
      END
   END

   // Marketing Section
   FOR EACH SrcMLC.M_MarketingSection
      CREATE ENTITY NewSLC.S_MarketingSection
      SetMatchingAttributesByName( NewSLC, "S_MarketingSection", SrcMLC, "M_MarketingSection", zSET_NULL )
      NewSLC.S_MarketingSection.PrimaryMLC_ID = SrcMLC.M_MarketingSection.ID
      FOR EACH SrcMLC.M_MarketingStatement
         CREATE ENTITY NewSLC.S_MarketingStatement
         SetMatchingAttributesByName( NewSLC, "S_MarketingStatement", SrcMLC, "M_MarketingStatement", zSET_NULL )
         INCLUDE NewSLC.M_MarketingStatement FROM SrcMLC.M_MarketingStatement
         NewSLC.S_MarketingStatement.PrimaryMLC_ID = SrcMLC.M_MarketingStatement.ID
         FOR EACH SrcMLC.M_InsertTextKeywordMarketing
            CREATE ENTITY NewSLC.S_InsertTextKeywordMarketing
            SetMatchingAttributesByName( NewSLC, "S_InsertTextKeywordMarketing", SrcMLC, "M_InsertTextKeywordMarketing", zSET_NULL )
            FOR EACH SrcMLC.M_InsertTextMarketing
               CREATE ENTITY NewSLC.S_InsertTextMarketing
               SetMatchingAttributesByName( NewSLC, "S_InsertTextMarketing", SrcMLC, "M_InsertTextMarketing", zSET_NULL )
            END
         END
      END
   END

   // Tables
   FOR EACH SrcMLC.M_MetaTable
      CREATE ENTITY NewSLC.S_MetaTable
      SetMatchingAttributesByName( NewSLC, "S_MetaTable", SrcMLC, "M_MetaTable", zSET_NULL )
      NewSLC.S_MetaTable.PrimaryMLC_ID = SrcMLC.M_MetaTable.ID
      FOR EACH SrcMLC.M_Rows
         CREATE ENTITY NewSLC.S_Rows
         SetMatchingAttributesByName( NewSLC, "S_Rows", SrcMLC, "M_Rows", zSET_NULL )
         NewSLC.S_Rows.PrimaryMLC_ID = SrcMLC.M_Rows.ID
      END
   END

   // Dilutions
   FOR EACH SrcMLC.M_DilutionGroup
      CREATE ENTITY NewSLC.S_DilutionGroup
      SetMatchingAttributesByName( NewSLC, "S_DilutionGroup", SrcMLC, "M_DilutionGroup", zSET_NULL )
      NewSLC.S_DilutionGroup.PrimaryMLC_ID = SrcMLC.M_DilutionGroup.ID
      FOR EACH SrcMLC.M_DilutionChartEntry
         CREATE ENTITY NewSLC.S_DilutionChartEntry
         SetMatchingAttributesByName( NewSLC, "S_DilutionChartEntry", SrcMLC, "M_DilutionChartEntry", zSET_NULL )
      // NewSLC.S_DilutionChartEntry.PrimaryMLC_ID = SrcMLC.M_DilutionChartEntry.ID
      END
      FOR EACH SrcMLC.M_DilutionGroupItem
         CREATE ENTITY NewSLC.S_DilutionGroupItem
         SetMatchingAttributesByName( NewSLC, "S_DilutionGroupItem", SrcMLC, "M_DilutionGroupItem", zSET_NULL )
      // NewSLC.S_DilutionGroupItem.PrimaryMLC_ID = SrcMLC.M_DilutionGroupItem.ID
      END
   END

   // HumanHazard Section
   FOR EACH SrcMLC.M_HumanHazardSection
      CREATE ENTITY NewSLC.S_HumanHazardSection
      SetMatchingAttributesByName( NewSLC, "S_HumanHazardSection", SrcMLC, "M_HumanHazardSection", zSET_NULL )
      NewSLC.S_HumanHazardSection.PrimaryMLC_ID = SrcMLC.M_HumanHazardSection.ID
   END

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: BuildDirsForUseSects
//
/////////////////////////////////////////////////////////////////////////////
TRANSFORMATION OPERATION
BuildDirsForUseSects( VIEW NewSLC BASED ON LOD mSubLC,
                      VIEW SrcMLC BASED ON LOD mMasLC )

   STRING ( 1 ) szFoundFlag
   SHORT        nRC

   // Build Directions For Use Sections based on Driving Usage entries.

   // First remove existing entries.
   FOR EACH NewSLC.S_DirectionsForUseSection
      DELETE ENTITY NewSLC.S_DirectionsForUseSection NONE
   END

   // Loop through each MLC Directions For Use Section and see if it should be copied to the SLC.
   // Sections are copied under two conditions.
   // 1. There are no driving Usage entries for the section in the MLC, meaning that the section is always
   //    to be included in the SLC.
   // 2. A Driving Usage entry for a Section has been included in the SLC.
   FOR EACH SrcMLC.M_DirectionsForUseSection
      IF SrcMLC.M_ClaimsDrivingUsage DOES NOT EXIST
         // No Driving Usage entry exists, so always copy the section.
         CopyDirsForUseSection( NewSLC, SrcMLC )
      ELSE
         // The Section is Driven by Usage entries.
         szFoundFlag = ""
         nRC = SetCursorFirstEntity( SrcMLC, "M_ClaimsDrivingUsage", "" )
         LOOP WHILE nRC >= zCURSOR_SET AND szFoundFlag = ""
            SET CURSOR FIRST NewSLC.S_Usage WITHIN NewSLC.SubregLabelContent
                       WHERE NewSLC.S_Usage.PrimaryMLC_ID = SrcMLC.M_ClaimsDrivingUsage.ID
            IF RESULT >= zCURSOR_SET
               szFoundFlag = "Y"
            END
            nRC = SetCursorNextEntity( SrcMLC, "M_ClaimsDrivingUsage", "" )
         END
         IF szFoundFlag = "Y"
            CopyDirsForUseSection( NewSLC, SrcMLC )
         END
      END
   END

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: RefreshSLC_FromMLC
//
/////////////////////////////////////////////////////////////////////////////
TRANSFORMATION OPERATION
RefreshSLC_FromMLC( VIEW mSubLC BASED ON LOD mSubLC,
                    VIEW mMasLC BASED ON LOD mMasLC )

   // ******** NOTE THAT THIS WAS TEMPORARY AND SHOULD NO LONGER BE USED. *******

   // Refresh SLC component values from the values in the corresponding MLC.
   FOR EACH mSubLC.S_Usage
      SET CURSOR FIRST mMasLC.M_Usage WHERE mMasLC.M_Usage.ID = mSubLC.M_Usage.ID
      IF RESULT >= zCURSOR_SET
         mSubLC.S_Usage.Name = mMasLC.M_Usage.Name
      ELSE
         TraceLineS( "#### No Match on Usage", "" )
      END
   END

   // Rebuild General Section entries.
   FOR EACH mSubLC.S_GeneralSection
      DELETE ENTITY mSubLC.S_GeneralSection NONE
   END
   FOR EACH mMasLC.M_GeneralSection
      CREATE ENTITY mSubLC.S_GeneralSection
      SetMatchingAttributesByName( mSubLC, "S_GeneralSection", mMasLC, "M_GeneralSection", zSET_NULL )
      INCLUDE mSubLC.M_GeneralSection FROM mMasLC.M_GeneralSection
      FOR EACH mMasLC.M_GeneralStatement
         CREATE ENTITY mSubLC.S_GeneralStatement
         SetMatchingAttributesByName( mSubLC, "S_GeneralStatement", mMasLC, "M_GeneralStatement", zSET_NULL )
         INCLUDE mSubLC.M_GeneralStatement FROM mMasLC.M_GeneralStatement
      END
   END

   // Rebuild Ingredients Section entries.
   FOR EACH mSubLC.S_IngredientsSection
      DELETE ENTITY mSubLC.S_IngredientsSection NONE
   END
   FOR EACH mMasLC.M_IngredientsSection
      CREATE ENTITY mSubLC.S_IngredientsSection
      SetMatchingAttributesByName( mSubLC, "S_IngredientsSection", mMasLC, "M_IngredientsSection", zSET_NULL )
      INCLUDE mSubLC.M_IngredientsSection FROM mMasLC.M_IngredientsSection
      FOR EACH mMasLC.M_IngredientsStatement
         CREATE ENTITY mSubLC.S_IngredientsStatement
         SetMatchingAttributesByName( mSubLC, "S_IngredientsStatement", mMasLC, "M_IngredientsStatement", zSET_NULL )
         INCLUDE mSubLC.M_IngredientsStatement FROM mMasLC.M_IngredientsStatement
      END
   END

   // Rebuild Storage and Disposal entries.
   FOR EACH mSubLC.S_StorageDisposalSection
      DELETE ENTITY mSubLC.S_StorageDisposalSection NONE
   END
   FOR EACH mMasLC.M_StorageDisposalSection
      CREATE ENTITY mSubLC.S_StorageDisposalSection
      SetMatchingAttributesByName( mSubLC, "S_StorageDisposalSection", mMasLC, "M_StorageDisposalSection", zSET_NULL )
      INCLUDE mSubLC.M_StorageDisposalSection FROM mMasLC.M_StorageDisposalSection
      FOR EACH mMasLC.M_StorageDisposalStatement
         CREATE ENTITY mSubLC.S_StorageDisposalStatement
         SetMatchingAttributesByName( mSubLC, "S_StorageDisposalStatement", mMasLC, "M_StorageDisposalStatement", zSET_NULL )
         INCLUDE mSubLC.M_StorageDisposalStatement FROM mMasLC.M_StorageDisposalStatement
      END
   END

   // Delete any Directions For Use Sections in SLC not in MLC.
   FOR EACH mSubLC.S_DirectionsForUseSection
      IF mSubLC.M_DirectionsForUseSection DOES NOT EXIST
         DELETE ENTITY mSubLC.S_DirectionsForUseSection NONE
      END
   END

   // Add/Refresh SLC Directions For Use Sections.
   FOR EACH mSubLC.S_DirectionsForUseSection
      SET CURSOR FIRST mMasLC.M_DirectionsForUseSection WHERE mMasLC.M_DirectionsForUseSection.ID = mSubLC.M_DirectionsForUseSection.ID
      IF RESULT >= zCURSOR_SET
         FOR EACH mSubLC.S_DirectionsForUseStatement
            SET CURSOR FIRST mMasLC.M_DirectionsForUseStatement WHERE mMasLC.M_DirectionsForUseStatement.ID = mSubLC.M_DirectionsForUseStatement.ID
            IF RESULT >= zCURSOR_SET
               mSubLC.S_DirectionsForUseStatement.Text = mMasLC.M_DirectionsForUseStatement.Text
            END
         END

         // Add Usage Entries, if they don't already exist.
         IF mMasLC.M_DirectionsUsageOrdering EXISTS AND mSubLC.S_DirectionsUsageOrdering DOES NOT EXIST
            FOR EACH mMasLC.M_DirectionsUsageOrdering
               CREATE ENTITY mSubLC.S_DirectionsUsageOrdering
               SET CURSOR FIRST mSubLC.M_Usage WITHIN mSubLC.SubregLabelContent
                          WHERE mSubLC.M_Usage.ID = mMasLC.M_DirectionsUsage.ID
               IF RESULT < zCURSOR_SET
                  CREATE ENTITY mSubLC.S_Usage
                  SetMatchingAttributesByName( mSubLC, "S_Usage", mMasLC, "M_DirectionsUsage", zSET_NULL )
               END
               INCLUDE mSubLC.S_DirectionsUsage FROM mSubLC.S_Usage
            END
         END
      END
   END

   // Delete any Marketing Sections in SLC not in MLC.
   FOR EACH mSubLC.S_MarketingSection
      IF mSubLC.M_MarketingSection DOES NOT EXIST
         DELETE ENTITY mSubLC.S_MarketingSection NONE
      END
   END

   // Add/Refresh SLC Marketing Sections.
   FOR EACH mSubLC.S_MarketingSection
      SET CURSOR FIRST mMasLC.M_MarketingSection WHERE mMasLC.M_MarketingSection.ID = mSubLC.M_MarketingSection.ID
      IF RESULT >= zCURSOR_SET
         FOR EACH mSubLC.S_MarketingStatement
            SET CURSOR FIRST mMasLC.M_MarketingStatement WHERE mMasLC.M_MarketingStatement.ID = mSubLC.M_MarketingStatement.ID
            IF RESULT >= zCURSOR_SET
               mSubLC.S_MarketingStatement.Text = mMasLC.M_MarketingStatement.Text
            END
         END

         // Add Usage Entries, if they don't already exist.
         IF mMasLC.M_MarketingUsageOrdering EXISTS AND mSubLC.S_MarketingUsageOrdering DOES NOT EXIST
            FOR EACH mMasLC.M_MarketingUsageOrdering
               CREATE ENTITY mSubLC.S_MarketingUsageOrdering
               SET CURSOR FIRST mSubLC.M_Usage WITHIN mSubLC.SubregLabelContent
                          WHERE mSubLC.M_Usage.ID = mMasLC.M_MarketingUsage.ID
               IF RESULT < zCURSOR_SET
                  CREATE ENTITY mSubLC.S_Usage
                  SetMatchingAttributesByName( mSubLC, "S_Usage", mMasLC, "M_MarketingUsage", zSET_NULL )
               END
               INCLUDE mSubLC.S_MarketingUsage FROM mSubLC.S_Usage
            END
         END
      END
   END

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: BuildWorkVariables
//
/////////////////////////////////////////////////////////////////////////////
TRANSFORMATION OPERATION
BuildWorkVariables( VIEW mSubLC BASED ON LOD mSubLC,
                    VIEW mMasLC BASED ON LOD mMasLC )

   INTEGER ID

   // Build any work variable for the mSubLC.

   // Build list of Directions For Use Section Driving Usage entries by selecting the Driving Usage entries
   // from the MLC that have been selected for the SLC.
   FOR EACH mSubLC.S_DirectionsForUseSection
      ID = mSubLC.S_DirectionsForUseSection.PrimaryMLC_ID
      SET CURSOR FIRST mMasLC.M_DirectionsForUseSection
                 WHERE mMasLC.M_DirectionsForUseSection.ID = ID
      IF RESULT < zCURSOR_SET
         TraceLineI( "Error in BuildWorkVariables locating S_DirectionsForUseSection PrimaryMLC_ID: ", ID )
      // IssueError( mSubLC,0,0,"Programming Error in BuildWorkVariables" )
      ELSE
         FOR EACH mMasLC.M_ClaimsDrivingUsage
            SET CURSOR FIRST mSubLC.S_Usage WITHIN mSubLC.SubregLabelContent
                       WHERE mSubLC.S_Usage.PrimaryMLC_ID = mMasLC.M_ClaimsDrivingUsage.ID
            IF RESULT >= zCURSOR_SET
               INCLUDE mSubLC.S_ClaimsDrivingUsage FROM mSubLC.S_Usage
            END
         END
      END
   END

   // Build list of Directions For Use Statement Usage entries by selecting the Statement Usage entries
   // from the MLC that have been selected for the SLC.
   FOR EACH mSubLC.S_DirectionsForUseStatement WITHIN mSubLC.SubregLabelContent
      ID = mSubLC.S_DirectionsForUseStatement.PrimaryMLC_ID
      IF RESULT < zCURSOR_SET
      SET CURSOR FIRST mMasLC.M_DirectionsForUseStatement WITHIN mMasLC.MasterLabelContent
                 WHERE mMasLC.M_DirectionsForUseStatement.ID = ID
         TraceLineI( "Error in BuildWorkVariables locating S_DirectionsForUseStatement PrimaryMLC_ID: ", ID )
      // IssueError( mSubLC, 0, 0, "Programming Error 2 in BuildWorkVariables" )
      END
      FOR EACH mMasLC.M_DirectionsUsageOrdering
         SET CURSOR FIRST mSubLC.S_Usage WITHIN mSubLC.SubregLabelContent
                    WHERE mSubLC.S_Usage.PrimaryMLC_ID = mMasLC.M_DirectionsUsage.ID
         IF RESULT >= zCURSOR_SET
            INCLUDE mSubLC.S_SelectableDirsForUseUsage FROM mSubLC.S_Usage
         END
      END
   END

   // Build list of Marketing Statement Usage entries by selecting the Statement Usage entries
   // from the MLC that have been selected for the SLC.
   FOR EACH mSubLC.S_MarketingStatement WITHIN mSubLC.SubregLabelContent
      ID = mSubLC.S_MarketingStatement.PrimaryMLC_ID
      SET CURSOR FIRST mMasLC.M_MarketingStatement WITHIN mMasLC.MasterLabelContent
                 WHERE mMasLC.M_MarketingStatement.ID = ID
      IF RESULT < zCURSOR_SET
         TraceLineI( "Error in BuildWorkVariables locating S_MarketingStatement PrimaryMLC_ID: ", ID )
      // IssueError( mSubLC, 0, 0, "Programming Error 3 in BuildWorkVariables" )
      END
TraceLineS( "############ Marketing Section: ", mMasLC.M_MarketingSection.Name )
      FOR EACH mMasLC.M_MarketingUsageOrdering
         SET CURSOR FIRST mSubLC.S_Usage WITHIN mSubLC.SubregLabelContent
                    WHERE mSubLC.S_Usage.PrimaryMLC_ID = mMasLC.M_MarketingUsage.ID
         IF RESULT >= zCURSOR_SET
            INCLUDE mSubLC.S_SelectableMarketingUsage FROM mSubLC.S_Usage
TraceLineS( "############ INCLUDE ", "" )
         END
TraceLineI( "############ Marketing PrimaryMLC_ID: ", mSubLC.S_Usage.PrimaryMLC_ID )
      END
   END

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: BuildCompEntriesForSLC
//
/////////////////////////////////////////////////////////////////////////////
TRANSFORMATION OPERATION
BuildCompEntriesForSLC( VIEW mSubLC BASED ON LOD mSubLC )

   STRING ( 2052 ) szDisplayValue
   STRING ( 2048 ) szOriginalDisplayValue
   STRING ( 256 )  szName
   INTEGER         MaxDisplayLength
   INTEGER         OriginalStringLength

   // Build the flat display of all components subobject.
   MaxDisplayLength = 2048

   // First clear any current entries.
   FOR EACH mSubLC.CompositeComponentList
      DELETE ENTITY mSubLC.CompositeComponentList NONE
   END

   // Build Marketing Section and Statement components.
   FOR EACH mSubLC.S_MarketingSection
      CREATE ENTITY mSubLC.CompositeComponentList
      mSubLC.CompositeComponentList.Type               = "M_MarketingSection"
      mSubLC.CompositeComponentList.SelectLevel        = 1
      mSubLC.CompositeComponentList.DisplayType        = "Marketing"
      mSubLC.CompositeComponentList.DisplayTypeIndent  = "Marketing Section"
      mSubLC.CompositeComponentList.OriginalTypeID     = mSubLC.M_MarketingSection.ID
      szName                                           = mSubLC.S_MarketingSection.Name
      mSubLC.CompositeComponentList.Name               = szName
      mSubLC.CompositeComponentList.SLC_OriginalTypeID = mSubLC.S_MarketingSection.ID
      TraceLineS( "BuildComposite Name: ", szName )
      IF mSubLC.S_MarketingSection.Title != ""
         IF szName = ""
            mSubLC.CompositeComponentList.DisplayValue = mSubLC.S_MarketingSection.Title
         ELSE
            mSubLC.CompositeComponentList.DisplayValue = szName + " - " + mSubLC.S_MarketingSection.Title
         END
      ELSE
         mSubLC.CompositeComponentList.DisplayValue = szName
      END
      mSubLC.CompositeComponentList.Title              = mSubLC.M_MarketingSection.Title
      mSubLC.CompositeComponentList.Value              = mSubLC.CompositeComponentList.DisplayValue

      FOR EACH mSubLC.S_MarketingStatement
         CREATE ENTITY mSubLC.CompositeComponentList
         mSubLC.CompositeComponentList.Type               = "M_MarketingStatement"
         mSubLC.CompositeComponentList.SelectLevel        = 2
         mSubLC.CompositeComponentList.DisplayType        = "Statement"
         mSubLC.CompositeComponentList.DisplayTypeIndent  = "...Statement"
         mSubLC.CompositeComponentList.OriginalTypeID     = mSubLC.M_MarketingStatement.ID
         mSubLC.CompositeComponentList.SLC_OriginalTypeID = mSubLC.S_MarketingStatement.ID
         mSubLC.CompositeComponentList.Title              = mSubLC.S_MarketingStatement.Title
         szOriginalDisplayValue = mSubLC.S_MarketingStatement.Text
         mSubLC.CompositeComponentList.Value              = szOriginalDisplayValue
         szOriginalDisplayValue = mSubLC.S_MarketingStatement.dDisplayKeywordText
         GetAttributeLength( OriginalStringLength, mSubLC, "S_MarketingStatement", "Text" )
         IF MaxDisplayLength < OriginalStringLength
            szDisplayValue = szOriginalDisplayValue[1:2000] + "....."
         ELSE
            szDisplayValue = szOriginalDisplayValue
         END
         mSubLC.CompositeComponentList.DisplayValue = szDisplayValue
      END
   END

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: dFullHazardStatement
//
/////////////////////////////////////////////////////////////////////////////
DERIVED ATTRIBUTE OPERATION
dFullHazardStatement( VIEW mSubLC BASED ON LOD mSubLC,
                      STRING ( 32 ) InternalEntityStructure,
                      STRING ( 32 ) InternalAttribStructure,
                      SHORT GetOrSetFlag )

   STRING ( 256 ) szString
   STRING ( 256 ) szReplaceString
   STRING ( 256 ) szLocation
   STRING ( 2 )   szSeparator
   STRING ( 1 )   szOpenSeparator
   STRING ( 1 )   szCloseSeparator
   STRING ( 1 )   szEncloseFirst
   SHORT nPosStart
   SHORT nPosEnd

   CASE GetOrSetFlag
   OF   zDERIVED_GET:

      IF mSubLC.S_HumanHazardSection  EXISTS

         szSeparator = mSubLC.S_HumanHazardSection.LocationSeparator
         IF szSeparator = ""
            szSeparator = "[]"
         END
         szOpenSeparator = ""
         szCloseSeparator = ""
         nPosStart  = zstrlen( szSeparator )
         IF nPosStart > 0
            zstrncpy( szOpenSeparator, szSeparator, 1 )
            IF nPosStart > 1
               zstrncpyoffset( szCloseSeparator, szSeparator, 1, 1 )
            END
         END

         szEncloseFirst = mSubLC.S_HumanHazardSection.EncloseFirstLocation
         szString = mSubLC.S_HumanHazardSection.PrecautionaryStatement
         nPosStart  = zSearchSubString( szString, "{{Precautionary Panel Location}}", "f", 0 )
         IF nPosStart >= 0

            nPosEnd = nPosStart + 32 // length of "{{Precautionary Panel Location}}"
            szReplaceString = ""
            szLocation = mSubLC.S_HumanHazardSection.PanelLoc1
            IF szLocation != ""
               IF szEncloseFirst = "Y" AND szCloseSeparator != ""
                  szReplaceString = szReplaceString + szOpenSeparator + szLocation + szCloseSeparator
               ELSE
                  szReplaceString = szReplaceString + szLocation
               END
            END

            szLocation = mSubLC.S_HumanHazardSection.PanelLoc2
            IF szLocation != ""
               szReplaceString = szReplaceString + szOpenSeparator + szLocation + szCloseSeparator
            END

            szLocation = mSubLC.S_HumanHazardSection.PanelLoc3
            IF szLocation != ""
               szReplaceString = szReplaceString + szOpenSeparator + szLocation + szCloseSeparator
            END

            szLocation = mSubLC.S_HumanHazardSection.PanelLoc4
            IF szLocation != ""
               szReplaceString = szReplaceString + szOpenSeparator + szLocation + szCloseSeparator
            END

            szLocation = mSubLC.S_HumanHazardSection.PanelLoc5
            IF szLocation != ""
               szReplaceString = szReplaceString + szOpenSeparator + szLocation + szCloseSeparator
            END

            szLocation = mSubLC.S_HumanHazardSection.PanelLoc6
            IF szLocation != ""
               szReplaceString = szReplaceString + szOpenSeparator + szLocation + szCloseSeparator
            END

            szLocation = mSubLC.S_HumanHazardSection.PanelLoc7
            IF szLocation != ""
               szReplaceString = szReplaceString + szOpenSeparator + szLocation + szCloseSeparator
            END

            szLocation = mSubLC.S_HumanHazardSection.PanelLoc8
            IF szLocation != ""
               szReplaceString = szReplaceString + szOpenSeparator + szLocation + szCloseSeparator
            END

            szLocation = mSubLC.S_HumanHazardSection.PanelLoc9
            IF szLocation != ""
               szReplaceString = szReplaceString + szOpenSeparator + szLocation + szCloseSeparator
            END

            zReplaceSubString( szString, nPosStart, nPosEnd, szReplaceString )
         END

         nPosStart  = zSearchSubString( szString, "{{Precautionary Label Location}}", "f", 0 )
         IF nPosStart >= 0

            nPosEnd = nPosStart + 32 // length of "{{Precautionary Label Location}}"
            szReplaceString = ""
            szLocation = mSubLC.S_HumanHazardSection.LabelLoc1
            IF szLocation != ""
               IF szCloseSeparator != ""
                  szReplaceString = szReplaceString + szOpenSeparator + szLocation + szCloseSeparator
               ELSE
                  szReplaceString = szReplaceString + szLocation
               END
            END

            szLocation = mSubLC.S_HumanHazardSection.LabelLoc2
            IF szLocation != ""
               szReplaceString = szReplaceString + szOpenSeparator + szLocation + szCloseSeparator
            END

            szLocation = mSubLC.S_HumanHazardSection.LabelLoc3
            IF szLocation != ""
               szReplaceString = szReplaceString + szOpenSeparator + szLocation + szCloseSeparator
            END

            szLocation = mSubLC.S_HumanHazardSection.LabelLoc4
            IF szLocation != ""
               szReplaceString = szReplaceString + szOpenSeparator + szLocation + szCloseSeparator
            END

            szLocation = mSubLC.S_HumanHazardSection.LabelLoc5
            IF szLocation != ""
               szReplaceString = szReplaceString + szOpenSeparator + szLocation + szCloseSeparator
            END

            szLocation = mSubLC.S_HumanHazardSection.LabelLoc6
            IF szLocation != ""
               szReplaceString = szReplaceString + szOpenSeparator + szLocation + szCloseSeparator
            END

            szLocation = mSubLC.S_HumanHazardSection.LabelLoc7
            IF szLocation != ""
               szReplaceString = szReplaceString + szOpenSeparator + szLocation + szCloseSeparator
            END

            szLocation = mSubLC.S_HumanHazardSection.LabelLoc8
            IF szLocation != ""
               szReplaceString = szReplaceString + szOpenSeparator + szLocation + szCloseSeparator
            END

            szLocation = mSubLC.S_HumanHazardSection.LabelLoc9
            IF szLocation != ""
               szReplaceString = szReplaceString + szOpenSeparator + szLocation + szCloseSeparator
            END

            zReplaceSubString( szString, nPosStart, nPosEnd, szReplaceString )
         END

      ELSE
         szString = ""
      END

      // Store the calculated value in the object.
      StoreStringInRecord( mSubLC, InternalEntityStructure, InternalAttribStructure, szString )
      RETURN 0

      // end zDERIVED_GET
   OF   zDERIVED_SET:

      // end zDERIVED_SET
   END  // case

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: dDisplayKeywordTitle
//
/////////////////////////////////////////////////////////////////////////////
DERIVED ATTRIBUTE OPERATION
dDisplayKeywordTitle( VIEW mSubLC BASED ON LOD mSubLC,
                      STRING ( 32 ) InternalEntityStructure,
                      STRING ( 32 ) InternalAttribStructure,
                      SHORT GetOrSetFlag )

   STRING ( 2048 ) szGeneratedString

   CASE GetOrSetFlag
   OF   zDERIVED_GET:

      // Expand the current Text attribute by replacing embedded Keywords with the Keyword
      // values in the S_InsertTextMarketing subentities.
      szGeneratedString = mSubLC.S_MarketingStatement.Title
      GenerateKeywordTextIntoString( mSubLC,
                                     szGeneratedString,
                                     "S_InsertTextKeywordMarketing",
                                     "S_InsertTextMarketing",
                                     ", " )

      // Store the calculated value in the object.
      StoreStringInRecord( mSubLC, InternalEntityStructure, InternalAttribStructure, szGeneratedString )

        // end zDERIVED_GET
   OF   zDERIVED_SET:

        // end zDERIVED_SET
   END  // case

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: dDisplayKeywordText
//
/////////////////////////////////////////////////////////////////////////////
DERIVED ATTRIBUTE OPERATION
dDisplayKeywordText( VIEW mSubLC BASED ON LOD mSubLC,
                     STRING ( 32 ) InternalEntityStructure,
                     STRING ( 32 ) InternalAttribStructure,
                     SHORT GetOrSetFlag )

   STRING ( 2048 ) szGeneratedString

   CASE GetOrSetFlag
   OF   zDERIVED_GET:

      // Expand the current Text attribute by replacing embedded Keywords with the Keyword
      // values in the S_InsertTextMarketing subentities.
      szGeneratedString = mSubLC.S_MarketingStatement.Text
      GenerateKeywordTextIntoString( mSubLC,
                                     szGeneratedString,
                                     "S_InsertTextKeywordMarketing",
                                     "S_InsertTextMarketing",
                                     ", " )

      // Store the calculated value in the object.
      StoreStringInRecord( mSubLC, InternalEntityStructure, InternalAttribStructure, szGeneratedString )

        // end zDERIVED_GET
   OF   zDERIVED_SET:

        // end zDERIVED_SET
   END  // case

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: dMarketingKeywordText
//
/////////////////////////////////////////////////////////////////////////////
DERIVED ATTRIBUTE OPERATION
dMarketingKeywordText( VIEW mSubLC BASED ON LOD mSubLC,
                       STRING ( 32 ) InternalEntityStructure,
                       STRING ( 32 ) InternalAttribStructure,
                       SHORT GetOrSetFlag )

   STRING ( 2048 ) szKeyValue

   CASE GetOrSetFlag
   OF   zDERIVED_GET:

      // Concatenate all the Keyword values for a Marketing Keyword entry.
      szKeyValue = ""
      FOR EACH mSubLC.S_InsertTextMarketing
         IF szKeyValue = ""
            szKeyValue = "<b>" + mSubLC.S_InsertTextMarketing.Text
         ELSE
            szKeyValue = szKeyValue + ", " + mSubLC.S_InsertTextMarketing.Text
         END
      END
      IF szKeyValue != ""
         szKeyValue = szKeyValue  + "</b>"
      END

      // Store the resulting value in the object.
      StoreStringInRecord( mSubLC, InternalEntityStructure, InternalAttribStructure, szKeyValue )
      RETURN 0

        // end zDERIVED_GET
   OF   zDERIVED_SET:

        // end zDERIVED_SET
   END  // case

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: ObjectConstraints
//
/////////////////////////////////////////////////////////////////////////////
OBJECT CONSTRAINT OPERATION
ObjectConstraints( VIEW mSubLC BASED ON LOD mSubLC,
                   SHORT Event,
                   SHORT State )

   CASE Event
   OF   zOCE_ACTIVATE:

      // Build the PrimaryMLC_ID  values from MLC subentities, if the ID values are null.
      FOR EACH mSubLC.S_GeneralSection
         IF mSubLC.S_GeneralSection.PrimaryMLC_ID = ""
            mSubLC.S_GeneralSection.PrimaryMLC_ID = mSubLC.M_GeneralSection.ID
         END
         FOR EACH mSubLC.S_GeneralStatement
            IF mSubLC.S_GeneralStatement.PrimaryMLC_ID = ""
               mSubLC.S_GeneralStatement.PrimaryMLC_ID = mSubLC.M_GeneralStatement.ID
            END
         END
      END
      FOR EACH mSubLC.S_IngredientsSection
         IF mSubLC.S_IngredientsSection.PrimaryMLC_ID = ""
            mSubLC.S_IngredientsSection.PrimaryMLC_ID = mSubLC.M_IngredientsSection.ID
         END
         FOR EACH mSubLC.S_IngredientsStatement
            IF mSubLC.S_IngredientsStatement.PrimaryMLC_ID = ""
               mSubLC.S_IngredientsStatement.PrimaryMLC_ID = mSubLC.M_IngredientsStatement.ID
            END
         END
      END
      FOR EACH mSubLC.S_StorageDisposalSection
         IF mSubLC.S_StorageDisposalSection.PrimaryMLC_ID = ""
            mSubLC.S_StorageDisposalSection.PrimaryMLC_ID = mSubLC.M_StorageDisposalSection.ID
         END
         FOR EACH mSubLC.S_StorageDisposalStatement
            IF mSubLC.S_StorageDisposalStatement.PrimaryMLC_ID = ""
               mSubLC.S_StorageDisposalStatement.PrimaryMLC_ID = mSubLC.M_StorageDisposalStatement.ID
            END
         END
      END
      FOR EACH mSubLC.S_DirectionsForUseSection
         IF mSubLC.S_DirectionsForUseSection.PrimaryMLC_ID = ""
            mSubLC.S_DirectionsForUseSection.PrimaryMLC_ID = mSubLC.M_DirectionsForUseSection.ID
         END
         FOR EACH mSubLC.S_DirectionsForUseStatement
            IF mSubLC.S_DirectionsForUseStatement.PrimaryMLC_ID = ""
               mSubLC.S_DirectionsForUseStatement.PrimaryMLC_ID = mSubLC.M_DirectionsForUseStatement.ID
            END
         END
      END
      FOR EACH mSubLC.S_MarketingSection
         IF mSubLC.S_MarketingSection.PrimaryMLC_ID = ""
            mSubLC.S_MarketingSection.PrimaryMLC_ID = mSubLC.M_MarketingSection.ID
         END
         FOR EACH mSubLC.S_MarketingStatement
            IF mSubLC.S_MarketingStatement.PrimaryMLC_ID = ""
               mSubLC.S_MarketingStatement.PrimaryMLC_ID = mSubLC.M_MarketingStatement.ID
            END
         END
      END
      FOR EACH mSubLC.S_HumanHazardSection
         IF mSubLC.S_HumanHazardSection.PrimaryMLC_ID = ""
            mSubLC.S_HumanHazardSection.PrimaryMLC_ID = mSubLC.M_HumanHazardSection.ID
         END
      END
      FOR EACH mSubLC.S_DilutionGroup
         IF mSubLC.S_DilutionGroup.PrimaryMLC_ID = ""
            mSubLC.S_DilutionGroup.PrimaryMLC_ID = mSubLC.M_DilutionGroup.ID
         END
      END
      FOR EACH mSubLC.S_UsageType
         FOR EACH mSubLC.S_Usage
            IF mSubLC.S_Usage.PrimaryMLC_ID = ""
               mSubLC.S_Usage.PrimaryMLC_ID = mSubLC.M_Usage.ID
            END
         END
      END

        // end zOCE_ACTIVATE
   OF   zOCE_ACTIVATE_EMPTY:

        // end zOCE_ACTIVATE_EMPTY
   OF   zOCE_COMMIT:

        // end zOCE_COMMIT
   OF   zOCE_DROPOI:

        // end zOCE_DROPOI
   END  // case

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: dSymbolText
//
/////////////////////////////////////////////////////////////////////////////
DERIVED ATTRIBUTE OPERATION
dSymbolText( VIEW mSubLC BASED ON LOD mSubLC,
             STRING ( 32 ) InternalEntityStructure,
             STRING ( 32 ) InternalAttribStructure,
             SHORT GetOrSetFlag )

   STRING ( 32 )  szEntityName
   STRING ( 3000 ) Text
   STRING ( 2048 ) Footnote
   STRING ( 32 ) Symbol
   
   CASE GetOrSetFlag
   OF   zDERIVED_GET:

        GetEntityNameFromStructure( InternalEntityStructure, szEntityName )
        GetStringFromAttribute( Symbol, mSubLC, szEntityName, "Symbol" )
        GetStringFromAttribute( Footnote, mSubLC, szEntityName, "Text" )
        IF Symbol = ""
           Text = Footnote
        ELSE
           Text = Symbol + " - " + Footnote
        END

        StoreStringInRecord( mSubLC, InternalEntityStructure, InternalAttribStructure, Text )
        RETURN 0

        // end zDERIVED_GET
   OF   zDERIVED_SET:

        // end zDERIVED_SET
   END  // case

END
