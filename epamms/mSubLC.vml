/////////////////////////////////////////////////////////////////////////////
// Project ePamms
//
// This is a part of the ePamms applications package.
// Copyright © 2007 - 2015 Arksoft, Inc.
// All Rights Reserved.
//
// SUBSYSTEM:    mSubLC        - Subregistrant Label Content operations
// FILE:         mSubLC.vml
// AUTHOR:       Doug Sorensen
//
/////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: dFullNameLFM
//
/////////////////////////////////////////////////////////////////////////////
DERIVED ATTRIBUTE OPERATION
dFullNameLFM( VIEW mSubLC BASED ON LOD mSubLC,
              STRING ( 32 ) InternalEntityStructure,
              STRING ( 32 ) InternalAttribStructure,
              SHORT GetOrSetFlag )

   CASE GetOrSetFlag
   OF   zDERIVED_GET:
        PersonName_LastFirstMiddle( mSubLC, InternalEntityStructure,
                                    InternalAttribStructure, GetOrSetFlag )

        /* end zDERIVED_GET */
   OF   zDERIVED_SET:

        /* end zDERIVED_SET */
   END  /* case */

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: dFullNameFML
//
/////////////////////////////////////////////////////////////////////////////
DERIVED ATTRIBUTE OPERATION
dFullNameFML( VIEW mSubLC BASED ON LOD mSubLC,
              STRING ( 32 ) InternalEntityStructure,
              STRING ( 32 ) InternalAttribStructure,
              SHORT GetOrSetFlag )

   CASE GetOrSetFlag
   OF   zDERIVED_GET:
        PersonName_FirstMiddleLast( mSubLC, InternalEntityStructure,
                                    InternalAttribStructure, GetOrSetFlag )
        /* end zDERIVED_GET */
   OF   zDERIVED_SET:

        /* end zDERIVED_SET */
   END  /* case */

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: dSubregNameID
// Subregistrant Name + EPA Company Number
//
/////////////////////////////////////////////////////////////////////////////
DERIVED ATTRIBUTE OPERATION
dSubregNameID( VIEW mSubLC BASED ON LOD mSubLC,
               STRING ( 32 ) InternalEntityStructure,
               STRING ( 32 ) InternalAttribStructure,
               SHORT GetOrSetFlag )

   STRING ( 1000 ) szString

   CASE GetOrSetFlag
   OF   zDERIVED_GET:

      IF mSubLC.SubregOrganization EXISTS
         szString = mSubLC.SubregOrganization.Name
         IF mSubLC.Subregistrant.EPA_CompanyNumber = ""
            szString = szString + " (Non EPA)"
         ELSE
            szString = szString + " (" + mSubLC.Subregistrant.EPA_CompanyNumber + ")"
         END
       ELSE
          szString = ""
       END

       // Store the calculated value in the object.
       StoreStringInRecord( mSubLC,
                            InternalEntityStructure,
                            InternalAttribStructure, szString )
       RETURN 0
        /* end zDERIVED_GET */
   OF   zDERIVED_SET:

        /* end zDERIVED_SET */
   END  /* case */

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: dRegistrantNameID
// Primary Registrant Name + EPA Company Number
//
/////////////////////////////////////////////////////////////////////////////
DERIVED ATTRIBUTE OPERATION
dRegistrantNameID( VIEW mSubLC BASED ON LOD mSubLC,
                   STRING ( 32 ) InternalEntityStructure,
                   STRING ( 32 ) InternalAttribStructure,
                   SHORT GetOrSetFlag )

   STRING ( 1000 ) szString

   CASE GetOrSetFlag
   OF   zDERIVED_GET:

      IF mSubLC.Organization EXISTS
         szString = mSubLC.Organization.Name
         IF mSubLC.PrimaryRegistrant.EPA_CompanyNumber = ""
            szString = szString + " (Non EPA)"
         ELSE
            szString = szString + " (" +
                    mSubLC.PrimaryRegistrant.EPA_CompanyNumber + ")"
         END
       ELSE
          szString = ""
       END

       // Store the calculated value in the object.
       StoreStringInRecord( mSubLC,
                            InternalEntityStructure,
                            InternalAttribStructure, szString )
       RETURN 0
        /* end zDERIVED_GET */
   OF   zDERIVED_SET:

        /* end zDERIVED_SET */
   END  /* case */

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: dIngredientName
//
/////////////////////////////////////////////////////////////////////////////
DERIVED ATTRIBUTE OPERATION
dIngredientName( VIEW mSubLC BASED ON LOD mSubLC,
                 STRING ( 32 ) InternalEntityStructure,
                 STRING ( 32 ) InternalAttribStructure,
                 SHORT GetOrSetFlag )

   STRING ( 1000 ) szString

   CASE GetOrSetFlag
   OF   zDERIVED_GET:

      IF mSubLC.S_IngredientsStatement EXISTS
         szString = mSubLC.S_IngredientsStatement.CommonName
      IF szString = ""
            szString = mSubLC.S_IngredientsStatement.ChemicalName
         END
       ELSE
          szString = ""
       END

       // Store the calculated value in the object.
       StoreStringInRecord( mSubLC,
                            InternalEntityStructure,
                            InternalAttribStructure, szString )
       RETURN 0

        /* end zDERIVED_GET */
   OF   zDERIVED_SET:

        /* end zDERIVED_SET */
   END  /* case */

END



/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: dMasterProductNameNbr
//
/////////////////////////////////////////////////////////////////////////////
DERIVED ATTRIBUTE OPERATION
dMasterProductNameNbr( VIEW mSubLC BASED ON LOD mSubLC,
                       STRING ( 32 ) InternalEntityStructure,
                       STRING ( 32 ) InternalAttribStructure,
                       SHORT GetOrSetFlag )

   STRING ( 1000 ) szString

   CASE GetOrSetFlag
   OF   zDERIVED_GET:

      IF mSubLC.MasterProduct  EXISTS
         szString = mSubLC.MasterProduct.Name + " (" +
                    mSubLC.PrimaryRegistrant.EPA_CompanyNumber + "-" +
                    mSubLC.MasterProduct.Number + ")"
       ELSE
          szString = ""
       END

       // Store the calculated value in the object.
       StoreStringInRecord( mSubLC,
                            InternalEntityStructure,
                            InternalAttribStructure, szString )
       RETURN 0

        /* end zDERIVED_GET */
   OF   zDERIVED_SET:

        /* end zDERIVED_SET */
   END  /* case */

END


/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: dSubregProductNameNbr
//
/////////////////////////////////////////////////////////////////////////////
DERIVED ATTRIBUTE OPERATION
dSubregProductNameNbr( VIEW mSubLC BASED ON LOD mSubLC,
                       STRING ( 32 ) InternalEntityStructure,
                       STRING ( 32 ) InternalAttribStructure,
                       SHORT GetOrSetFlag )

   STRING ( 1000 ) szString

   CASE GetOrSetFlag
   OF   zDERIVED_GET:

       szString = mSubLC.SubregProduct.Name
       IF mSubLC.SubregProduct.Number != 0
          szString = szString + " (" + mSubLC.SubregProduct.Number + ")"
       END

       // Store the calculated value in the object.
       StoreStringInRecord( mSubLC,
                            InternalEntityStructure,
                            InternalAttribStructure, szString )
       RETURN 0
        /* end zDERIVED_GET */
   OF   zDERIVED_SET:

        /* end zDERIVED_SET */
   END  /* case */

END

/////////////////////////////////////////////////////////////////////////////
//    
// OPERATION: dDisplayUsageName
//    
/////////////////////////////////////////////////////////////////////////////
DERIVED ATTRIBUTE OPERATION
dDisplayUsageName( VIEW mSubLC BASED ON LOD mSubLC,
                   STRING ( 32 ) InternalEntityStructure,
                   STRING ( 32 ) InternalAttribStructure,
                   SHORT GetOrSetFlag )

   VIEW mSubLC2 BASED ON LOD mSubLC
   STRING ( 32 )  szEntityName
   STRING ( 100 ) szUsageType
   STRING ( 100 ) szClassification
   STRING ( 100 ) szName
   STRING ( 100 ) szCombinedName
   STRING ( 3 )   szFootnoteNumber
   INTEGER        Count
   
   CASE GetOrSetFlag
   OF   zDERIVED_GET:

      // For a Claim Usage entity, this is the combined name of Classification and Name.
      // For all others, it is simply the name.
      GetEntityNameFromStructure( InternalEntityStructure, szEntityName )
      GetStringFromAttribute( szUsageType, mSubLC, szEntityName, "UsageType" )
      GetStringFromAttribute( szClassification, mSubLC, szEntityName, "ClaimsClassification" )
      GetStringFromAttribute( szName, mSubLC, szEntityName, "Name" )
      IF szUsageType = "C"
         szCombinedName = szClassification + " - " + szName
      ELSE
         szCombinedName = szName
      END
      
      // Set Footnote Number, if footnote exists.
      IF mSubLC.M_UsageFootnoteUsed EXISTS
         IF mSubLC.M_UsageFootnoteUsed.ID != ""
            SET CURSOR FIRST mSubLC.MLC_UsageFootnote WHERE mSubLC.MLC_UsageFootnote.ID = mSubLC.M_UsageFootnoteUsed.ID 
            IF mSubLC.MLC_UsageFootnote.wFootNoteRelativeNumber = ""
               // Relative numbers haven't be set, so set them here.
               CreateViewFromView( mSubLC2, mSubLC )
               Count = 0
               FOR EACH mSubLC2.MLC_UsageFootnote 
                  Count = Count + 1
                  mSubLC2.MLC_UsageFootnote.wFootNoteRelativeNumber = Count
               END
               DropView( mSubLC2 )
            END 
            szFootnoteNumber = mSubLC.MLC_UsageFootnote.wFootNoteRelativeNumber 
            szCombinedName = szCombinedName + "<sup> " + szFootnoteNumber + "</sup>"
         END
      END

      // Store the calculated value in the object.
      StoreStringInRecord( mSubLC,
                           InternalEntityStructure,
                           InternalAttribStructure, szCombinedName )

        /* end zDERIVED_GET */
   OF   zDERIVED_SET:

        /* end zDERIVED_SET */
   END  /* case */

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: BuildNewSLC_Version
//
/////////////////////////////////////////////////////////////////////////////
TRANSFORMATION OPERATION
BuildNewSLC_Version( VIEW NewSLC      BASED ON LOD mSubLC,
                     VIEW PreviousSLC BASED ON LOD mSubLC,
                     VIEW SourceMLC   BASED ON LOD mMasLC,
                     VIEW PreviousMLC BASED ON LOD lMLCASrc )

// STRING ( 10 ) szVersion
   STRING ( 1 )  szEntityFoundFlag

   // Create a new SLC from a previous SLC, tying the new back to the original.

   // Root and single includes
   CREATE ENTITY NewSLC.SubregLabelContent
   SetMatchingAttributesByName( NewSLC, "SubregLabelContent", PreviousSLC, "SubregLabelContent", zSET_NULL )
   SetAttributeFromCurrentDateTime( NewSLC, "SubregLabelContent", "RevisionDate" )
// szVersion = NewSLC.SubregLabelContent.RevisionDate
// NewSLC.SubregLabelContent.Version = szVersion  already done in calling routine
   INCLUDE NewSLC.SubregProduct FROM PreviousSLC.SubregProduct
   INCLUDE NewSLC.SP_SubregLabelContent FROM PreviousSLC.SubregLabelContent
   INCLUDE NewSLC.MasterLabelContent FROM SourceMLC.MasterLabelContent

   // S_Usage
   // Usages come from the MLC.
   FOR EACH SourceMLC.M_Usage
      CREATE ENTITY NewSLC.S_Usage
      SetMatchingAttributesByName( NewSLC, "S_Usage", SourceMLC, "M_Usage", zSET_NULL )
      INCLUDE NewSLC.M_Usage FROM SourceMLC.M_Usage
   END

   // S_GeneralSection
   // General Sections must come entirely from the source MLC.
   FOR EACH SourceMLC.M_GeneralSection
      CREATE ENTITY NewSLC.S_GeneralSection
      SetMatchingAttributesByName( NewSLC, "S_GeneralSection", SourceMLC, "M_GeneralSection", zSET_NULL )
      INCLUDE NewSLC.M_GeneralSection FROM SourceMLC.M_GeneralSection
      FOR EACH SourceMLC.M_GeneralStatement
         CREATE ENTITY NewSLC.S_GeneralStatement
         SetMatchingAttributesByName( NewSLC, "S_GeneralStatement", SourceMLC, "M_GeneralStatement", zSET_NULL )
         INCLUDE NewSLC.M_GeneralStatement FROM SourceMLC.M_GeneralStatement
      END
   END

   // S_IngredientsSection
   // The Ingredients Sections must come entirely from the source MLC.
   FOR EACH SourceMLC.M_IngredientsSection
      CREATE ENTITY NewSLC.S_IngredientsSection
      SetMatchingAttributesByName( NewSLC, "S_IngredientsSection", SourceMLC, "M_IngredientsSection", zSET_NULL )
      INCLUDE NewSLC.M_IngredientsSection FROM SourceMLC.M_IngredientsSection
      FOR EACH SourceMLC.M_IngredientsStatement
         CREATE ENTITY NewSLC.S_IngredientsStatement
         SetMatchingAttributesByName( NewSLC, "S_IngredientsStatement", SourceMLC, "M_IngredientsStatement", zSET_NULL )
         INCLUDE NewSLC.M_IngredientsStatement FROM SourceMLC.M_IngredientsStatement
      END
   END

   // S_StorageDisposalSection
   // StorageDisposal Sections must come from the source MLC, except that, which Sections to use come from the previous SLC.
   FOR EACH PreviousSLC.S_StorageDisposalSection
      SET CURSOR FIRST PreviousMLC.M_StorageDisposalSection WHERE PreviousMLC.M_StorageDisposalSection.ID = PreviousSLC.M_StorageDisposalSection.ID
      IF PreviousMLC.MN_StorageDisposalSection EXISTS
         SET CURSOR FIRST SourceMLC.M_StorageDisposalSection WHERE SourceMLC.M_StorageDisposalSection.ID = PreviousMLC.MN_StorageDisposalSection.ID
         // Now just copy the entries from the MLC StorageDisposal Section.
         CREATE ENTITY NewSLC.S_StorageDisposalSection
         SetMatchingAttributesByName( NewSLC, "S_StorageDisposalSection", SourceMLC, "M_StorageDisposalSection", zSET_NULL )
         INCLUDE NewSLC.M_StorageDisposalSection FROM SourceMLC.M_StorageDisposalSection
         FOR EACH SourceMLC.M_StorageDisposalStatement
            CREATE ENTITY NewSLC.S_StorageDisposalStatement
            SetMatchingAttributesByName( NewSLC, "S_StorageDisposalStatement", SourceMLC, "M_StorageDisposalStatement", zSET_NULL )
            INCLUDE NewSLC.M_StorageDisposalStatement FROM SourceMLC.M_StorageDisposalStatement
         END
      END
   END

   // S_DirectionsForUseSection
   // DirectionsForUse Sections must come from the source MLC, except for the Usages, which come from the previous SLC.
   FOR EACH SourceMLC.M_DirectionsForUseSection
      CREATE ENTITY NewSLC.S_DirectionsForUseSection
      SetMatchingAttributesByName( NewSLC, "S_DirectionsForUseSection", SourceMLC, "M_DirectionsForUseSection", zSET_NULL )
      INCLUDE NewSLC.M_DirectionsForUseSection FROM SourceMLC.M_DirectionsForUseSection
      FOR EACH SourceMLC.M_DirectionsForUseStatement
         CREATE ENTITY NewSLC.S_DirectionsForUseStatement
         SetMatchingAttributesByName( NewSLC, "S_DirectionsForUseStatement", SourceMLC, "M_DirectionsForUseStatement", zSET_NULL )
         INCLUDE NewSLC.M_DirectionsForUseStatement FROM SourceMLC.M_DirectionsForUseStatement
      END

      // Proceed back to PreviousMLC and then to previous SLC to get DirectionsUsages.
      // If a DirectionsForUse section is not in either the previous MLC or the SLC, we'll use the intersection of Usages from the
      // source MLC DirectionsForUse and the SLC.
      szEntityFoundFlag = ""
      IF SourceMLC.MP_DirectionsForUseSection EXISTS
         SET CURSOR FIRST PreviousSLC.M_DirectionsForUseStatement WITHIN PreviousSLC.SubregLabelContent
                    WHERE PreviousSLC.M_DirectionsForUseSection.ID = SourceMLC.MP_DirectionsForUseSection.ID
         IF RESULT >= zCURSOR_SET
            szEntityFoundFlag = "Y"
         END
      END
      IF szEntityFoundFlag = "Y"
         // The previous DirectionsForUse section exists, so get the Usages from the corresponding SLC DirectionsForUse entry that are
         // also in the NewSLC and thereby also in the Source MLC. .
         // The OriginalDirectionsUsage entries, however, will just come directly from the MLC.
         FOR EACH PreviousSLC.S_DirectionsUsage WITHIN PreviousSLC.S_DirectionsForUseSection
            SET CURSOR FIRST NewSLC.S_Usage WHERE NewSLC.S_Usage.UsageType = PreviousSLC.S_DirectionsUsage.UsageType
                                              AND NewSLC.S_Usage.Name = PreviousSLC.S_DirectionsUsage.Name
            IF RESULT >= zCURSOR_SET
               CREATE ENTITY NewSLC.S_DirectionsUsageOrdering
               INCLUDE NewSLC.S_DirectionsUsage FROM NewSLC.S_Usage
            END
         END
         /*FOR EACH SourceMLC.M_DirectionsUsage WITHIN SourceMLC.M_DirectionsForUseSection
            SET CURSOR FIRST NewSLC.S_Usage WHERE NewSLC.S_Usage.UsageType = SourceMLC.M_DirectionsUsage.UsageType
                                              AND NewSLC.S_Usage.Name = SourceMLC.M_DirectionsUsage.Name
            IF RESULT >= zCURSOR_SET
               CREATE ENTITY NewSLC.S_OriginalDirectionUsageOrdering
               INCLUDE NewSLC.S_OriginalDirectionsUsage FROM NewSLC.S_Usage
            END
         END*/
      ELSE
         // The previous DirectionsForUse section does not exist, so use the DirectionsUsages that are defined to the MLC for both the new
         // DirectionsForUse entries and the OriginalDirectionsUsage entries.
         FOR EACH SourceMLC.M_DirectionsUsage WITHIN SourceMLC.M_DirectionsForUseSection
            SET CURSOR FIRST NewSLC.S_Usage WHERE NewSLC.S_Usage.UsageType = SourceMLC.M_DirectionsUsage.UsageType
                                              AND NewSLC.S_Usage.Name = SourceMLC.M_DirectionsUsage.Name
            IF RESULT >= zCURSOR_SET
               CREATE ENTITY NewSLC.S_DirectionsUsageOrdering
               INCLUDE NewSLC.S_DirectionsUsage         FROM NewSLC.S_Usage
               //CREATE ENTITY NewSLC.S_OriginalDirectionUsageOrdering
               //INCLUDE NewSLC.S_OriginalDirectionsUsage FROM NewSLC.S_Usage
            END
         END
      END
   END

   // S_MarketingSection
   // Marketing Sections come from the previous SLC.
   // However, we only build sections and statements that are also in the source MLC.
   FOR EACH PreviousSLC.S_MarketingSection
      SET CURSOR FIRST PreviousMLC.M_MarketingSection WHERE PreviousMLC.M_MarketingSection.ID = PreviousSLC.M_MarketingSection.ID
      IF PreviousMLC.MN_MarketingSection EXISTS
         SET CURSOR FIRST SourceMLC.M_MarketingSection WHERE SourceMLC.M_MarketingSection.ID = PreviousMLC.MN_MarketingSection.ID
         CREATE ENTITY NewSLC.S_MarketingSection
         SetMatchingAttributesByName( NewSLC, "S_MarketingSection", SourceMLC, "M_MarketingSection", zSET_NULL )
         INCLUDE NewSLC.M_MarketingSection FROM SourceMLC.M_MarketingSection
         INCLUDE NewSLC.SP_MarketingSection FROM PreviousSLC.S_MarketingSection

         // Statements
         FOR EACH PreviousSLC.S_MarketingStatement
            SET CURSOR FIRST PreviousMLC.M_MarketingStatement WHERE PreviousMLC.M_MarketingStatement.ID = PreviousSLC.M_MarketingStatement.ID
            IF PreviousMLC.MN_MarketingStatement EXISTS
               SET CURSOR FIRST SourceMLC.M_MarketingStatement WHERE SourceMLC.M_MarketingStatement.ID = PreviousMLC.MN_MarketingStatement.ID
               CREATE ENTITY NewSLC.S_MarketingStatement
               SetMatchingAttributesByName( NewSLC, "S_MarketingStatement", SourceMLC, "M_MarketingStatement", zSET_NULL )
               INCLUDE NewSLC.M_MarketingStatement FROM SourceMLC.M_MarketingStatement
               INCLUDE NewSLC.SP_MarketingStatement FROM PreviousSLC.S_MarketingStatement
            END
         END

         // Usages
         // Recreate only MarketingUsages that are in the NewSLC and thereby also in the Source MLC.
         // The OriginalMarketingUsage entries, however, will just come directly from the MLC.
         FOR EACH PreviousSLC.S_MarketingUsage WITHIN PreviousSLC.S_MarketingSection
            SET CURSOR FIRST NewSLC.S_Usage WHERE NewSLC.S_Usage.UsageType = PreviousSLC.S_MarketingUsage.UsageType
                                              AND NewSLC.S_Usage.Name = PreviousSLC.S_MarketingUsage.Name
            IF RESULT >= zCURSOR_SET
               CREATE ENTITY NewSLC.S_MarketingUsageOrdering
               INCLUDE NewSLC.S_MarketingUsage FROM NewSLC.S_Usage
            END
         END
         /*FOR EACH SourceMLC.M_MarketingUsage WITHIN SourceMLC.M_MarketingSection
            SET CURSOR FIRST NewSLC.S_Usage WHERE NewSLC.S_Usage.UsageType = SourceMLC.M_MarketingUsage.UsageType
                                              AND NewSLC.S_Usage.Name = SourceMLC.M_MarketingUsage.Name
            IF RESULT >= zCURSOR_SET
               CREATE ENTITY NewSLC.S_OriginalMarketingUsageOrdering
               INCLUDE NewSLC.S_OriginalMarketingUsage FROM NewSLC.S_Usage
            END
         END*/
      END
   END

   // S_HumanHazardSection
   // The HumanHazard Sections must come entirely from the source MLC.
   FOR EACH SourceMLC.M_HumanHazardSection
      CREATE ENTITY NewSLC.S_HumanHazardSection
      SetMatchingAttributesByName( NewSLC, "S_HumanHazardSection", SourceMLC, "M_HumanHazardSection", zSET_NULL )
      INCLUDE NewSLC.M_HumanHazardSection FROM SourceMLC.M_HumanHazardSection
   END

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: DuplicateSLC
//
/////////////////////////////////////////////////////////////////////////////
TRANSFORMATION OPERATION
DuplicateSLC( VIEW NewSLC      BASED ON LOD mSubLC,
              VIEW PreviousSLC BASED ON LOD mSubLC )

// STRING ( 10 ) szVersion
   STRING ( 1 )  szEntityFoundFlag

   // Create a new SLC from a previous SLC, tying the new back to the original.
   // This differs from BuildNewSLC_Version in that the new SLC created here is tied back to the
   // same MLC as the source SLC.

   // Root and single includes
   CREATE ENTITY NewSLC.SubregLabelContent
   SetMatchingAttributesByName( NewSLC, "SubregLabelContent", PreviousSLC, "SubregLabelContent", zSET_NULL )
   SetAttributeFromCurrentDateTime( NewSLC, "SubregLabelContent", "RevisionDate" )
   NewSLC.SubregLabelContent.Description = PreviousSLC.SubregLabelContent.Description + " (Duplicate)"
   INCLUDE NewSLC.SubregProduct FROM PreviousSLC.SubregProduct
   INCLUDE NewSLC.MasterLabelContent FROM PreviousSLC.MasterLabelContent

   // S_Usage
   FOR EACH PreviousSLC.S_UsageType 
      CREATE ENTITY NewSLC.S_UsageType 
      SetMatchingAttributesByName( NewSLC, "S_UsageType", PreviousSLC, "S_UsageType", zSET_NULL )
      FOR EACH PreviousSLC.S_Usage 
         CREATE ENTITY NewSLC.S_Usage
         SetMatchingAttributesByName( NewSLC, "S_Usage", PreviousSLC, "S_Usage", zSET_NULL )
         INCLUDE NewSLC.M_Usage FROM PreviousSLC.M_Usage 
      END 
   END

   // S_GeneralSection
   FOR EACH PreviousSLC.S_GeneralSection 
      CREATE ENTITY NewSLC.S_GeneralSection 
      SetMatchingAttributesByName( NewSLC, "S_GeneralSection", PreviousSLC, "S_GeneralSection", zSET_NULL )
      INCLUDE NewSLC.M_GeneralSection FROM PreviousSLC.M_GeneralSection
      FOR EACH PreviousSLC.S_GeneralStatement
         CREATE ENTITY NewSLC.S_GeneralStatement
         SetMatchingAttributesByName( NewSLC, "S_GeneralStatement", PreviousSLC, "S_GeneralStatement", zSET_NULL )
         INCLUDE NewSLC.M_GeneralStatement FROM PreviousSLC.M_GeneralStatement
      END
   END

   // S_IngredientsSection
   FOR EACH PreviousSLC.S_IngredientsSection
      CREATE ENTITY NewSLC.S_IngredientsSection
      SetMatchingAttributesByName( NewSLC, "S_IngredientsSection", PreviousSLC, "S_IngredientsSection", zSET_NULL )
      INCLUDE NewSLC.M_IngredientsSection FROM PreviousSLC.M_IngredientsSection
      FOR EACH PreviousSLC.S_IngredientsStatement
         CREATE ENTITY NewSLC.S_IngredientsStatement
         SetMatchingAttributesByName( NewSLC, "S_IngredientsStatement", PreviousSLC, "S_IngredientsStatement", zSET_NULL )
         INCLUDE NewSLC.M_IngredientsStatement FROM PreviousSLC.M_IngredientsStatement
      END
   END

   // S_StorageDisposalSection
   FOR EACH PreviousSLC.S_StorageDisposalSection
      CREATE ENTITY NewSLC.S_StorageDisposalSection
      SetMatchingAttributesByName( NewSLC, "S_StorageDisposalSection", PreviousSLC, "S_StorageDisposalSection", zSET_NULL )
      INCLUDE NewSLC.M_StorageDisposalSection FROM PreviousSLC.M_StorageDisposalSection
      FOR EACH PreviousSLC.S_StorageDisposalStatement
         CREATE ENTITY NewSLC.S_StorageDisposalStatement
         SetMatchingAttributesByName( NewSLC, "S_StorageDisposalStatement", PreviousSLC, "S_StorageDisposalStatement", zSET_NULL )
         INCLUDE NewSLC.M_StorageDisposalStatement FROM PreviousSLC.M_StorageDisposalStatement
      END
   END

   // S_DirectionsForUseSection
   FOR EACH PreviousSLC.S_DirectionsForUseSection
      CREATE ENTITY NewSLC.S_DirectionsForUseSection
      SetMatchingAttributesByName( NewSLC, "S_DirectionsForUseSection", PreviousSLC, "S_DirectionsForUseSection", zSET_NULL )
      INCLUDE NewSLC.M_DirectionsForUseSection FROM PreviousSLC.M_DirectionsForUseSection
      FOR EACH PreviousSLC.S_DirectionsForUseStatement
         CREATE ENTITY NewSLC.S_DirectionsForUseStatement
         SetMatchingAttributesByName( NewSLC, "S_DirectionsForUseStatement", PreviousSLC, "S_DirectionsForUseStatement", zSET_NULL )
         INCLUDE NewSLC.M_DirectionsForUseStatement FROM PreviousSLC.M_DirectionsForUseStatement
         
         // UsageOrder entries
         FOR EACH PreviousSLC.S_DirectionsUsageOrdering 
            CREATE ENTITY NewSLC.S_DirectionsUsageOrdering 
            SetMatchingAttributesByName( NewSLC, "S_DirectionsUsageOrdering", PreviousSLC, "S_DirectionsUsageOrdering", zSET_NULL )
            
            // We need to include the new S_Usage entry created in the NewSLC.
            SET CURSOR FIRST PreviousSLC.S_Usage WITHIN NewSLC.SubregLabelContent 
                       WHERE PreviousSLC.S_Usage.ID = PreviousSLC.S_DirectionsUsage.ID 
            IF RESULT >= zCURSOR_SET
               SET CURSOR FIRST NewSLC.M_Usage WITHIN NewSLC.SubregLabelContent 
                          WHERE NewSLC.M_Usage.ID = PreviousSLC.M_Usage.ID 
               IF RESULT >= zCURSOR_SET
                  INCLUDE NewSLC.S_DirectionsUsage FROM NewSLC.S_Usage 
               END
            END 
         END
      END
      
      // We need to include any NewSLC.S_ClaimsDrivingUsage from the S_Usage entry created in the NewSLC.
      FOR EACH PreviousSLC.S_ClaimsDrivingUsage 
         SET CURSOR FIRST PreviousSLC.S_Usage WITHIN PreviousSLC.SubregLabelContent 
                    WHERE PreviousSLC.S_Usage.ID = PreviousSLC.S_ClaimsDrivingUsage.ID
         IF RESULT >= zCURSOR_SET
            SET CURSOR FIRST NewSLC.M_Usage WITHIN NewSLC.SubregLabelContent 
                       WHERE NewSLC.M_Usage.ID = PreviousSLC.M_Usage.ID 
            IF RESULT >= zCURSOR_SET
               INCLUDE NewSLC.S_ClaimsDrivingUsage FROM NewSLC.S_Usage 
            END
         END
      END
   END
   
   // S_MarketingSection
   FOR EACH PreviousSLC.S_MarketingSection
      CREATE ENTITY NewSLC.S_MarketingSection
      SetMatchingAttributesByName( NewSLC, "S_MarketingSection", PreviousSLC, "S_MarketingSection", zSET_NULL )
      INCLUDE NewSLC.M_MarketingSection FROM PreviousSLC.M_MarketingSection
      FOR EACH PreviousSLC.S_MarketingStatement
         CREATE ENTITY NewSLC.S_MarketingStatement
         SetMatchingAttributesByName( NewSLC, "S_MarketingStatement", PreviousSLC, "S_MarketingStatement", zSET_NULL )
         INCLUDE NewSLC.M_MarketingStatement FROM PreviousSLC.M_MarketingStatement
         
         // UsageOrder entries
         FOR EACH PreviousSLC.S_MarketingUsageOrdering 
            CREATE ENTITY NewSLC.S_MarketingUsageOrdering 
            SetMatchingAttributesByName( NewSLC, "S_MarketingUsageOrdering", PreviousSLC, "S_MarketingUsageOrdering", zSET_NULL )
            
            // We need to include the new S_Usage entry created in the NewSLC.
            SET CURSOR FIRST PreviousSLC.S_Usage WITHIN PreviousSLC.SubregLabelContent 
                       WHERE PreviousSLC.S_Usage.ID = PreviousSLC.S_MarketingUsage.ID 
            IF RESULT >= zCURSOR_SET
               SET CURSOR FIRST NewSLC.M_Usage WITHIN NewSLC.SubregLabelContent 
                          WHERE NewSLC.M_Usage.ID = PreviousSLC.M_Usage.ID 
               IF RESULT >= zCURSOR_SET
                  INCLUDE NewSLC.S_MarketingUsage FROM NewSLC.S_Usage 
               END
            END 
         END
      END
   END


   // S_HumanHazardSection
   FOR EACH PreviousSLC.S_HumanHazardSection 
      CREATE ENTITY NewSLC.S_HumanHazardSection
      SetMatchingAttributesByName( NewSLC, "S_HumanHazardSection", PreviousSLC, "S_HumanHazardSection", zSET_NULL )
      INCLUDE NewSLC.M_HumanHazardSection FROM PreviousSLC.M_HumanHazardSection
   END

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: BuildSLC_FromMLC
//
/////////////////////////////////////////////////////////////////////////////
TRANSFORMATION OPERATION
BuildSLC_FromMLC( VIEW NewSLC    BASED ON LOD mSubLC,
                  VIEW SourceMLC BASED ON LOD mMasLC )

   STRING ( 32 ) szVersion

// IssueError( NewSLC, 0, 0, "Start of Build SLC" )

   // Create a new SLC from an MLC and tie it back to the MLC.

   // It is assumed that the root entity (SubregLabelContent) and that Subreg Product
   // includes have been set up prior to execution of this operation.
   IF NewSLC.MasterLabelContent DOES NOT EXIST
      INCLUDE NewSLC.MasterLabelContent FROM SourceMLC.MasterLabelContent
   END

   // Usage Entries ... Surface, Application Type, Area of Use, Organism Claim
   FOR EACH SourceMLC.M_UsageType
      CREATE ENTITY NewSLC.S_UsageType
      SetMatchingAttributesByName( NewSLC, "S_UsageType", SourceMLC, "M_UsageType", zSET_NULL )
      FOR EACH SourceMLC.M_Usage
         CREATE ENTITY NewSLC.S_Usage
         SetMatchingAttributesByName( NewSLC, "S_Usage", SourceMLC, "M_Usage", zSET_NULL )
         INCLUDE NewSLC.M_Usage FROM SourceMLC.M_Usage
         TraceLineI( "#### Build S_Usage: ", NewSLC.M_Usage.ID )
      END
   END

   // General Section ... Precautionary, First Aid, Other Hazard
   FOR EACH SourceMLC.M_GeneralSection
      CREATE ENTITY NewSLC.S_GeneralSection
      SetMatchingAttributesByName( NewSLC, "S_GeneralSection", SourceMLC, "M_GeneralSection", zSET_NULL )
      INCLUDE NewSLC.M_GeneralSection FROM SourceMLC.M_GeneralSection
      FOR EACH SourceMLC.M_GeneralStatement
         CREATE ENTITY NewSLC.S_GeneralStatement
         SetMatchingAttributesByName( NewSLC, "S_GeneralStatement", SourceMLC, "M_GeneralStatement", zSET_NULL )
         INCLUDE NewSLC.M_GeneralStatement FROM SourceMLC.M_GeneralStatement
      END
   END

   // Ingredients Section
   FOR EACH SourceMLC.M_IngredientsSection
      CREATE ENTITY NewSLC.S_IngredientsSection
      SetMatchingAttributesByName( NewSLC, "S_IngredientsSection", SourceMLC, "M_IngredientsSection", zSET_NULL )
      INCLUDE NewSLC.M_IngredientsSection FROM SourceMLC.M_IngredientsSection
      FOR EACH SourceMLC.M_IngredientsStatement
         CREATE ENTITY NewSLC.S_IngredientsStatement
         SetMatchingAttributesByName( NewSLC, "S_IngredientsStatement", SourceMLC, "M_IngredientsStatement", zSET_NULL )
         INCLUDE NewSLC.M_IngredientsStatement FROM SourceMLC.M_IngredientsStatement
      END
   END

   // StorageDisposal Section
   FOR EACH SourceMLC.M_StorageDisposalSection
      CREATE ENTITY NewSLC.S_StorageDisposalSection
      SetMatchingAttributesByName( NewSLC, "S_StorageDisposalSection", SourceMLC, "M_StorageDisposalSection", zSET_NULL )
      INCLUDE NewSLC.M_StorageDisposalSection FROM SourceMLC.M_StorageDisposalSection
      FOR EACH SourceMLC.M_StorageDisposalStatement
         CREATE ENTITY NewSLC.S_StorageDisposalStatement
         SetMatchingAttributesByName( NewSLC, "S_StorageDisposalStatement", SourceMLC, "M_StorageDisposalStatement", zSET_NULL )
         INCLUDE NewSLC.M_StorageDisposalStatement FROM SourceMLC.M_StorageDisposalStatement
      END
   END

   // DirectionsForUse Section
   FOR EACH SourceMLC.M_DirectionsForUseSection
      CREATE ENTITY NewSLC.S_DirectionsForUseSection
      SetMatchingAttributesByName( NewSLC, "S_DirectionsForUseSection", SourceMLC, "M_DirectionsForUseSection", zSET_NULL )
      INCLUDE NewSLC.M_DirectionsForUseSection FROM SourceMLC.M_DirectionsForUseSection
      FOR EACH SourceMLC.M_DirectionsForUseStatement
         CREATE ENTITY NewSLC.S_DirectionsForUseStatement
         SetMatchingAttributesByName( NewSLC, "S_DirectionsForUseStatement", SourceMLC, "M_DirectionsForUseStatement", zSET_NULL )
         IF NewSLC.S_DirectionsForUseStatement.NotForUseType = ""
            NewSLC.S_DirectionsForUseStatement.NotForUseType = "NA"    // This attribute is currently required in the ER.         
         END
         INCLUDE NewSLC.M_DirectionsForUseStatement FROM SourceMLC.M_DirectionsForUseStatement
      END

      FOR EACH SourceMLC.M_DirectionsUsageOrdering 
         SET CURSOR FIRST NewSLC.S_Usage WHERE NewSLC.S_Usage.UsageType            = SourceMLC.M_DirectionsUsage.UsageType
                                           AND NewSLC.S_Usage.ClaimsClassification = SourceMLC.M_DirectionsUsage.ClaimsClassification 
                                           AND NewSLC.S_Usage.Name                 = SourceMLC.M_DirectionsUsage.Name
         IF RESULT >= zCURSOR_SET
            CREATE ENTITY NewSLC.S_DirectionsUsageOrdering
            INCLUDE NewSLC.S_DirectionsUsage FROM NewSLC.S_Usage
            //CREATE ENTITY NewSLC.S_OriginalDirectionUsageOrdering
            //INCLUDE NewSLC.S_OriginalDirectionsUsage FROM NewSLC.S_Usage
         END
      END
   END

   // Marketing Section
   FOR EACH SourceMLC.M_MarketingSection
      CREATE ENTITY NewSLC.S_MarketingSection
      SetMatchingAttributesByName( NewSLC, "S_MarketingSection", SourceMLC, "M_MarketingSection", zSET_NULL )
      INCLUDE NewSLC.M_MarketingSection FROM SourceMLC.M_MarketingSection
      FOR EACH SourceMLC.M_MarketingStatement
         CREATE ENTITY NewSLC.S_MarketingStatement
         SetMatchingAttributesByName( NewSLC, "S_MarketingStatement", SourceMLC, "M_MarketingStatement", zSET_NULL )
         INCLUDE NewSLC.M_MarketingStatement FROM SourceMLC.M_MarketingStatement
      END

      FOR EACH SourceMLC.M_MarketingUsage WITHIN SourceMLC.M_MarketingSection
         SET CURSOR FIRST NewSLC.S_Usage WHERE NewSLC.S_Usage.UsageType            = SourceMLC.M_MarketingUsage.UsageType
                                           AND NewSLC.S_Usage.ClaimsClassification = SourceMLC.M_MarketingUsage.ClaimsClassification
                                           AND NewSLC.S_Usage.Name                 = SourceMLC.M_MarketingUsage.Name
         IF RESULT >= zCURSOR_SET
            CREATE ENTITY NewSLC.S_MarketingUsageOrdering
            INCLUDE NewSLC.S_MarketingUsage FROM NewSLC.S_Usage
            //CREATE ENTITY NewSLC.S_OriginalMarketingUsageOrdering
            //INCLUDE NewSLC.S_OriginalMarketingUsage FROM NewSLC.S_Usage
         END
      END
   END

   // HumanHazard Section
   FOR EACH SourceMLC.M_HumanHazardSection
      CREATE ENTITY NewSLC.S_HumanHazardSection
      SetMatchingAttributesByName( NewSLC, "S_HumanHazardSection", SourceMLC, "M_HumanHazardSection", zSET_NULL )
      INCLUDE NewSLC.M_HumanHazardSection FROM SourceMLC.M_HumanHazardSection
   END

END

/////////////////////////////////////////////////////////////////////////////
//    
// OPERATION: RefreshSLC_FromMLC
//    
/////////////////////////////////////////////////////////////////////////////
TRANSFORMATION OPERATION
RefreshSLC_FromMLC( VIEW mSubLC BASED ON LOD mSubLC,
                    VIEW mMasLC BASED ON LOD mMasLC )

   // Refresh SLC component values from the values in the corresponding MLC.
   FOR EACH mSubLC.S_Usage 
      SET CURSOR FIRST mMasLC.M_Usage WHERE mMasLC.M_Usage.ID = mSubLC.M_Usage.ID 
      IF RESULT >= zCURSOR_SET
         mSubLC.S_Usage.Name = mMasLC.M_Usage.Name 
      ELSE
         TraceLineS( "#### No Match on Usage", "" )
      END 
   END
   
   // Rebuild General Section entries.
   FOR EACH mSubLC.S_GeneralSection 
      DELETE ENTITY mSubLC.S_GeneralSection NONE 
   END
   FOR EACH mMasLC.M_GeneralSection 
      CREATE ENTITY mSubLC.S_GeneralSection 
      SetMatchingAttributesByName( mSubLC, "S_GeneralSection", mMasLC, "M_GeneralSection", zSET_NULL )
      INCLUDE mSubLC.M_GeneralSection FROM mMasLC.M_GeneralSection 
      FOR EACH mMasLC.M_GeneralStatement 
         CREATE ENTITY mSubLC.S_GeneralStatement 
         SetMatchingAttributesByName( mSubLC, "S_GeneralStatement", mMasLC, "M_GeneralStatement", zSET_NULL )
         INCLUDE mSubLC.M_GeneralStatement FROM mMasLC.M_GeneralStatement 
      END 
   END
   
   // Rebuild Ingredients Section entries.
   FOR EACH mSubLC.S_IngredientsSection 
      DELETE ENTITY mSubLC.S_IngredientsSection NONE 
   END
   FOR EACH mMasLC.M_IngredientsSection 
      CREATE ENTITY mSubLC.S_IngredientsSection 
      SetMatchingAttributesByName( mSubLC, "S_IngredientsSection", mMasLC, "M_IngredientsSection", zSET_NULL )
      INCLUDE mSubLC.M_IngredientsSection FROM mMasLC.M_IngredientsSection 
      FOR EACH mMasLC.M_IngredientsStatement 
         CREATE ENTITY mSubLC.S_IngredientsStatement 
         SetMatchingAttributesByName( mSubLC, "S_IngredientsStatement", mMasLC, "M_IngredientsStatement", zSET_NULL )
         INCLUDE mSubLC.M_IngredientsStatement FROM mMasLC.M_IngredientsStatement 
      END 
   END
   
   // Rebuild Storage and Disposal entries.
   FOR EACH mSubLC.S_StorageDisposalSection 
      DELETE ENTITY mSubLC.S_StorageDisposalSection NONE 
   END
   FOR EACH mMasLC.M_StorageDisposalSection 
      CREATE ENTITY mSubLC.S_StorageDisposalSection 
      SetMatchingAttributesByName( mSubLC, "S_StorageDisposalSection", mMasLC, "M_StorageDisposalSection", zSET_NULL )
      INCLUDE mSubLC.M_StorageDisposalSection FROM mMasLC.M_StorageDisposalSection 
      FOR EACH mMasLC.M_StorageDisposalStatement 
         CREATE ENTITY mSubLC.S_StorageDisposalStatement 
         SetMatchingAttributesByName( mSubLC, "S_StorageDisposalStatement", mMasLC, "M_StorageDisposalStatement", zSET_NULL )
         INCLUDE mSubLC.M_StorageDisposalStatement FROM mMasLC.M_StorageDisposalStatement 
      END 
   END
   
   // Delete any Directions for Use Sections in SLC not in MLC.
   FOR EACH mSubLC.S_DirectionsForUseSection 
      IF mSubLC.M_DirectionsForUseSection DOES NOT EXIST
         DELETE ENTITY mSubLC.S_DirectionsForUseSection NONE 
      END
   END
   
   // Add/Refresh SLC Directions for Use Sections.
   FOR EACH mSubLC.S_DirectionsForUseSection 
      SET CURSOR FIRST mMasLC.M_DirectionsForUseSection WHERE mMasLC.M_DirectionsForUseSection.ID = mSubLC.M_DirectionsForUseSection.ID 
      IF RESULT >= zCURSOR_SET
         FOR EACH mSubLC.S_DirectionsForUseStatement
            SET CURSOR FIRST mMasLC.M_DirectionsForUseStatement WHERE mMasLC.M_DirectionsForUseStatement.ID = mSubLC.M_DirectionsForUseStatement.ID 
            IF RESULT >= zCURSOR_SET
               mSubLC.S_DirectionsForUseStatement.Text = mMasLC.M_DirectionsForUseStatement.Text 
            END
         END
         
         // Add Usage Entries, if they don't already exist.
         IF mMasLC.M_DirectionsUsageOrdering EXISTS AND mSubLC.S_DirectionsUsageOrdering DOES NOT EXIST
            FOR EACH mMasLC.M_DirectionsUsageOrdering 
               CREATE ENTITY mSubLC.S_DirectionsUsageOrdering
               SET CURSOR FIRST mSubLC.M_Usage WITHIN mSubLC.SubregLabelContent 
                          WHERE mSubLC.M_Usage.ID = mMasLC.M_DirectionsUsage.ID 
               IF RESULT < zCURSOR_SET
                  CREATE ENTITY mSubLC.S_Usage 
                  SetMatchingAttributesByName( mSubLC, "S_Usage", mMasLC, "M_DirectionsUsage", zSET_NULL ) 
               END
               INCLUDE mSubLC.S_DirectionsUsage FROM mSubLC.S_Usage 
            END
         END
      END
   END
   
   // Delete any Marketing Sections in SLC not in MLC.
   FOR EACH mSubLC.S_MarketingSection 
      IF mSubLC.M_MarketingSection DOES NOT EXIST
         DELETE ENTITY mSubLC.S_MarketingSection NONE 
      END
   END
   
   // Add/Refresh SLC Marketing Sections.
   FOR EACH mSubLC.S_MarketingSection 
      SET CURSOR FIRST mMasLC.M_MarketingSection WHERE mMasLC.M_MarketingSection.ID = mSubLC.M_MarketingSection.ID 
      IF RESULT >= zCURSOR_SET
         FOR EACH mSubLC.S_MarketingStatement
            SET CURSOR FIRST mMasLC.M_MarketingStatement WHERE mMasLC.M_MarketingStatement.ID = mSubLC.M_MarketingStatement.ID 
            IF RESULT >= zCURSOR_SET
               mSubLC.S_MarketingStatement.Text = mMasLC.M_MarketingStatement.Text 
            END
         END
         
         // Add Usage Entries, if they don't already exist.
         IF mMasLC.M_MarketingUsageOrdering EXISTS AND mSubLC.S_MarketingUsageOrdering DOES NOT EXIST
            FOR EACH mMasLC.M_MarketingUsageOrdering 
               CREATE ENTITY mSubLC.S_MarketingUsageOrdering
               SET CURSOR FIRST mSubLC.M_Usage WITHIN mSubLC.SubregLabelContent 
                          WHERE mSubLC.M_Usage.ID = mMasLC.M_MarketingUsage.ID 
               IF RESULT < zCURSOR_SET
                  CREATE ENTITY mSubLC.S_Usage 
                  SetMatchingAttributesByName( mSubLC, "S_Usage", mMasLC, "M_MarketingUsage", zSET_NULL ) 
               END
               INCLUDE mSubLC.S_MarketingUsage FROM mSubLC.S_Usage 
            END
         END
      END
   END

END

/////////////////////////////////////////////////////////////////////////////
//    
// OPERATION: BuildWorkVariables
//    
/////////////////////////////////////////////////////////////////////////////
TRANSFORMATION OPERATION
BuildWorkVariables( VIEW mSubLC BASED ON LOD mSubLC,
                    VIEW mMasLC BASED ON LOD mMasLC )

   // Build any work variable for the mSubLC.
   
   // Build list of Directions for Use Section Driving Usage entries by selecting the Driving Usage entries
   // from the MLC that have been selected for the SLC.
   FOR EACH mSubLC.S_DirectionsForUseSection 
      SET CURSOR FIRST mMasLC.M_DirectionsForUseSection WHERE mMasLC.M_DirectionsForUseSection.ID = mSubLC.M_DirectionsForUseSection.ID 
      IF RESULT < zCURSOR_SET
         IssueError( mSubLC,0,0,"Programming Error in BuildWorkVariables" )
      END 
      FOR EACH mMasLC.M_DrivingUsage 
         SET CURSOR FIRST mSubLC.M_Usage WITHIN mSubLC.SubregLabelContent 
                    WHERE mSubLC.M_Usage.ID = mMasLC.M_DrivingUsage.ID 
         IF RESULT >= zCURSOR_SET
            INCLUDE mSubLC.S_ClaimsDrivingUsage FROM mSubLC.S_Usage
         END
      END
   END
   
   // Build list of Directions for Use Statement Usage entries by selecting the Statement Usage entries
   // from the MLC that have been selected for the SLC.
   FOR EACH mSubLC.S_DirectionsForUseStatement WITHIN mSubLC.SubregLabelContent 
      SET CURSOR FIRST mMasLC.M_DirectionsForUseStatement WITHIN mMasLC.MasterLabelContent 
                 WHERE mMasLC.M_DirectionsForUseStatement.ID = mSubLC.M_DirectionsForUseStatement.ID 
      IF RESULT < zCURSOR_SET
         IssueError( mSubLC,0,0,"Programming Error 2 in BuildWorkVariables" )
      END 
      FOR EACH mMasLC.M_DirectionsUsageOrdering 
         SET CURSOR FIRST mSubLC.M_Usage WITHIN mSubLC.SubregLabelContent 
                    WHERE mSubLC.M_Usage.ID = mMasLC.M_DirectionsUsage.ID 
         IF RESULT >= zCURSOR_SET
            INCLUDE mSubLC.S_SelectableDirsForUseUsage FROM mSubLC.S_Usage
         END
      END
   END
   
   // Build list of Marketing Statement Usage entries by selecting the Statement Usage entries
   // from the MLC that have been selected for the SLC.
   FOR EACH mSubLC.S_MarketingStatement WITHIN mSubLC.SubregLabelContent 
      SET CURSOR FIRST mMasLC.M_MarketingStatement WITHIN mMasLC.MasterLabelContent 
                 WHERE mMasLC.M_MarketingStatement.ID = mSubLC.M_MarketingStatement.ID 
      IF RESULT < zCURSOR_SET
         IssueError( mSubLC,0,0,"Programming Error 3 in BuildWorkVariables" )
      END 
      FOR EACH mMasLC.M_MarketingUsageOrdering 
         SET CURSOR FIRST mSubLC.M_Usage WITHIN mSubLC.SubregLabelContent 
                    WHERE mSubLC.M_Usage.ID = mMasLC.M_MarketingUsage.ID 
         IF RESULT >= zCURSOR_SET
            INCLUDE mSubLC.S_SelectableMarketingUsage FROM mSubLC.S_Usage
         END
      END
   END

END

/////////////////////////////////////////////////////////////////////////////
//    
// OPERATION: BuildCompositeEntries
//    
/////////////////////////////////////////////////////////////////////////////
TRANSFORMATION OPERATION
BuildCompositeEntries( VIEW mSubLC BASED ON LOD mSubLC )

   //STRING ( 100 )   szCompositeLocation
   STRING ( 4000 )  szDisplayValue
   STRING ( 4000 )  szOriginalDisplayValue
   INTEGER          MaxDisplayLength
   INTEGER          OriginalStringLength

   // Build the flat display of all components subobject.
   MaxDisplayLength = 100
   
   // First clear any current entries.
   FOR EACH mSubLC.CompositeComponentList
      DELETE ENTITY mSubLC.CompositeComponentList NONE 
   END
   
   // Marketing Section and Statements.
   FOR EACH mSubLC.S_MarketingSection 
      CREATE ENTITY mSubLC.CompositeComponentList 
      mSubLC.CompositeComponentList.Type               = "M_MarketingSection"
      mSubLC.CompositeComponentList.SelectLevel        = 1
      mSubLC.CompositeComponentList.DisplayType        = "Section"
      mSubLC.CompositeComponentList.DisplayTypeIndent  = "Section"
      mSubLC.CompositeComponentList.OriginalTypeID     = mSubLC.M_MarketingSection.ID 
      mSubLC.CompositeComponentList.SLC_OriginalTypeID = mSubLC.S_MarketingSection.ID
      IF mSubLC.S_MarketingSection.Title != ""
         IF mSubLC.S_MarketingSection.Name = ""
            mSubLC.CompositeComponentList.DisplayValue = mSubLC.S_MarketingSection.Title
         ELSE
            mSubLC.CompositeComponentList.DisplayValue = mSubLC.S_MarketingSection.Name + " - " +
                                                         mSubLC.S_MarketingSection.Title 
         END
      ELSE
         mSubLC.CompositeComponentList.DisplayValue = mSubLC.S_MarketingSection.Name 
      END
      mSubLC.CompositeComponentList.Value              = mSubLC.CompositeComponentList.DisplayValue
      
      FOR EACH mSubLC.S_MarketingStatement 
         CREATE ENTITY mSubLC.CompositeComponentList 
         mSubLC.CompositeComponentList.Type               = "M_MarketingStatement"
         mSubLC.CompositeComponentList.SelectLevel        = 2
         mSubLC.CompositeComponentList.DisplayType        = "Statement"
         mSubLC.CompositeComponentList.DisplayTypeIndent  = "...Statement"
         mSubLC.CompositeComponentList.OriginalTypeID     = mSubLC.M_MarketingStatement.ID 
         mSubLC.CompositeComponentList.SLC_OriginalTypeID = mSubLC.S_MarketingStatement.ID
         mSubLC.CompositeComponentList.Value              = mSubLC.S_MarketingStatement.Text
         
         szOriginalDisplayValue = mSubLC.S_MarketingStatement.Text 
         GetAttributeLength( OriginalStringLength, mSubLC, "S_MarketingStatement", "Text" )
         IF MaxDisplayLength < OriginalStringLength
            szDisplayValue = szOriginalDisplayValue[1:100] + "....."
         ELSE
            szDisplayValue = szOriginalDisplayValue    
         END
         mSubLC.CompositeComponentList.DisplayValue = szDisplayValue
      END
   END

END

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: dFullHazardStatement
//
/////////////////////////////////////////////////////////////////////////////
DERIVED ATTRIBUTE OPERATION
dFullHazardStatement( VIEW mSubLC BASED ON LOD mSubLC,
                      STRING ( 32 ) InternalEntityStructure,
                      STRING ( 32 ) InternalAttribStructure,
                      SHORT GetOrSetFlag )

   STRING ( 256 ) szString
   STRING ( 256 ) szReplaceString
   STRING ( 256 ) szLocation
   STRING ( 2 )   szSeparator
   STRING ( 1 )   szOpenSeparator
   STRING ( 1 )   szCloseSeparator
   STRING ( 1 )   szEncloseFirst
   SHORT nPosStart
   SHORT nPosEnd

   CASE GetOrSetFlag
   OF   zDERIVED_GET:

      IF mSubLC.S_HumanHazardSection  EXISTS

         szSeparator = mSubLC.S_HumanHazardSection.LocationSeparator
         szOpenSeparator = ""
         szCloseSeparator = ""
         nPosStart  = zstrlen( szSeparator )
         IF nPosStart > 0
            zstrncpy( szOpenSeparator, szSeparator, 1 )
            IF nPosStart > 1
               zstrncpyoffset( szCloseSeparator, szSeparator, 1, 1 )
            END
         END

         szEncloseFirst = mSubLC.S_HumanHazardSection.EncloseFirstLocation
         szString = mSubLC.S_HumanHazardSection.PrecautionaryStatement
         nPosStart  = zSearchSubString( szString, "{{Precautionary Panel Location}}", "f", 0 )
         IF nPosStart >= 0

            nPosEnd = nPosStart + 32 // length of "{{Precautionary Panel Location}}"
            szReplaceString = ""
            szLocation = mSubLC.S_HumanHazardSection.PanelLoc1
            IF szLocation != ""
               IF szEncloseFirst = "Y" AND szCloseSeparator != ""
                  szReplaceString = szReplaceString + szOpenSeparator + szLocation + szCloseSeparator
               ELSE
                  szReplaceString = szReplaceString + szLocation
               END
            END

            szLocation = mSubLC.S_HumanHazardSection.PanelLoc2
            IF szLocation != ""
               szReplaceString = szReplaceString + szOpenSeparator + szLocation + szCloseSeparator
            END

            szLocation = mSubLC.S_HumanHazardSection.PanelLoc3
            IF szLocation != ""
               szReplaceString = szReplaceString + szOpenSeparator + szLocation + szCloseSeparator
            END

            szLocation = mSubLC.S_HumanHazardSection.PanelLoc4
            IF szLocation != ""
               szReplaceString = szReplaceString + szOpenSeparator + szLocation + szCloseSeparator
            END

            szLocation = mSubLC.S_HumanHazardSection.PanelLoc5
            IF szLocation != ""
               szReplaceString = szReplaceString + szOpenSeparator + szLocation + szCloseSeparator
            END

            zReplaceSubString( szString, nPosStart, nPosEnd, szReplaceString )
         END

         nPosStart  = zSearchSubString( szString, "{{Precautionary Label Location}}", "f", 0 )
         IF nPosStart >= 0

            nPosEnd = nPosStart + 32 // length of "{{Precautionary Label Location}}"
            szReplaceString = ""
            szLocation = mSubLC.S_HumanHazardSection.LabelLoc1
            IF szLocation != ""
               IF szCloseSeparator != ""
                  szReplaceString = szReplaceString + szOpenSeparator + szLocation + szCloseSeparator
               ELSE
                  szReplaceString = szReplaceString + szLocation
               END
            END

            szLocation = mSubLC.S_HumanHazardSection.LabelLoc2
            IF szLocation != ""
               szReplaceString = szReplaceString + szOpenSeparator + szLocation + szCloseSeparator
            END

            szLocation = mSubLC.S_HumanHazardSection.LabelLoc3
            IF szLocation != ""
               szReplaceString = szReplaceString + szOpenSeparator + szLocation + szCloseSeparator
            END

            szLocation = mSubLC.S_HumanHazardSection.LabelLoc4
            IF szLocation != ""
               szReplaceString = szReplaceString + szOpenSeparator + szLocation + szCloseSeparator
            END

            szLocation = mSubLC.S_HumanHazardSection.LabelLoc5
            IF szLocation != ""
               szReplaceString = szReplaceString + szOpenSeparator + szLocation + szCloseSeparator
            END

            zReplaceSubString( szString, nPosStart, nPosEnd, szReplaceString )
         END

      ELSE
         szString = ""
      END

      // Store the calculated value in the object.
      StoreStringInRecord( mSubLC, InternalEntityStructure, InternalAttribStructure, szString )
      RETURN 0

      /* end zDERIVED_GET */
   OF   zDERIVED_SET:

      /* end zDERIVED_SET */
   END  /* case */

END

/////////////////////////////////////////////////////////////////////////////
//    
// OPERATION: dDisplayPathogenName
//    
/////////////////////////////////////////////////////////////////////////////
DERIVED ATTRIBUTE OPERATION
dDisplayPathogenName( VIEW mSubLC BASED ON LOD mSubLC,
                      STRING ( 32 ) InternalEntityStructure,
                      STRING ( 32 ) InternalAttribStructure,
                      SHORT GetOrSetFlag )

   VIEW mSubLC2 BASED ON LOD mSubLC
   STRING ( 32 )  szEntityName
   STRING ( 100 ) szUsageType
   STRING ( 100 ) szClassification
   STRING ( 100 ) szCombinedName
   STRING ( 3 )   szFootnoteNumber
   INTEGER        Count
   
   CASE GetOrSetFlag
   OF   zDERIVED_GET:

      // Combine the Footnote Number as a subscript to the Claim Name, if it exists.
      GetEntityNameFromStructure( InternalEntityStructure, szEntityName )
      GetStringFromAttribute( szUsageType, mSubLC, szEntityName, "UsageType" )
      GetStringFromAttribute( szClassification, mSubLC, szEntityName, "ClaimsClassification" )
      GetStringFromAttribute( szCombinedName, mSubLC, szEntityName, "Name" )
      
      // Set Footnote Number, if footnote exists.
      IF mSubLC.M_UsageFootnoteUsed EXISTS
         IF mSubLC.M_UsageFootnoteUsed.ID != ""
            SET CURSOR FIRST mSubLC.MLC_UsageFootnote WHERE mSubLC.MLC_UsageFootnote.ID = mSubLC.M_UsageFootnoteUsed.ID 
            IF mSubLC.MLC_UsageFootnote.wFootNoteRelativeNumber = ""
               // Relative numbers haven't be set, so set them here.
               CreateViewFromView( mSubLC2, mSubLC )
               Count = 0
               FOR EACH mSubLC2.MLC_UsageFootnote 
                  Count = Count + 1
                  mSubLC2.MLC_UsageFootnote.wFootNoteRelativeNumber = Count
               END
               DropView( mSubLC2 )
            END 
            szFootnoteNumber = mSubLC.MLC_UsageFootnote.wFootNoteRelativeNumber 
            szCombinedName = szCombinedName + "<sup> " + szFootnoteNumber + "</sup>"
         END
      END

      // Store the calculated value in the object.
      StoreStringInRecord( mSubLC,
                           InternalEntityStructure,
                           InternalAttribStructure, szCombinedName )

        /* end zDERIVED_GET */
   OF   zDERIVED_SET:

        /* end zDERIVED_SET */
   END  /* case */

END
